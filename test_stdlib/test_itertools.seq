import itertools
from math import pow

def take(n, seq):
    """Convenience function for partially consuming a long of infinite iterable"""
    return list(itertools.islice(seq, 0, n, 1))
#
# def lzip(args):
#     return list(zip(args))

def islice():
    ra100 = range(100)
    ra = range(10)
    assert list(itertools.islice('ABCDEFG', 0, 2, 1)) == ['A', 'B']
    assert list(itertools.islice(ra100, 10, 20, 3)) == [10, 13, 16, 19]
    assert list(itertools.islice(ra100, 10, 3, 20)) == [0]
    assert list(itertools.islice(ra100, 10, 20, 1)) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert list(itertools.islice(ra100, 10, 10, 1)) == [0]
    assert list(itertools.islice(ra100, 10, 3, 1)) == [0]
    # stop=len(iterable)
    assert list(itertools.islice(ra, 0, 10, 1)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(ra, 2, 10, 1)) == [2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(ra, 1, 10, 2)) == [1, 3, 5, 7, 9]
    assert list(itertools.islice(ra, -5, 10, 1))
islice()

def count():
    for x in itertools.count(0.0, 1.0):
        if x == 3.0:
            break
        print x
    # take(10, itertools.count(1.0, 1.0))
count()

def repeat():
    assert list(itertools.repeat('a', 3)) == ['a', 'a', 'a']
    assert list(itertools.repeat(1, 10)) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert list(itertools.repeat('a', -1)) == ['a']
    print list(itertools.repeat('a', 0))
repeat()

# def starmap():
#     print list(itertools.starmap(pow, [(2, 5), (3, 2), (10, 3)]))
# starmap()
