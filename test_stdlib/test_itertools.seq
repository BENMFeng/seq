import itertools
from math import pow

def underten(x: int) -> bool:
    return x < 10

def take(n, seq):
    """Convenience function for partially consuming a long of infinite iterable"""
    return list(itertools.islice(seq, 0, n, 1))

def combinations():
    assert list(itertools.combinations('ABCD', 2)) == [['A','B'], ['A','C'], ['A','D'], ['B','C'], ['B','D'], ['C','D']]
    test_intermediate = itertools.combinations('ABCD', 2)
    next(test_intermediate)
    assert list(test_intermediate) == [['A','C'], ['A','D'], ['B','C'], ['B','D'], ['C','D']]
    assert list(itertools.combinations(range(4), 3)) == [[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3]]
    test_intermediat = itertools.combinations(range(4), 3)
    next(test_intermediat)
    assert list(test_intermediat) == [[0, 1, 3], [0, 2, 3], [1, 2, 3]]
# combinations()

def combinations_with_replacement():
    # cwr = itertools.combinations_with_replacement
    print list(itertools.combinations_with_replacement('ABC', 2))
# combinations_with_replacement()

def islice():
    ra100 = range(100)
    ra = range(10)
    assert list(itertools.islice('ABCDEFG', 0, 2, 1)) == ['A', 'B']
    assert list(itertools.islice(ra100, 10, 20, 3)) == [10, 13, 16, 19]
    assert list(itertools.islice(ra100, 10, 3, 20)) == [0]
    assert list(itertools.islice(ra100, 10, 20, 1)) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert list(itertools.islice(ra100, 10, 10, 1)) == [0]
    assert list(itertools.islice(ra100, 10, 3, 1)) == [0]
    # stop=len(iterable)
    assert list(itertools.islice(ra, 0, 10, 1)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(ra, 2, 10, 1)) == [2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(ra, 1, 10, 2)) == [1, 3, 5, 7, 9]
    assert list(itertools.islice(ra, -5, 10, 1))
# islice()

def count():
    for x in itertools.count(0.0, 1.0):
        if x == 3.0:
            break
        print x
    print take(3, itertools.count(3.25, 1.0))
# count()

def repeat():
    assert list(itertools.repeat('a', 3)) == ['a', 'a', 'a']
    assert list(itertools.repeat(1, 10)) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert list(itertools.repeat('a', -1)) == ['a']
    print list(itertools.repeat('a', 0))
# repeat()

def compress():
    assert itertools.compress('ABCDEF', [1, 0, 1, 0, 1, 1]) == ['A', 'C', 'E', 'F']
    assert itertools.compress('ABCDEF', [1, 1, 1, 1, 1, 1]) == ['A', 'B', 'C', 'D', 'E', 'F']
    assert itertools.compress('ABCDEF', [1, 0, 1]) == ['A', 'C']
    assert itertools.compress('ABC', [0, 1, 1, 1, 1, 1]) == ['B', 'C']
# compress()

def dropwhile():
    data = [1, 3, 5, 20, 2, 4, 6, 8]
    assert list(itertools.dropwhile(underten, data)) == [20, 2, 4, 6, 8]
dropwhile()

# def starmap():
#     print list(itertools.starmap(pow, [(2, 5), (3, 2), (10, 3)]))
# starmap()
