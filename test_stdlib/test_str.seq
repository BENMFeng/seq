import str

def test_isdigit():
    assert '0'.isdigit() == True
    assert ''.isdigit() == False
    assert 'a'.isdigit() == False
    assert '2829357'.isdigit() == True
    assert 'kshfkjhe'.isdigit() == False
    assert '9735g385497'.isdigit() == False

def test_islower():
    assert ''.islower() == False
    assert 'a'.islower() == True
    assert 'A'.islower() == False
    assert '5'.islower() == False
    assert 'ahuiuej'.islower() == True
    assert 'AhUiUeJ'.islower() == False
    assert '9735g385497'.islower() == True
    assert '9735G385497'.islower() == False

def test_isupper():
    assert ''.isupper() == False
    assert 'a'.isupper() == False
    assert 'A'.isupper() == True
    assert '5'.isupper() == False
    assert '.J, U-I'.isupper() == True
    assert 'AHUIUEJ'.isupper() == True
    assert 'AhUiUeJ'.isupper() == False
    assert '9735g385497'.isupper() == False
    assert '9735G385497'.isupper() == True

def test_isalnum():
    assert ''.isalnum() == False
    assert 'a'.isalnum() == True
    assert '5'.isalnum() == True
    assert ','.isalnum() == False
    assert 'H6'.isalnum() == True
    assert '.J, U-I'.isalnum() == False
    assert 'A4kki83UE'.isalnum() == True
    assert 'AhUiUeJ'.isalnum() == True
    assert '973 g38597'.isalnum() == False
    assert '9735G3-5497'.isalnum() == False

def test_isalpha():
    assert ''.isalpha() == False
    assert 'a'.isalpha() == True
    assert '5'.isalpha() == False
    assert ','.isalpha() == False
    assert 'Hh'.isalpha() == True
    assert '.J, U-I'.isalpha() == False
    assert 'A4kki83UE'.isalpha() == False
    assert 'AhUiUeJ'.isalpha() == True
    assert '973 g38597'.isalpha() == False
    assert '9735G3-5497'.isalpha() == False

def test_isspace():
    assert ''.isspace() == False
    assert ' '.isspace() == True
    assert '5 '.isspace() == False
    assert '\t\n\r '.isspace() == True
    assert '\t '.isspace() == True
    assert '\t\ngh\r '.isspace() == False
    assert 'A4kki 3UE'.isspace() == False

def test_istitle():
    assert ''.istitle() == False
    assert ' '.istitle() == False
    assert 'I '.istitle() == True
    assert 'IH'.istitle() == False
    assert 'Ih'.istitle() == True
    assert 'Hter Hewri'.istitle() == True
    assert 'Kweiur oiejf'.istitle() == False

def test_capitalize():
    assert ' hello '.capitalize() == ' hello '
    assert 'Hello '.capitalize() == 'Hello '
    assert 'hello '.capitalize() == 'Hello '
    assert 'aaaa'.capitalize() == 'Aaaa'
    assert 'AaAa'.capitalize() == 'Aaaa'

def test_isdecimal():
    assert ''.isdecimal() == False
    assert 'a'.isdecimal() == False
    assert '0'.isdecimal() == True
    assert '\xbc'.isdecimal() == False
    assert '0123456789'.isdecimal() == True
    assert '0123456789a'.isdecimal() == False

def test_lower():
    assert 'HeLLo'.lower() == 'hello'
    assert 'hello'.lower() == 'hello'
    assert 'HELLO'.lower() == 'hello'
    assert 'HEL _ LO'.lower() == 'hel _ lo'

def test_upper():
    assert 'HeLLo'.upper() == 'HELLO'
    assert 'hello'.upper() == 'HELLO'
    assert 'HELLO'.upper() == 'HELLO'
    assert 'HEL _ LO'.upper() == 'HEL _ LO'

def test_isascii():
    assert ''.isascii() == True
    assert '\x00'.isascii() == True
    assert '\x7f'.isascii() == True
    assert '\x00\x7f'.isascii() == True
    assert '\x80'.isascii() == False
    assert 'строка'.isascii() == False
    assert '\xe9'.isascii() == False

def test_casefold():
    assert ''.casefold() == ''
    assert 'HeLLo'.casefold() == 'hello'
    assert 'hello'.casefold() == 'hello'
    assert 'HELLO'.casefold() == 'hello'
    assert 'HEL _ LO'.casefold() == 'hel _ lo'

def test_swapcase():
    assert ''.swapcase() == ''
    assert 'HeLLo cOmpUteRs'.swapcase() == 'hEllO CoMPuTErS'
    assert 'H.e_L,L-o cOmpUteRs'.swapcase() == 'h.E_l,l-O CoMPuTErS'

def test_title():
    assert ''.title() == ''
    assert ' hello '.title() == ' Hello '
    assert 'hello '.title() == 'Hello '
    assert 'Hello '.title() == 'Hello '
    assert 'fOrMaT thIs aS titLe String'.title() == 'Format This As Title String'
    assert 'fOrMaT,thIs-aS*titLe;String'.title() == 'Format,This-As*Title;String'
    assert 'getInt'.title() == 'Getint'

def test_isnumeric():
    assert ''.isdecimal() == False
    assert 'a'.isdecimal() == False
    assert '0'.isdecimal() == True
    assert '\xbc'.isdecimal() == False
    assert '0123456789'.isdecimal() == True
    assert '0123456789a'.isdecimal() == False

def test_ljust():
    assert 'abc'.ljust(10, ' ') == 'abc       '
    assert 'abc'.ljust(6, ' ') == 'abc   '
    assert 'abc'.ljust(3, ' ') == 'abc'
    assert 'abc'.ljust(2, ' ') == 'abc'
    assert 'abc'.ljust(10, '*') == 'abc*******'

def test_rjust():
    assert 'abc'.rjust(10, ' ') == '       abc'
    assert 'abc'.rjust(6, ' ') == '   abc'
    assert 'abc'.rjust(3, ' ') == 'abc'
    assert 'abc'.rjust(2, ' ') == 'abc'
    assert 'abc'.rjust(10, '*') == '*******abc'

def test_center():
    assert 'abc'.center(10, ' ') == '   abc    '
    assert 'abc'.center(6, ' ') == ' abc  '
    assert 'abc'.center(3, ' ') == 'abc'
    assert 'abc'.center(2, ' ') == 'abc'
    assert 'abc'.center(10, '*') == '***abc****'

def test_zfill():
    assert '123'.zfill(2) == '123'
    assert '123'.zfill(3) == '123'
    assert '123'.zfill(4) == '0123'
    assert '+123'.zfill(3) == '+123'
    assert '+123'.zfill(4) == '+123'
    assert '+123'.zfill(5) == '+0123'
    assert '-123'.zfill(3) == '-123'
    assert '-123'.zfill(4) == '-123'
    assert '-123'.zfill(5) == '-0123'
    assert ''.zfill(3) == '000'
    assert '34'.zfill(1) == '34'
    assert '34'.zfill(4) == '0034'

def test_count():
    assert 'aaa'.count('a', 0, len('aaa')) == 3
    assert 'aaa'.count('b', 0, len('aaa')) == 0
    assert 'aaa'.count('a', 1, len('aaa')) == 2
    assert 'aaa'.count('a', 10, len('aaa')) == 0
    assert 'aaa'.count('a', -1, len('aaa')) == 1
    assert 'aaa'.count('a', 0, 1) == 1
    assert 'aaa'.count('a', 0, 10) == 3
    assert 'aaa'.count('a', 0, -1) == 2

def test_find():
    assert 'abcdefghiabc'.find('abc', 0, len('abcdefghiabc')) == 0
    assert 'abcdefghiabc'.find('abc', 1, len('abcdefghiabc')) == 9
    assert 'abcdefghiabc'.find('def', 4, len('abcdefghiabc')) == -1
    assert 'rrarrrrrrrrra'.find('a', 0, len('rrarrrrrrrrra')) == 2
    assert 'rrarrrrrrrrra'.find('a', 4, len('rrarrrrrrrrra')) == 12
    assert 'rrarrrrrrrrra'.find('a', 4, 6) == -1
    assert 'abc'.find('', 0, len('abc')) == 0
    assert 'abc'.find('', 3, len('abc')) == 3
    assert 'abc'.find('', 4, len('abc')) == -1

def test_rfind():
    assert 'abcdefghiabc'.rfind('abc', 0, len('abcdefghiabc')) == 9
    assert 'abcdefghiabc'.rfind('', 0, len('abcdefghiabc')) == 12
    assert 'abcdefghiabc'.rfind('abcd', 0, len('abcdefghiabc')) == 0
    assert 'abcdefghiabc'.rfind('abcz', 0, len('abcdefghiabc')) == -1
    assert 'rrarrrrrrrrra'.rfind('a', 0, len('rrarrrrrrrrra')) == 12
    assert 'rrarrrrrrrrra'.rfind('a', 4, len('rrarrrrrrrrra')) == 12
    assert 'rrarrrrrrrrra'.rfind('a', 4, 6) == -1
    assert 'abc'.rfind('', 0, len('abc')) == 3
    assert 'abc'.rfind('', 3, len('abc')) == 3
    assert 'abc'.rfind('', 4, len('abc')) == -1

def test_isidentifier():
    assert 'a'.isidentifier() == True
    assert 'Z'.isidentifier() == True
    assert '_'.isidentifier() == True
    assert 'b0'.isidentifier() == True
    assert 'bc'.isidentifier() == True
    assert 'b_'.isidentifier() == True
    assert ' '.isidentifier() == False
    assert '3t'.isidentifier() == False
    assert '_gth_45'.isidentifier() == True

def test_isprintable():
    assert ''.isprintable() == True
    assert '\"'.isprintable() == True
    assert "\'".isprintable() == True
    assert ' '.isprintable() == True
    assert 'abcdef'.isprintable() == True
    assert '0123456789'.isprintable() == True
    assert 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.isprintable() == True
    assert 'abcdefghijklmnopqrstuvwxyz'.isprintable() == True
    assert '!#$%&()*+,-./:;?@[\\]^_`{|}~'.isprintable() == True
    assert 'abcdef\n'.isprintable() == False

def test_lstrip():
    assert '   hello   '.lstrip('') == 'hello   '
    assert ' \t\n\rabc \t\n\r'.lstrip('') == 'abc \t\n\r'
    assert "xyzzyhelloxyzzy".lstrip('xyz') == 'helloxyzzy'

def test_rstrip():
    assert '   hello   '.rstrip('') == '   hello'
    assert ' \t\n\rabc \t\n\r'.rstrip('') == ' \t\n\rabc'
    assert "xyzzyhelloxyzzy".rstrip('xyz') == 'xyzzyhello'

def test_strip():
    assert '   hello   '.strip('') == 'hello'
    assert ' \t\n\rabc \t\n\r'.strip('') == 'abc'
    assert "xyzzyhelloxyzzy".strip('xyz') == 'hello'
    assert 'hello'.strip('xyz') == 'hello'
    assert 'mississippi'.strip('mississippi') == ''
    assert 'mississippi'.strip('i') == 'mississipp'

def test_partition():
    assert 'hello'.partition('l') == ('he', 'l', 'lo')
    assert 'this is the partition method'.partition('ti') == ('this is the par', 'ti', 'tion method')
    assert 'http://www.seq.org'.partition('://') == ('http', '://', 'www.seq.org')
    assert 'http://www.seq.org'.partition('?') == ('http://www.seq.org', '', '')
    assert 'http://www.seq.org'.partition('http://') == ('', 'http://', 'www.seq.org')
    assert 'http://www.seq.org'.partition('org') == ('http://www.seq.', 'org', '')

def test_rpartition():
    assert 'hello'.rpartition('l') == ('hel', 'l', 'o')
    assert 'this is the rpartition method'.rpartition('ti') == ('this is the rparti', 'ti', 'on method')
    assert 'http://www.seq.org'.rpartition('://') == ('http', '://', 'www.seq.org')
    assert 'http://www.seq.org'.rpartition('?') == ('', '', 'http://www.seq.org')
    assert 'http://www.seq.org'.rpartition('http://') == ('', 'http://', 'www.seq.org')
    assert 'http://www.seq.org'.rpartition('org') == ('http://www.seq.', 'org', '')

def test_split():
    assert 'h l l o'.split(' ', -1) == ['h', 'l', 'l', 'o']
    assert 'a|b|c|d'.split('|', -1) == ['a', 'b', 'c', 'd']
    assert 'a|b|c|d'.split('|', 0) == ['a|b|c|d']
    assert 'abcd'.split('|', -1) == ['abcd']
    assert ''.split('|', -1) == ['']
    assert 'endcase |'.split('|', -1) == ['endcase ', '']
    assert '| startcase'.split('|', -1) == ['', ' startcase']
    assert '|bothcase|'.split('|', -1) == ['', 'bothcase', '']
    assert 'abbbc'.split('bb', -1) == ['a', 'bc']
    assert 'aaa'.split('aaa', -1) == ['', '']
    assert 'aaa'.split('aaa', 0) == ['aaa']
    assert 'abbaab'.split('ba', -1) == ['ab', 'ab']
    assert 'aa'.split('aaa', -1) == ['aa']
    assert 'Abbobbbobb'.split('bbobb', -1) == ['A', 'bobb']
    assert 'AbbobbBbbobb'.split('bbobb', -1) == ['A', 'B', '']
    assert ('a|'*20)[:-1].split('|', -1) == ['a']*20
    assert ('a|'*20)[:-1].split('|', 15) == ['a']*15 +['a|a|a|a|a']
    assert 'a|b|c|d'.split('|', 1) == ['a', 'b|c|d']
    assert 'a|b|c|d'.split('|', 2) == ['a', 'b', 'c|d']
    assert 'a|b|c|d'.split('|', 3) == ['a', 'b', 'c', 'd']
    assert 'a|b|c|d'.split('|', 4) == ['a', 'b', 'c', 'd']
    assert 'a||b||c||d'.split('|', 2) == ['a', '', 'b||c||d']

def test_startswith():
    assert 'hello'.startswith('he', 0, len('hello')) == True
    assert 'hello'.startswith('hello', 0, len('hello')) == True
    assert 'hello'.startswith('hello world', 0, len('hello')) == False
    assert 'hello'.startswith('', 0, len('hello')) == True
    assert 'hello'.startswith('ello', 0, len('hello')) == False
    assert 'hello'.startswith('ello', 1, len('hello')) == True
    assert 'hello'.startswith('o', 4, len('hello')) == True
    assert 'hello'.startswith('o', 5, len('hello')) == False
    assert 'hello'.startswith('lo', 3, len('hello')) == True
    assert 'hello'.startswith('', 5, len('hello')) == True
    assert 'hello'.startswith('lo', 6, len('hello')) == False
    assert 'helloworld'.startswith('lowo', 3, len('helloworld')) == True
    assert 'helloworld'.startswith('lowo', 3, 7) == True
    assert 'helloworld'.startswith('lowo', 3, 6) == False
    assert ''.startswith('', 0, 1) == True
    assert ''.startswith('', 0, 0) == True
    assert ''.startswith('', 1, 0) == False
    assert 'hello'.startswith('he', 0, -1) == True
    assert 'hello'.startswith('hello', 0, -1) == False
    assert 'hello'.startswith('he', 0, -3) == True
    assert 'hello'.startswith('ello', -4, len('hello')) == True
    assert 'hello'.startswith('ello', -5, len('hello')) == False
    assert 'hello'.startswith('', -3, -3) == True
    assert 'hello'.startswith('o', -1, len('hello')) == True

def test_endswith():
    assert 'hello'.endswith('lo', 0, len('hello')) == True
    assert 'hello'.endswith('he', 0, len('hello')) == False
    assert 'hello'.endswith('', 0, len('hello')) == True
    assert 'hello'.endswith('hello world', 0, len('hello')) == False
    assert 'helloworld'.endswith('worl', 0, len('hello')) == False
    assert 'helloworld'.endswith('worl', 3, 9) == True
    assert 'helloworld'.endswith('world', 3, 12) == True
    assert 'helloworld'.endswith('lowo', 1, 7) == True
    assert 'helloworld'.endswith('lowo', 2, 7) == True
    assert 'helloworld'.endswith('lowo', 3, 7) == True
    assert 'helloworld'.endswith('lowo', 4, 7) == False
    assert 'helloworld'.endswith('lowo', 3, 8) == False
    assert 'ab'.endswith('ab', 0, 1) == False
    assert 'ab'.endswith('ab', 0, 0) == False
    assert ''.endswith('', 0, 1) == True
    assert ''.endswith('', 0, 0) == True
    assert ''.endswith('', 1, 0) == False
    assert 'hello'.endswith('lo', -2, len('hello')) == True
    assert 'hello'.endswith('he', -2, len('hello')) == False
    assert 'hello'.endswith('', -3, -3) == True
    assert 'helloworld'.endswith('worl', -6, len('helloworld')) == False
    assert 'helloworld'.endswith('worl', -5, -1) == True
    assert 'helloworld'.endswith('worl', -5, 9) == True
    assert 'helloworld'.endswith('world', -7, 12) == True
    assert 'helloworld'.endswith('lowo', -99, -3) == True
    assert 'helloworld'.endswith('lowo', -8, -3) == True
    assert 'helloworld'.endswith('lowo', -7, -3) == True
    assert 'helloworld'.endswith('lowo', 3, -4) == False
    assert 'helloworld'.endswith('lowo', -8, -2) == False

def test_index():
    assert 'abcdefghiabc'.index('abc', 0, len('abcdefghiabc')) == 0
    assert 'abcdefghiabc'.index('abc', 1, len('abcdefghiabc')) == 9
    assert 'abc'.index('', 0, len('abc')) == 0
    assert 'abc'.index('', 3, len('abc')) == 3
    assert 'rrarrrrrrrrra'.index('a', 0, len('rrarrrrrrrrra')) == 2
    assert 'rrarrrrrrrrra'.index('a', 4, len('rrarrrrrrrrra')) == 12
    assert 'abcdefghiabc'.index('def', 4, len('abcdefghiabc')) == -1

# test_isdigit()
# test_islower()
# test_isupper()
# test_isalnum()
# test_isalpha()
# test_isspace()
# test_istitle()
# test_capitalize()
# test_isdecimal()
# test_lower()
# test_upper()
# test_isascii()
# test_casefold()
# test_swapcase()
# test_title()
# test_isnumeric()
# test_ljust()
# test_rjust()
# test_center()
# test_count()
# test_find()
# test_rfind()
# test_isidentifier()
# test_isprintable()
# test_lstrip()
# test_rstrip()
# test_strip()
# test_partition()
# test_rpartition()
# test_split()
# test_startswith()
# test_endswith()
test_index()
