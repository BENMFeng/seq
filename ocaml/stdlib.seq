class list[`t](arr: array[`t], len: int):
    def __init__(self: list[`t], arr: array[`t], len: int):
        self.arr = arr
        self.len = len

    def __init__(self: list[`t]):
        return list[`t](array[`t](10), 0)

    def __len__(self: list[`t]):
        return self.len

    def __bool__(self: list[`t]):
        return self.len > 0

    def __getitem__(self: list[`t], idx: int):
        return self.arr[idx]

    def __setitem__(self: list[`t], idx: int, val: `t):
        self.arr[idx] = val

    def __delitem__(self: list[`t], idx: int):
        while idx < self.len - 1:
            self.arr[idx] = self.arr[idx + 1]
            idx += 1
        self.len -= 1

    def __slice__(self: list[`t], a: int, b: int):
        return list[`t](self.arr[a:b], b - a)

    def __slice_left__(self: list[`t], b: int):
        return list[`t](self.arr[:b], b)

    def __slice_right__(self: list[`t], a: int):
        return list[`t](self.arr[a:], self.len - a)

    def __copy__(self: list[`t]):
        return list[`t](self.arr.__copy__(), self.len)

    def __iter__(self: list[`t]):
        i = 0
        while i < self.len:
            yield self.arr[i]
            i += 1

    def _resize_if_full(self: list[`t]):
        if self.len == self.arr.len:
            triple = 1 + 3*self.len
            new_arr = array[`t](triple/2)
            i = 0
            while i < self.len:
                new_arr[i] = self.arr[i]
                i += 1
            self.arr = new_arr

    def append(self: list[`t], x: `t):
        self._resize_if_full()
        self.arr[self.len] = x
        self.len += 1

    def insert(self: list[`t], idx: int, x: `t):
        self._resize_if_full()
        i = self.len
        while i > idx:
            self.arr[i] = self.arr[i-1]
            i -= 1
        self.arr[idx] = x
        self.len += 1

    def pop(self: list[`t]):
        x = self[self.len - 1]
        self.len -= 1
        return x

    def clear(self: list[`t]):
        self.len = 0

    def count(self: list[`t], x: `t):
        count = 0
        for a in self:
            if a == x:
                count += 1
        return count

    def reverse(self: list[`t]):
        i = 0
        while i < self.len/2:
            j = self.len - i - 1
            x = self[i]
            self[i] = self[j]
            self[j] = x
            i += 1

    def copy(self: list[`t]):
        return self.__copy__()
