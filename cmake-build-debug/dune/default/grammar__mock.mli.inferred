type token =
    YIELD
  | XOREQ of string
  | WITH
  | WHILE
  | TYPEOF
  | TYPE
  | TRY
  | TRUE
  | THROW
  | SUB of string
  | STRING of string
  | SPIPE of string
  | SEQ of (string * string)
  | SEMICOLON
  | RSHEQ of string
  | RS
  | RP
  | RETURN
  | RB
  | PYDEF_RAW of string
  | PYDEF
  | PTR
  | PRINT
  | PPIPE of string
  | POWEQ of string
  | POW of string
  | PLUSEQ of string
  | PIPE of string
  | PASS
  | OREQ of string
  | OR of string
  | OF
  | NOTIN of string
  | NOT of string
  | NONE
  | NL
  | NEQ of string
  | MULEQ of string
  | MUL of string
  | MODEQ of string
  | MOD of string
  | MINEQ of string
  | MATCH
  | LSHEQ of string
  | LS
  | LP
  | LESS of string
  | LEQ of string
  | LB
  | LAMBDA
  | KMER of string
  | ISNOT of string
  | IS of string
  | INT_S of (string * string)
  | INDENT
  | IN of string
  | IMPORT
  | IF
  | ID of string
  | GREAT of string
  | GLOBAL
  | GEQ of string
  | FSTRING of string
  | FROM
  | FOR
  | FLOAT_S of (float * string)
  | FINALLY
  | FDIVEQ of string
  | FDIV of string
  | FALSE
  | EXTERN of string
  | EXTEND
  | EXCEPT
  | EQ of string
  | EOF
  | ELSE
  | ELLIPSIS of string
  | ELIF
  | EEQ of string
  | DOT
  | DIVEQ of string
  | DIV of string
  | DEL
  | DEF
  | DEDENT
  | CONTINUE
  | COMMA
  | COLON
  | CLASS
  | CASE
  | B_XOR of string
  | B_RSH of string
  | B_OR of string
  | B_NOT of string
  | B_LSH of string
  | B_AND of string
  | BREAK
  | AT of string
  | ASSERT
  | AS
  | ANDEQ of string
  | AND of string
  | ADD of string
val menhir_begin_marker : int
val xv_with_statement : Ast.tstmt Ast.ann
val xv_with_clause : Ast.texpr Ast.ann * string option
val xv_typed_param : Ast.param Ast.ann
val xv_type_head : (Lexing.position * Lexing.position) * Ast.class_t
val xv_typ : Ast.tstmt Ast.ann
val xv_tuple : Ast.texpr Ast.ann
val xv_try_statement : Ast.tstmt Ast.ann
val xv_suite : Ast.tstmt Ast.ann list
val xv_statement : Ast.tstmt Ast.ann list
val xv_small_statement : Ast.tstmt Ast.ann list
val xv_small_single_statement : Ast.tstmt Ast.ann
val xv_single_statement : Ast.tstmt Ast.ann
val xv_separated_nonempty_list_OR_case_type_ :
  ((Lexing.position * Lexing.position) * Ast.pattern) list
val xv_separated_nonempty_list_EQ_expr_list_ : Ast.texpr Ast.ann list list
val xv_separated_nonempty_list_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_separated_nonempty_list_COMMA_case_or_ : Ast.pattern Ast.ann list
val xv_separated_nonempty_list_COMMA_ID_ : string list
val xv_separated_llist_SEMICOLON_small_statement_ :
  Ast.tstmt Ast.ann list list
val xv_separated_llist_COMMA_with_clause_ :
  (Ast.texpr Ast.ann * string option) list
val xv_separated_llist_COMMA_typed_param_ : Ast.param Ast.ann list
val xv_separated_llist_COMMA_index_term_ : Ast.texpr Ast.ann list
val xv_separated_llist_COMMA_import_term_ :
  ((Lexing.position * Lexing.position) * (Ast.texpr Ast.ann * string option))
  list
val xv_separated_llist_COMMA_extern_what_ :
  ((Lexing.position * Lexing.position) * Ast.eimport) list
val xv_separated_llist_COMMA_extern_param_ : Ast.param Ast.ann list
val xv_separated_llist_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_separated_llist_COMMA_dictitem_ :
  (Ast.texpr Ast.ann * Ast.texpr Ast.ann) list
val xv_separated_llist_COMMA_case_or_ : Ast.pattern Ast.ann list
val xv_separated_llist_COMMA_call_term_ :
  (string option * Ast.texpr Ast.ann) list
val xv_separated_llist_COMMA_ID_ : string list
val xv_separated_list_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_separated_list_COMMA_ID_ : string list
val xv_reverse_separated_nonempty_llist_SEMICOLON_small_statement_ :
  Ast.tstmt Ast.ann list list
val xv_reverse_separated_nonempty_llist_COMMA_with_clause_ :
  (Ast.texpr Ast.ann * string option) list
val xv_reverse_separated_nonempty_llist_COMMA_typed_param_ :
  Ast.param Ast.ann list
val xv_reverse_separated_nonempty_llist_COMMA_index_term_ :
  Ast.texpr Ast.ann list
val xv_reverse_separated_nonempty_llist_COMMA_import_term_ :
  ((Lexing.position * Lexing.position) * (Ast.texpr Ast.ann * string option))
  list
val xv_reverse_separated_nonempty_llist_COMMA_extern_what_ :
  ((Lexing.position * Lexing.position) * Ast.eimport) list
val xv_reverse_separated_nonempty_llist_COMMA_extern_param_ :
  Ast.param Ast.ann list
val xv_reverse_separated_nonempty_llist_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_reverse_separated_nonempty_llist_COMMA_dictitem_ :
  (Ast.texpr Ast.ann * Ast.texpr Ast.ann) list
val xv_reverse_separated_nonempty_llist_COMMA_case_or_ :
  Ast.pattern Ast.ann list
val xv_reverse_separated_nonempty_llist_COMMA_call_term_ :
  (string option * Ast.texpr Ast.ann) list
val xv_reverse_separated_nonempty_llist_COMMA_ID_ : string list
val xv_reverse_separated_llist_SEMICOLON_small_statement_ :
  Ast.tstmt Ast.ann list list
val xv_reverse_separated_llist_COMMA_with_clause_ :
  (Ast.texpr Ast.ann * string option) list
val xv_reverse_separated_llist_COMMA_typed_param_ : Ast.param Ast.ann list
val xv_reverse_separated_llist_COMMA_index_term_ : Ast.texpr Ast.ann list
val xv_reverse_separated_llist_COMMA_import_term_ :
  ((Lexing.position * Lexing.position) * (Ast.texpr Ast.ann * string option))
  list
val xv_reverse_separated_llist_COMMA_extern_what_ :
  ((Lexing.position * Lexing.position) * Ast.eimport) list
val xv_reverse_separated_llist_COMMA_extern_param_ : Ast.param Ast.ann list
val xv_reverse_separated_llist_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_reverse_separated_llist_COMMA_dictitem_ :
  (Ast.texpr Ast.ann * Ast.texpr Ast.ann) list
val xv_reverse_separated_llist_COMMA_case_or_ : Ast.pattern Ast.ann list
val xv_reverse_separated_llist_COMMA_call_term_ :
  (string option * Ast.texpr Ast.ann) list
val xv_reverse_separated_llist_COMMA_ID_ : string list
val xv_pyfunc : Ast.tstmt Ast.ann list
val xv_program : Ast.tstmt Ast.ann list
val xv_print_statement : Ast.tstmt Ast.ann list
val xv_pipe_expr :
  (Lexing.position * Lexing.position) * (string * Ast.texpr Ast.ann) list
val xv_param_type : Ast.texpr Ast.ann
val xv_option_param_type_ : Ast.texpr Ast.ann option
val xv_option_generic_list_ : Ast.param Ast.ann list option
val xv_option_func_ret_type_ : Ast.texpr Ast.ann option
val xv_option_finally_ : Ast.tstmt Ast.ann list option
val xv_option_extern_from_ : Ast.texpr Ast.ann option
val xv_option_extern_as_ : string option
val xv_option_expr_ : Ast.texpr Ast.ann option
val xv_option_default_val_ : Ast.texpr Ast.ann option
val xv_option_comprehension_ : Ast.tcomprehension Ast.ann option
val xv_option_SEMICOLON_ : unit option
val xv_option_COMMA_ : unit option
val xv_nonempty_list_statement_ : Ast.tstmt Ast.ann list list
val xv_nonempty_list_decorator_ : string Ast.ann list
val xv_nonempty_list_dataclass_member_ : Ast.tstmt Ast.ann option list
val xv_nonempty_list_class_member_ : Ast.tstmt Ast.ann option list
val xv_nonempty_list_SUB_ : string list
val xv_nonempty_list_STRING_ : string list
val xv_nonempty_list_SEQ_ : (string * string) list
val xv_nonempty_list_FSTRING_ : string list
val xv_nonempty_list_B_NOT_ : string list
val xv_nonempty_list_ADD_ : string list
val xv_loption_separated_nonempty_list_COMMA_expr__ : Ast.texpr Ast.ann list
val xv_loption_separated_nonempty_list_COMMA_ID__ : string list
val xv_list_decorator_ : string Ast.ann list
val xv_list_comprehension_if_ : Ast.texpr Ast.ann list
val xv_list_catch_ : Ast.catch Ast.ann list
val xv_index_term : Ast.texpr Ast.ann
val xv_import_term :
  (Lexing.position * Lexing.position) * (Ast.texpr Ast.ann * string option)
val xv_import_statement : Ast.tstmt Ast.ann list
val xv_generic_list : Ast.param Ast.ann list
val xv_func_statement : Ast.tstmt Ast.ann list
val xv_func_ret_type : Ast.texpr Ast.ann
val xv_func_def : Ast.fn_t
val xv_func : Ast.tstmt Ast.ann list
val xv_finally : Ast.tstmt Ast.ann list
val xv_extern_what : (Lexing.position * Lexing.position) * Ast.eimport
val xv_extern_param : Ast.param Ast.ann
val xv_extern_from : Ast.texpr Ast.ann
val xv_extern_as : string
val xv_extend : Ast.tstmt Ast.ann
val xv_expr_list : Ast.texpr Ast.ann list
val xv_expr : Ast.texpr Ast.ann
val xv_elif_suite : (Ast.texpr Ast.ann option * Ast.tstmt Ast.ann list) list
val xv_dot_term : Ast.texpr Ast.ann
val xv_dictitem : Ast.texpr Ast.ann * Ast.texpr Ast.ann
val xv_default_val : Ast.texpr Ast.ann
val xv_decorator : string Ast.ann
val xv_decl_statement : Ast.tstmt Ast.ann
val xv_dataclass_member : Ast.tstmt Ast.ann option
val xv_cond_op : string
val xv_cond_expr : Ast.cond_t Ast.ann
val xv_comprehension_if : Ast.texpr Ast.ann
val xv_comprehension : Ast.tcomprehension Ast.ann
val xv_cls : Ast.tstmt Ast.ann
val xv_class_statement : Ast.tstmt Ast.ann
val xv_class_member : Ast.tstmt Ast.ann option
val xv_catch : Ast.catch Ast.ann
val xv_case_type : (Lexing.position * Lexing.position) * Ast.pattern
val xv_case_suite : (Ast.pattern Ast.ann * Ast.tstmt Ast.ann list) list
val xv_case_or : Ast.pattern Ast.ann
val xv_case_int : int64
val xv_case : Ast.pattern Ast.ann * Ast.tstmt Ast.ann list
val xv_call_term : string option * Ast.texpr Ast.ann
val xv_bool_expr : Ast.texpr Ast.ann
val xv_bool_and_expr : Ast.texpr Ast.ann
val xv_bool : bool
val xv_aug_eq : string
val xv_atom : Ast.texpr Ast.ann
val xv_assign_statement : Ast.tstmt Ast.ann list
val xv_arith_term : Ast.texpr Ast.ann
val xv_arith_op : string
val xv_arith_expr : Ast.texpr Ast.ann
val xv_FL_HAS_COMMA_expr_ : Ast.texpr Ast.ann list * bool
val xv_FLNE_SEMICOLON_small_statement_ : Ast.tstmt Ast.ann list list
val xv_FLNE_COMMA_with_clause_ : (Ast.texpr Ast.ann * string option) list
val xv_FLNE_COMMA_typed_param_ : Ast.param Ast.ann list
val xv_FLNE_COMMA_index_term_ : Ast.texpr Ast.ann list
val xv_FLNE_COMMA_import_term_ :
  ((Lexing.position * Lexing.position) * (Ast.texpr Ast.ann * string option))
  list
val xv_FLNE_COMMA_extern_what_ :
  ((Lexing.position * Lexing.position) * Ast.eimport) list
val xv_FLNE_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_FLNE_COMMA_ID_ : string list
val xv_FL_COMMA_typed_param_ : Ast.param Ast.ann list
val xv_FL_COMMA_extern_param_ : Ast.param Ast.ann list
val xv_FL_COMMA_expr_ : Ast.texpr Ast.ann list
val xv_FL_COMMA_dictitem_ : (Ast.texpr Ast.ann * Ast.texpr Ast.ann) list
val xv_FL_COMMA_case_or_ : Ast.pattern Ast.ann list
val xv_FL_COMMA_call_term_ : (string option * Ast.texpr Ast.ann) list
val menhir_end_marker : int
