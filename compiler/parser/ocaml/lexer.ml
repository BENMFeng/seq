# 10 "lexer.mll"
 
  module L = Lexing
  module P = Grammar

  type offset = { mutable line: int ; mutable col: int }
  type stack = (* Used for tracking indentation levels *)
    { stack: int Stack.t
    ; fname: string
    ; mutable offset: int
    ; mutable ignore_newline: int
    }

  let char_to_string = String.make 1
  let ignore_nl t = t.ignore_newline <- t.ignore_newline + 1
  and aware_nl t = t.ignore_newline <- t.ignore_newline - 1
  let count_lines s =
    let i = ref 0 in String.iter (fun c -> if c = '\n' then incr i) s; !i
  (* given a (named) string (e.g. s'foo' or 'bar'), decide the proper token *)
  let seq_string pfx u pos =
    let fix_literals ?(is_raw=false) s =
      let buf = Buffer.create (String.length s) in
      let rec scan i =
        let l = String.length s in
        let is_octal c = Char.((code c) >= (code '0') && (code c) <= (code '7')) in
        if i >= l then ()
        else if i < (l - 1) && s.[i] = '\\' && (not is_raw) then (
          let skip, c = match s.[i + 1] with
            | '\\' -> 1, '\\'
            | '\'' -> 1, '\''
            | '"' -> 1, '"'
            | 'a' -> 1, Char.chr 7
            | 'b' -> 1, '\b'
            | 'f' -> 1, Char.chr 12
            | 'n' -> 1, '\n'
            | 'r' -> 1, '\r'
            | 't' -> 1, '\t'
            | 'v' -> 1, Char.chr 11
            | 'x' ->
              let n =
                if i < (l - 3) then
                try Some (int_of_string ("0x" ^ (String.sub s (i + 2) 2)))
                with Failure _ -> None
                else None
              in
              (match n with
              | Some n -> 3, Char.chr n
              | None -> raise (Ast.SyntaxError ("Invalid \\x escape", pos)))
            | c when is_octal c ->
              let n =
                if i < (l - 3) && (is_octal s.[i + 2]) && (is_octal s.[i + 3]) then 3
                else if i < (l - 2) && (is_octal s.[i + 2]) then 2
                else 1
              in
              n, Char.chr (int_of_string ("0o" ^ (String.sub s (i + 1) n)))
            | _ -> 0, s.[i]
          in
          Buffer.add_char buf c;
          scan (i + 1 + skip)
        ) else (Buffer.add_char buf s.[i]; scan (i + 1))
      in
      scan 0;
      Buffer.contents buf
    in
    match String.lowercase (String.sub pfx 0 1) with
    | "r" -> P.STRING (fix_literals ~is_raw:true u)
    | ("s" | "p") as p -> P.SEQ (p, fix_literals u)
    | "k" -> P.KMER (fix_literals u)
    | "f" -> P.FSTRING (fix_literals u)
    | _ -> P.STRING (fix_literals u)

# 73 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\255\255\000\000\192\255\193\255\081\000\103\000\002\000\035\000\
    \081\000\101\000\078\000\219\255\220\255\221\255\079\000\223\255\
    \159\000\083\000\230\255\106\000\085\000\086\000\087\000\108\000\
    \240\255\241\255\242\255\243\255\244\255\245\255\002\000\122\000\
    \192\000\025\001\114\001\203\001\036\002\125\002\200\002\019\003\
    \001\000\002\000\165\000\174\000\167\000\005\000\240\000\052\001\
    \006\000\174\000\133\003\051\001\052\000\049\000\185\000\192\000\
    \208\003\066\004\219\000\063\000\220\000\222\000\140\000\247\255\
    \147\000\246\255\227\255\123\000\239\255\229\255\238\255\237\255\
    \202\255\128\000\236\255\204\255\228\255\129\000\235\255\206\255\
    \141\004\146\000\224\255\194\255\100\003\151\004\118\003\216\255\
    \222\255\217\255\214\255\134\000\215\255\212\255\158\000\213\255\
    \211\255\205\255\195\255\226\004\249\004\054\001\253\255\254\255\
    \066\004\254\255\007\000\255\255\027\000\249\000\254\255\028\000\
    \080\001\169\001\255\255\215\004\254\255\008\000\255\255\029\000\
    \083\001\254\255\030\000\171\001\172\001\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\058\000\058\000\063\000\057\000\
    \056\000\048\000\045\000\255\255\255\255\255\255\046\000\255\255\
    \037\000\030\000\255\255\052\000\054\000\024\000\023\000\029\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\007\000\006\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \063\000\063\000\000\000\063\000\002\000\255\255\255\255\255\255\
    \255\255\001\000\005\000\255\255\255\255\255\255\255\255\003\000\
    \005\000\005\000\255\255\255\255\255\255\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\255\255\255\255\255\255\022\000\255\255\255\255\
    \059\000\255\255\255\255\255\255\255\255\059\000\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\255\255\055\000\255\255\
    \255\255\255\255\255\255\255\255\058\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\000\000\002\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\046\000\255\255\255\255\046\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \104\000\000\000\255\255\000\000\104\000\109\000\000\000\109\000\
    \109\000\109\000\000\000\115\000\000\000\255\255\000\000\115\000\
    \120\000\000\000\120\000\120\000\120\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\042\000\049\000\042\000\041\000\048\000\042\000\
    \049\000\105\000\116\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \044\000\006\000\030\000\043\000\064\000\007\000\022\000\031\000\
    \029\000\028\000\009\000\010\000\011\000\014\000\016\000\008\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\013\000\012\000\020\000\017\000\019\000\097\000\
    \015\000\032\000\032\000\032\000\032\000\032\000\033\000\032\000\
    \032\000\032\000\032\000\035\000\032\000\032\000\032\000\032\000\
    \034\000\032\000\036\000\037\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\027\000\040\000\026\000\021\000\032\000\
    \096\000\032\000\032\000\032\000\032\000\032\000\033\000\032\000\
    \032\000\039\000\032\000\035\000\032\000\032\000\038\000\032\000\
    \034\000\032\000\036\000\037\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\025\000\023\000\024\000\018\000\080\000\
    \094\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\089\000\087\000\088\000\093\000\091\000\
    \079\000\073\000\072\000\071\000\070\000\080\000\084\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\062\000\090\000\053\000\098\000\054\000\098\000\075\000\
    \077\000\068\000\066\000\098\000\084\000\060\000\047\000\042\000\
    \044\000\042\000\045\000\063\000\045\000\065\000\084\000\049\000\
    \042\000\069\000\098\000\045\000\098\000\074\000\078\000\099\000\
    \082\000\098\000\055\000\092\000\098\000\047\000\098\000\044\000\
    \046\000\055\000\046\000\098\000\084\000\081\000\049\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\055\000\098\000\095\000\098\000\000\000\000\000\099\000\
    \055\000\098\000\000\000\000\000\058\000\061\000\076\000\061\000\
    \067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\042\000\058\000\061\000\045\000\061\000\000\000\
    \003\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\032\000\
    \112\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\030\000\051\000\047\000\042\000\102\000\
    \031\000\045\000\000\000\000\000\059\000\000\000\000\000\000\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\051\000\047\000\111\000\103\000\046\000\
    \000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\000\000\123\000\000\000\113\000\
    \032\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\030\000\000\000\000\000\000\000\
    \000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\052\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\111\000\000\000\255\255\122\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \033\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\124\000\125\000\000\000\
    \114\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \033\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\030\000\000\000\000\000\
    \255\255\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\110\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\111\000\000\000\122\000\
    \122\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\033\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\034\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\033\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\034\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\030\000\000\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \110\000\000\000\000\000\121\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\033\000\032\000\032\000\032\000\032\000\035\000\
    \032\000\032\000\032\000\032\000\034\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\033\000\032\000\032\000\032\000\032\000\035\000\
    \032\000\032\000\032\000\032\000\034\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\030\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\110\000\000\000\121\000\121\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\032\000\
    \032\000\032\000\032\000\033\000\032\000\032\000\032\000\032\000\
    \035\000\032\000\032\000\032\000\032\000\034\000\032\000\036\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\000\000\000\000\000\000\032\000\000\000\032\000\032\000\
    \032\000\032\000\032\000\033\000\032\000\032\000\032\000\032\000\
    \035\000\032\000\032\000\032\000\032\000\034\000\032\000\036\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\056\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\050\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\051\000\086\000\
    \000\000\086\000\000\000\000\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\051\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\000\000\000\000\000\000\032\000\000\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\057\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\058\000\105\000\000\000\000\000\106\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\108\000\000\000\
    \000\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \083\000\116\000\083\000\000\000\117\000\000\000\000\000\083\000\
    \000\000\000\000\083\000\000\000\083\000\000\000\000\000\000\000\
    \000\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\118\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \083\000\000\000\083\000\000\000\000\000\000\000\000\000\083\000\
    \000\000\000\000\083\000\000\000\083\000\000\000\000\000\000\000\
    \000\000\083\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\119\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \000\000\000\000\105\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\000\000\000\000\000\000\098\000\000\000\098\000\000\000\
    \000\000\000\000\000\000\098\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\098\000\000\000\098\000\000\000\
    \000\000\000\000\000\000\098\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\001\000\040\000\041\000\001\000\040\000\045\000\
    \048\000\106\000\117\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\001\000\001\000\001\000\030\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\006\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \007\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
    \008\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\010\000\014\000\014\000\008\000\009\000\
    \017\000\020\000\020\000\021\000\022\000\005\000\004\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\031\000\009\000\052\000\004\000\053\000\004\000\019\000\
    \019\000\023\000\023\000\004\000\005\000\059\000\042\000\042\000\
    \044\000\044\000\042\000\062\000\044\000\064\000\004\000\049\000\
    \043\000\067\000\005\000\043\000\005\000\073\000\077\000\005\000\
    \081\000\005\000\054\000\091\000\004\000\042\000\004\000\044\000\
    \042\000\055\000\044\000\004\000\005\000\016\000\049\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\054\000\005\000\094\000\005\000\255\255\255\255\005\000\
    \055\000\005\000\255\255\255\255\058\000\060\000\019\000\061\000\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\046\000\058\000\060\000\046\000\061\000\255\255\
    \001\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\108\000\111\000\119\000\122\000\032\000\
    \109\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\033\000\051\000\047\000\047\000\101\000\
    \033\000\047\000\255\255\255\255\058\000\255\255\255\255\255\255\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\051\000\047\000\109\000\101\000\047\000\
    \255\255\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\255\255\120\000\255\255\112\000\
    \033\000\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\034\000\255\255\255\255\255\255\
    \255\255\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\051\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\112\000\255\255\043\000\120\000\
    \255\255\255\255\255\255\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\123\000\124\000\255\255\
    \113\000\034\000\255\255\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\035\000\255\255\255\255\
    \046\000\255\255\035\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\109\000\255\255\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\113\000\255\255\123\000\
    \124\000\255\255\255\255\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\035\000\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\036\000\255\255\
    \255\255\255\255\255\255\036\000\255\255\255\255\255\255\255\255\
    \112\000\255\255\255\255\120\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\255\255\
    \255\255\255\255\255\255\036\000\255\255\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\037\000\
    \255\255\255\255\255\255\255\255\037\000\255\255\255\255\255\255\
    \255\255\113\000\255\255\123\000\124\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \255\255\255\255\255\255\255\255\037\000\255\255\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\255\255\255\255\255\255\255\255\038\000\
    \255\255\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\255\255\255\255\
    \255\255\255\255\039\000\255\255\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\050\000\084\000\
    \255\255\084\000\255\255\255\255\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\050\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \255\255\255\255\255\255\255\255\255\255\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\255\255\255\255\255\255\050\000\255\255\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\255\255\255\255\255\255\255\255\056\000\
    \255\255\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\057\000\104\000\255\255\255\255\104\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\104\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\255\255\104\000\255\255\
    \255\255\057\000\255\255\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\255\255\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \080\000\115\000\080\000\255\255\115\000\255\255\255\255\080\000\
    \255\255\255\255\085\000\255\255\085\000\255\255\255\255\255\255\
    \255\255\085\000\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\115\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \080\000\255\255\080\000\255\255\255\255\255\255\255\255\080\000\
    \255\255\255\255\085\000\255\255\085\000\255\255\255\255\255\255\
    \255\255\085\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\099\000\099\000\099\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\099\000\099\000\099\000\099\000\099\000\
    \099\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\115\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\100\000\100\000\100\000\100\000\100\000\100\000\
    \255\255\255\255\104\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\255\255\255\255\255\255\100\000\255\255\100\000\255\255\
    \255\255\255\255\255\255\100\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\100\000\100\000\100\000\100\000\100\000\100\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\100\000\255\255\100\000\255\255\
    \255\255\255\255\255\255\100\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\115\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token state lexbuf =
   __ocaml_lex_token_rec state lexbuf 0
and __ocaml_lex_token_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 106 "lexer.mll"
    ( (* TODO: Python-style indentation detection (i.e. more strict rules) *)
      let cur = state.offset in
      let last = Stack.top state.stack in
      if cur < last then (ignore (Stack.pop state.stack); P.DEDENT)
      else if cur > last then (Stack.push cur state.stack; P.INDENT)
      else read state lexbuf (* go ahead with parsing *) )
# 538 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec state lexbuf __ocaml_lex_state

and read state lexbuf =
   __ocaml_lex_read_rec state lexbuf 1
and __ocaml_lex_read_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 116 "lexer.mll"
    ( let lines = count_lines (L.lexeme lexbuf) in
      lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with
        pos_lnum = lexbuf.lex_curr_p.pos_lnum + lines
      ; pos_bol = lexbuf.lex_curr_p.pos_cnum
      };
      if state.ignore_newline <= 0 then (state.offset <- 0; offset state lexbuf; P.NL)
      else read state lexbuf )
# 556 "lexer.ml"

  | 1 ->
# 124 "lexer.mll"
    ( lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with
        pos_lnum = lexbuf.lex_curr_p.pos_lnum + 1
      ; pos_bol = lexbuf.lex_curr_p.pos_cnum
      };
      read state lexbuf )
# 565 "lexer.ml"

  | 2 ->
# 129 "lexer.mll"
           ( read state lexbuf )
# 570 "lexer.ml"

  | 3 ->
# 131 "lexer.mll"
                             ( P.ISNOT "is not" )
# 575 "lexer.ml"

  | 4 ->
# 132 "lexer.mll"
                             ( P.NOTIN "not in" )
# 580 "lexer.ml"

  | 5 ->
let
# 133 "lexer.mll"
             id
# 586 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 134 "lexer.mll"
    ( match id with
      | "True"     -> P.TRUE
      | "False"    -> P.FALSE
      | "if"       -> P.IF
      | "elif"     -> P.ELIF
      | "else"     -> P.ELSE
      | "def"      -> P.DEF
      | "for"      -> P.FOR
      | "break"    -> P.BREAK
      | "continue" -> P.CONTINUE
      | "print"    -> P.PRINT
      | "return"   -> P.RETURN
      | "yield"    -> P.YIELD
      | "match"    -> P.MATCH
      | "case"     -> P.CASE
      | "as"       -> P.AS
      | "pass"     -> P.PASS
      | "while"    -> P.WHILE
      | "type"     -> P.TYPE
      | "lambda"   -> P.LAMBDA
      | "assert"   -> P.ASSERT
      | "global"   -> P.GLOBAL
      | "import"   -> P.IMPORT
      | "from"     -> P.FROM
      | "class"    -> P.CLASS
      | "typeof"   -> P.TYPEOF
      | "__ptr__"  -> P.PTR
      | "extend"   -> P.EXTEND
      | "cimport"  -> P.EXTERN "c"
      | "pyimport" -> P.EXTERN "py"
      | "pydef"    -> P.PYDEF
      | "del"      -> P.DEL
      | "None"     -> P.NONE
      | "try"      -> P.TRY
      | "except"   -> P.EXCEPT
      | "finally"  -> P.FINALLY
      | "prefetch" -> P.PREFETCH
      | "with"     -> P.WITH
      | "raise"    -> P.THROW
      | "is"       -> P.IS "is"
      | "in"       -> P.IN "in"
      | "or"       -> P.OR "||"
      | "and"      -> P.AND "&&"
      | "not"      -> P.NOT "!"
      | _          -> P.ID id )
# 634 "lexer.ml"

  | 6 ->
# 180 "lexer.mll"
                          ( single_string state (L.lexeme lexbuf) lexbuf )
# 639 "lexer.ml"

  | 7 ->
# 181 "lexer.mll"
                          ( double_string state (L.lexeme lexbuf) lexbuf )
# 644 "lexer.ml"

  | 8 ->
# 182 "lexer.mll"
                          ( single_docstr state (L.lexeme lexbuf) lexbuf )
# 649 "lexer.ml"

  | 9 ->
# 183 "lexer.mll"
                          ( double_docstr state (L.lexeme lexbuf) lexbuf )
# 654 "lexer.ml"

  | 10 ->
# 186 "lexer.mll"
        ( ignore_nl state; P.LP )
# 659 "lexer.ml"

  | 11 ->
# 187 "lexer.mll"
        ( aware_nl state; P.RP )
# 664 "lexer.ml"

  | 12 ->
# 188 "lexer.mll"
        ( ignore_nl state; P.LS )
# 669 "lexer.ml"

  | 13 ->
# 189 "lexer.mll"
        ( aware_nl state; P.RS )
# 674 "lexer.ml"

  | 14 ->
# 190 "lexer.mll"
        ( ignore_nl state; P.LB )
# 679 "lexer.ml"

  | 15 ->
# 191 "lexer.mll"
        ( aware_nl state; P.RB )
# 684 "lexer.ml"

  | 16 ->
let
# 193 "lexer.mll"
             op
# 690 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 193 "lexer.mll"
                ( P.OREQ op )
# 694 "lexer.ml"

  | 17 ->
let
# 194 "lexer.mll"
             op
# 700 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 194 "lexer.mll"
                ( P.ANDEQ op )
# 704 "lexer.ml"

  | 18 ->
let
# 195 "lexer.mll"
             op
# 710 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 195 "lexer.mll"
                ( P.XOREQ op )
# 714 "lexer.ml"

  | 19 ->
let
# 196 "lexer.mll"
             op
# 720 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 196 "lexer.mll"
                ( P.LSHEQ op )
# 724 "lexer.ml"

  | 20 ->
let
# 197 "lexer.mll"
             op
# 730 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 197 "lexer.mll"
                ( P.RSHEQ op )
# 734 "lexer.ml"

  | 21 ->
let
# 198 "lexer.mll"
             op
# 740 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 198 "lexer.mll"
                ( P.B_LSH op )
# 744 "lexer.ml"

  | 22 ->
let
# 199 "lexer.mll"
             op
# 750 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 199 "lexer.mll"
                ( P.B_RSH op )
# 754 "lexer.ml"

  | 23 ->
let
# 200 "lexer.mll"
             op
# 760 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 200 "lexer.mll"
                ( P.B_AND (char_to_string op) )
# 764 "lexer.ml"

  | 24 ->
let
# 201 "lexer.mll"
             op
# 770 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 201 "lexer.mll"
                ( P.B_XOR (char_to_string op) )
# 774 "lexer.ml"

  | 25 ->
let
# 202 "lexer.mll"
             op
# 780 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 202 "lexer.mll"
                ( P.B_NOT (char_to_string op) )
# 784 "lexer.ml"

  | 26 ->
let
# 203 "lexer.mll"
             op
# 790 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 203 "lexer.mll"
                ( P.PPIPE op )
# 794 "lexer.ml"

  | 27 ->
let
# 204 "lexer.mll"
             op
# 800 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 204 "lexer.mll"
                ( P.SPIPE op )
# 804 "lexer.ml"

  | 28 ->
let
# 205 "lexer.mll"
             op
# 810 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 205 "lexer.mll"
                ( P.PIPE  op )
# 814 "lexer.ml"

  | 29 ->
let
# 206 "lexer.mll"
             op
# 820 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 206 "lexer.mll"
                ( P.B_OR  (char_to_string op) )
# 824 "lexer.ml"

  | 30 ->
let
# 207 "lexer.mll"
             op
# 830 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 207 "lexer.mll"
                ( P.EQ        (char_to_string op) )
# 834 "lexer.ml"

  | 31 ->
let
# 208 "lexer.mll"
             op
# 840 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 208 "lexer.mll"
                ( P.ELLIPSIS  op )
# 844 "lexer.ml"

  | 32 ->
let
# 209 "lexer.mll"
             op
# 850 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 209 "lexer.mll"
                ( P.AT        (char_to_string op) )
# 854 "lexer.ml"

  | 33 ->
# 210 "lexer.mll"
          ( P.OF )
# 859 "lexer.ml"

  | 34 ->
# 211 "lexer.mll"
          ( P.COLON )
# 864 "lexer.ml"

  | 35 ->
# 212 "lexer.mll"
          ( P.SEMICOLON )
# 869 "lexer.ml"

  | 36 ->
# 213 "lexer.mll"
          ( P.COMMA )
# 874 "lexer.ml"

  | 37 ->
# 214 "lexer.mll"
          ( P.DOT )
# 879 "lexer.ml"

  | 38 ->
let
# 215 "lexer.mll"
             op
# 885 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 215 "lexer.mll"
                ( P.PLUSEQ op )
# 889 "lexer.ml"

  | 39 ->
let
# 216 "lexer.mll"
             op
# 895 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 216 "lexer.mll"
                ( P.MINEQ op )
# 899 "lexer.ml"

  | 40 ->
let
# 217 "lexer.mll"
             op
# 905 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 217 "lexer.mll"
                ( P.POWEQ op )
# 909 "lexer.ml"

  | 41 ->
let
# 218 "lexer.mll"
             op
# 915 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 218 "lexer.mll"
                ( P.MULEQ op )
# 919 "lexer.ml"

  | 42 ->
let
# 219 "lexer.mll"
             op
# 925 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 219 "lexer.mll"
                ( P.FDIVEQ op )
# 929 "lexer.ml"

  | 43 ->
let
# 220 "lexer.mll"
             op
# 935 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 220 "lexer.mll"
                ( P.DIVEQ op )
# 939 "lexer.ml"

  | 44 ->
let
# 221 "lexer.mll"
             op
# 945 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 221 "lexer.mll"
                ( P.MODEQ op )
# 949 "lexer.ml"

  | 45 ->
let
# 222 "lexer.mll"
             op
# 955 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 222 "lexer.mll"
                ( P.ADD (char_to_string op) )
# 959 "lexer.ml"

  | 46 ->
let
# 223 "lexer.mll"
             op
# 965 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 223 "lexer.mll"
                ( P.SUB (char_to_string op) )
# 969 "lexer.ml"

  | 47 ->
let
# 224 "lexer.mll"
             op
# 975 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 224 "lexer.mll"
                ( P.POW op )
# 979 "lexer.ml"

  | 48 ->
let
# 225 "lexer.mll"
             op
# 985 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 225 "lexer.mll"
                ( P.MUL (char_to_string op) )
# 989 "lexer.ml"

  | 49 ->
let
# 226 "lexer.mll"
             op
# 995 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 226 "lexer.mll"
                ( P.EEQ op )
# 999 "lexer.ml"

  | 50 ->
let
# 227 "lexer.mll"
             op
# 1005 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 227 "lexer.mll"
                ( P.NEQ op )
# 1009 "lexer.ml"

  | 51 ->
let
# 228 "lexer.mll"
             op
# 1015 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 228 "lexer.mll"
                ( P.GEQ op )
# 1019 "lexer.ml"

  | 52 ->
let
# 229 "lexer.mll"
             op
# 1025 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 229 "lexer.mll"
                ( P.GREAT (char_to_string op) )
# 1029 "lexer.ml"

  | 53 ->
let
# 230 "lexer.mll"
             op
# 1035 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 230 "lexer.mll"
                ( P.LEQ op )
# 1039 "lexer.ml"

  | 54 ->
let
# 231 "lexer.mll"
             op
# 1045 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 231 "lexer.mll"
                ( P.LESS (char_to_string op) )
# 1049 "lexer.ml"

  | 55 ->
let
# 232 "lexer.mll"
             op
# 1055 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 232 "lexer.mll"
                ( P.FDIV op )
# 1059 "lexer.ml"

  | 56 ->
let
# 233 "lexer.mll"
             op
# 1065 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 233 "lexer.mll"
                ( P.DIV (char_to_string op) )
# 1069 "lexer.ml"

  | 57 ->
let
# 234 "lexer.mll"
             op
# 1075 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 234 "lexer.mll"
                ( P.MOD (char_to_string op) )
# 1079 "lexer.ml"

  | 58 ->
let
# 236 "lexer.mll"
                      i
# 1085 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 236 "lexer.mll"
                        ( P.INT_S (i, "") )
# 1089 "lexer.ml"

  | 59 ->
let
# 237 "lexer.mll"
             f
# 1095 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 237 "lexer.mll"
               ( P.FLOAT_S (float_of_string f, "") )
# 1099 "lexer.ml"

  | 60 ->
let
# 238 "lexer.mll"
                       i
# 1105 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1)
and
# 238 "lexer.mll"
                                        k
# 1110 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_curr_pos + -1) in
# 238 "lexer.mll"
                                           ( P.INT_S (i, char_to_string k) )
# 1114 "lexer.ml"

  | 61 ->
let
# 239 "lexer.mll"
              f
# 1120 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1)
and
# 239 "lexer.mll"
                               k
# 1125 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_curr_pos + -1) in
# 239 "lexer.mll"
                                  ( P.FLOAT_S (float_of_string f, char_to_string k) )
# 1129 "lexer.ml"

  | 62 ->
# 240 "lexer.mll"
        ( P.EOF )
# 1134 "lexer.ml"

  | 63 ->
# 241 "lexer.mll"
      ( raise (Ast.SyntaxError (Format.sprintf "Unknown token '%s'" (L.lexeme lexbuf), lexbuf.lex_start_p)) )
# 1139 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec state lexbuf __ocaml_lex_state

and offset state lexbuf =
   __ocaml_lex_offset_rec state lexbuf 101
and __ocaml_lex_offset_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 245 "lexer.mll"
         ( )
# 1151 "lexer.ml"

  | 1 ->
# 246 "lexer.mll"
         ( state.offset <- state.offset + 1; offset state lexbuf )
# 1156 "lexer.ml"

  | 2 ->
# 247 "lexer.mll"
         ( state.offset <- state.offset + 8; offset state lexbuf )
# 1161 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_offset_rec state lexbuf __ocaml_lex_state

and single_string state prefix lexbuf =
   __ocaml_lex_single_string_rec state prefix lexbuf 104
and __ocaml_lex_single_string_rec state prefix lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 251 "lexer.mll"
                                            s
# 1174 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 251 "lexer.mll"
                                                    ( seq_string prefix s lexbuf.lex_start_p )
# 1178 "lexer.ml"

  | 1 ->
# 252 "lexer.mll"
                                                        ( raise (Ast.SyntaxError ("string not closed", lexbuf.lex_start_p)) )
# 1183 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_single_string_rec state prefix lexbuf __ocaml_lex_state

and single_docstr state prefix lexbuf =
   __ocaml_lex_single_docstr_rec state prefix lexbuf 109
and __ocaml_lex_single_docstr_rec state prefix lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 254 "lexer.mll"
                             s
# 1196 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -3) in
# 255 "lexer.mll"
    ( lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_lnum = lexbuf.lex_curr_p.pos_lnum + (count_lines s) };
      seq_string prefix s lexbuf.lex_start_p )
# 1201 "lexer.ml"

  | 1 ->
# 257 "lexer.mll"
                             ( raise (Ast.SyntaxError ("string not closed", lexbuf.lex_start_p)) )
# 1206 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_single_docstr_rec state prefix lexbuf __ocaml_lex_state

and double_string state prefix lexbuf =
   __ocaml_lex_double_string_rec state prefix lexbuf 115
and __ocaml_lex_double_string_rec state prefix lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 259 "lexer.mll"
                                            s
# 1219 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 259 "lexer.mll"
                                                   ( seq_string prefix s lexbuf.lex_start_p )
# 1223 "lexer.ml"

  | 1 ->
# 260 "lexer.mll"
                                                        ( raise (Ast.SyntaxError ("string not closed", lexbuf.lex_start_p)) )
# 1228 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_double_string_rec state prefix lexbuf __ocaml_lex_state

and double_docstr state prefix lexbuf =
   __ocaml_lex_double_docstr_rec state prefix lexbuf 120
and __ocaml_lex_double_docstr_rec state prefix lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 262 "lexer.mll"
                             s
# 1241 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -3) in
# 263 "lexer.mll"
    ( lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_lnum = lexbuf.lex_curr_p.pos_lnum + (count_lines s) };
      seq_string prefix s lexbuf.lex_start_p )
# 1246 "lexer.ml"

  | 1 ->
# 265 "lexer.mll"
                             ( raise (Ast.SyntaxError ("string not closed", lexbuf.lex_start_p)) )
# 1251 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_double_docstr_rec state prefix lexbuf __ocaml_lex_state

;;

