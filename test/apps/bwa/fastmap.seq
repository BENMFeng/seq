from sys import argv, stderr, exit
from time import timing
from bio.fmindex import FMDIndex

min_len    = 17
min_iwidth = 20

def open_index_file(basename: str, mode: str):
    import gzip
    return gzip.open(f'{basename}.fastmap.idx', mode)

def index_load(basename: str):
    from pickle import load
    with open_index_file(basename, 'rb') as jar:
        return load[FMDIndex](jar)

def smems(rec: FASTQRecord, fmi: FMDIndex, out: File):
    out.write('SQ\t')
    out.write(rec.name)
    out.write('\t')
    out.write(str(len(rec.seq)))
    out.write('\n')
    start = 0
    while True:
        while start < len(rec.seq) and rec.seq[start].N():
            start += 1
        if start == len(rec.seq):
            break
        start, mems = fmi.smems(rec.seq, x=start)
        yield rec, mems
    out.write('//\n')

def fastmap(t, fmi: FMDIndex, out: File):
    rec, mems = t
    for intv in mems:
        offset = intv.offset
        match_size = intv.match_size
        if match_size < min_len:
            continue

        out.write('EM\t')
        out.write(str(offset))
        out.write('\t')
        out.write(str(offset + match_size))
        out.write('\t')
        out.write(str(len(intv)))
        if len(intv) <= min_iwidth:
            for rid, name, pos, is_rev in fmi.biresults(intv):
                out.write('\t')
                out.write(name)
                out.write(':-' if is_rev else ':+')
                out.write(str(pos + 1))
        out.write('\n')

def main_index():
    from pickle import dump
    stderr.write('building FM-index...\n')
    fmi = FMDIndex(argv[2])
    stderr.write('writing to disk...\n')
    with open_index_file(argv[2], 'wb0') as jar:
        dump(fmi, jar)

def main_search():
    stderr.write('loading index...\n')
    fmi = index_load(argv[2])
    stderr.write('running alignment pipeline...\n')
    with open(argv[4], 'w') as out, timing('fastmap'):
        FASTQ(argv[3]) |> iter |> smems(fmi, out) |> fastmap(fmi, out)

mode = argv[1]
match mode:
    case 'index':
        main_index()
    case 'search':
        main_search()
    case _:
        stderr.write("error: unknown mode: valid modes are 'index' and 'search'\n")
        exit(1)
