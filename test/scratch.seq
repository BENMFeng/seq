# 786

# class foo:
# 	def __getitem__(self: foo, x: tuple[int, int]):
# 		return x[0] + x[1]

# a = foo()

# print a[(5, 6)]
# print a[5, 7]

# x = 0
# y = 0
# @atomic
# def f():
#     global x, y
#     x += 5  
#     y = y + 5
#     x = atomic.min(x, 5)
#     print 'in', x, y

# print x
# f()
# print x, y

# s, m, M = 0, 99999, 0
# @atomic
# def f(i):
# 	global s, m, M
# 	s += i
# 	m = min(m, i)
# 	M = max(M, i)

# cdef sleep(int)
# def process(i):
# 	print i
# 	f(i)

#range(20) |> iter ||> process
#print s, m, M

def hai(p):
	cnt = 0
	for i in p:
		cnt += len(i)
	yield cnt

s = 0
def sum(i):
	global s
	s += i

(blocks(fastq('../test/data/multiple/seqs.fastq'), 2)
 ||> hai
  |> sum)
print s
