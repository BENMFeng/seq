from algorithms.qsort import qsort_inplace
from algorithms.heapsort import heap_sort_inplace
from algorithms.pdqsort import pdq_sort_inplace
from algorithms.timsort import tim_sort_inplace
from time import time

cimport srand(u32)
cimport rand() -> i32

srand(u32(1))

def key(n: int):
    return -n

def gen_list(n: int):
    v = list[int](n)
    for _ in range(n):
        v.append(int(rand()))
    return v

def copy_to(a, b):
    b.clear()
    for i in a:
        b.append(i)

@test
def ensure_sorted(v):
    for i in range(len(v) - 1):
        assert key(v[i]) <= key(v[i + 1])

v0 = gen_list(100)
v1 = list[int](len(v0))

def test_sort(name, sort):
    copy_to(v0, v1)
    t0 = time()
    sort(v1, key)
    t1 = time()
    print name, (t1 - t0)/1000
    ensure_sorted(v1)

test_sort('qsort   :', qsort_inplace[int,int])
test_sort('heapsort:', heap_sort_inplace[int,int])
test_sort('pdqsort :', pdq_sort_inplace[int,int])
test_sort('timsort :', tim_sort_inplace[int,int])

# test standard sort routines
@test
def test_standard_sort():
    copy_to(v0, v1)
    v2 = sorted(v1)
    for i in range(len(v2) - 1):
        assert v2[i] <= v2[i + 1]

    v2 = sorted(v1, key=key)
    for i in range(len(v2) - 1):
        assert key(v2[i]) <= key(v2[i + 1])

    v2.sort()
    for i in range(len(v2) - 1):
        assert v2[i] <= v2[i + 1]

    v2.sort(key=key)
    for i in range(len(v2) - 1):
        assert key(v2[i]) <= key(v2[i + 1])

test_standard_sort()
