# this is a comment

fun f s: Seq -> Seq[]
  s |> split 32 32 |> collect
end

let farray = (Seq -> Seq[])[1]
farray[0] = f

fun ident s: Seq -> Seq
  s
end

source args[0] as input:
  input |> substr 0+1 5 |> {
    _ |> print
    _ |> revcomp |> print
  }

  let v = farray[0](input)
  v |> foreach as r |> (|> count, r, r |> split 1 1) as t |> {
    t.1 |> print
    _ |> .2 |> print
    t.3 |> print
  }
  input |> print

  let arr = {Int, Seq}[10]
  arr |> foreach

  input |> ident() |> print
  input |> split 64 64 |> {
    let v1 = _ |> print
    v1 |> split 32 32 |> {
      let v2 = _ |> print
      _ |> split 16 16 |> {
        _ |> print
        let v3 = _ |> copy |> print
        let v4 = v3 |> print
        v3 |> print
      }
      v2 |> print
    }
    _ |> print
  }
  ident(input) |> print

  (v[1], ((v)[2]), (v[1], 4.2)).3 |> .1 |> print
end

fun hello -> Str
  return "hello world"
end

fun hello2
  "hello again" |> print
end

hello() |> print
hello2()
42 + 2.2 |> print
-13 |> print
var x = 4.2
x |> print
x = .42
if x < 1 then -x else +x |> print
var b = (true, !true)
b.1 |> print
b.2 = !!false
b.2 |> print

fun fib n: Int -> Int
  fun rec x: {(Int -> Int), Int} -> Int
    x.1(x.2 - 1) + x.1(x.2 - 2)
  end

  if n <= 1 then n else rec(fib, n)
end

10 |> fib() |> print
fib(10) |> print

range (if b.1 then 1 else 2) 5+5 as i:
  if i == 3:
    continue
  elif i >= 7:
    break
  end

  range i i+1: _ |> print end
end
