# this is a comment

fun f s: Seq -> Seq[]
  s |> split 32 32 |> collect
end

let farray = (Seq -> Seq[])[1]
farray[0] = f

fun ident s: Seq -> Seq
  s |> .
end

source args[0]:
  $ substr 0+1 5 |> {
    $ print
    $ revcomp |> print
  }

  let input = $ .
  let v = farray[0](input)
  v |> foreach |> (count, _) |> {
    $ .1 |> print
    $ .2 |> print
  }
  $ print

  let arr = {Int, Seq}[10]
  arr |> foreach

  $ ident() |> print
  $ split 64 64 |> {
    let v1 = $ print
    v1 |> split 32 32 |> {
      let v2 = $ print
      $ split 16 16 |> {
        $ print
        let v3 = $ copy |> print
        let v4 = v3 |> print
        v3 |> print
      }
      v2 |> print
    }
    $ print
  }
  ident(input) |> print

  (v[1], ((v)[2]), (v[1], 4.2)).3 |> .1 |> print
end

fun hello -> Str
  return "hello world"
end

hello() |> print
42 + 2.2 |> print
-13 |> print
var x = 4.2
x |> print
x = .42
if x < 1 then -x else +x |> print
var b = (true, !true)
b.1 |> print
b.2 = !!false
b.2 |> print

fun fib n: Int -> Int
  fun rec x: {(Int -> Int), Int} -> Int
    x.1(x.2 - 1) + x.1(x.2 - 2) |> .
  end

  if n <= 1 then n else rec(fib, n) |> .
end

10 |> fib() |> print
fib(10) |> print

$ range (if b.1 then 1 else 2) 5+5 |> print
