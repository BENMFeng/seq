# this is a comment

fun f(s: Seq) -> Seq[]:
  s |> split 32 32 |> collect

let farray = (Seq -> Seq[])[1]
farray[0] = f

fun ident(s: Seq) -> Seq {
  s
}

source args[0] as input {
  input |> substr 0+1 5 {
    _ |> print
    _ |> revcomp |> print
  }

  let v = farray[0](input)
  v |> foreach as r |> (|> count, r, r |> split 1 1) as t {
    t.1 |> print
    _ |> .2 |> print
    t.3 |> print
    continue
  }
  input |> print

  let arr = {Int, Seq}[10]
  arr |> foreach

  input |> ident |> print
  input |> split 64 64 {
    let v1 = _ |> print
    v1 |> split 32 32 {
      let v2 = _ |> print
      _ |> split 16 16 {
        _ |> print
        let v3 = _ |> copy |> print
        let v4 = v3 |> print
        v3 |> print
      }
      v2 |> print
    }
    _ |> print
  }
  ident(input) |> print

  (v[1], ((v)[2]), (v[1], 4.2)).3 |> .1 |> print
}

fun hello -> Str:
  return "hello world"


fun hello2:
  "hello again" |> print

hello() |> print
hello2()
42 + 2.2 |> print
-13 |> print
var x = 4.2
x |> print
x = .42
if x < 1 then -x else +x |> print
var b = (true, !true)
b.1 |> print
b.2 = !!false
b.2 |> print

fun fib(n: Int) -> Int {
  type F = {f: (Int -> Int), x: Int}

  fun apply(f: (Int -> Int), x: Int) -> Int: f(x)

  fun rec(pair: F) -> Int:
    apply(pair.f, pair.x - 1) + apply(pair.f, pair.x - 2)

  if n <= 1 then n else rec((fib, n))
}

10 |> fib |> print
fib(10) |> print

range (if b.1 then 1 else 2) 5+5 as i {
  if i == 3:
    continue
  elif i >= 7:
    break
  else:
    range i i+1: _ |> print
}

type Person = {name: Str, age: Int}

fun whois(person: Person) {
  person.name |> print
  person.age  |> print
}

fun birthday(person: Person) -> Person:
  (person.name, person.age + 1)


var joe = (name: "Joe", age: 42)
whois(joe)
joe = birthday(joe)
whois(joe)

let ints = Int[100]
range ints.len as i:
  ints[i] = i+1
var s = 0
ints |> foreach as n: s = s + n
s |> print

class Pair {a: Int, b: Int} {
  fun sum(self: Pair, c: Int) -> Int:
    self.a + self.b + c
}

var p = <Pair>
p.a = 42
p.b = 19

p.sum(100) |> print

