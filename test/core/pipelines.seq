def ground_truth_kmers[K](s: seq, step: int = 1):
    return {revcomp_with_pos(t) for t in s.kmers_with_pos[K](step)}

# test kmers |> revcomp optimization
@test
def test[K](s: seq):
    fail = False
    for step in range(1, K.len() + 2):
        result1 = set[tuple[int,K]]()
        s |> kmers_with_pos[K](step) |> revcomp_with_pos |> result1.add
        if result1 != ground_truth_kmers[K](s, step):
            fail = True

        result1 = set[tuple[int,K]]()
        ~s |> kmers_with_pos[K](step) |> revcomp_with_pos(...) |> result1.add
        if result1 != ground_truth_kmers[K](~s, step):
            fail = True

        result2 = set[K]()
        s |> kmers[K](step) |> revcomp() |> result2.add
        if result2 != {t[1] for t in ground_truth_kmers[K](s, step)}:
            fail = True

        result2 = set[K]()
        ~s |> kmers[K](step) |> revcomp |> result2.add
        if result2 != {t[1] for t in ground_truth_kmers[K](~s, step)}:
            fail = True
    assert not fail

def test_all[K](s: list[seq]):
    for a in s:
        test[K](a)

v = [   s'C',
        s'GA',
        s'CTC',
        s'TATG',
        s'GTAGC',
        s'TGCAGT',
        s'TACTAGG',
        s'GTTAGAAA',
        s'TGGATCATA',
        s'TTGGCCACGG',
        s'CCTCTGCGGGA',
        s'ATGATAGGAAAG',
        s'CTCTTTGGGGTTA',
        s'GCAGTTTTTCGCTT',
        s'GCTTTGTGAAATGGT',
        s'CATGGAGCGGCCGTGT',
        s'TTAACGGGCCCTTGCCG',
        s'CCTTGTTTGCTCGCGAGA',
        s'GGCCAAGCTTATCTGTGTT',
        s'CCGCTTGCCTTACATTGGCC',
        s'GAGTGTGTAATAAATAATCGT',
        s'GCGACAATATACTGCGTGGTCA',
        s'TTCATATATGACCCCGTACAGGG',
        s'GCTTTGATGAATTAAGGATAGCTT',
        s'GTTATATCCCCCCGCGCTTTAACCG',
        s'AAACCTGACCGTTAAGACTTTAAGAC',
        s'GACCTTGCCCTTGAAGGAACATCTGGG',
        s'CGTCCATGTTTGCATACGACGTTGTGTT',
        s'TAAACGAGACCGTCTCTGCTCATAGCCGT',
        s'CAGTACGTTAGTGTGACCGCAAAAGGTGGT',
        s'GAGGATATATAACAACCTCAGGAGTCTGTTC',
        s'AGGATAAGGTTCACAGAACTATTGTTATGATT',
        s'CACAGAGAGCGGGCTCTATTGTTGTCGTGGGGA',
        s'TACTCGTGGCGAGGAGGAGTTTTCTTAAATCGGA',
        s'GGGCTTTTCGCCTGGTTATAACTTGGTATGGAGCT',
        s'AGGACATTTAAGATTTAAAAGCACCCTCAGCAACAT',
        s'CATGAAGGATCAGTGACTTCCTTACCTGTGCTGCCGG',
        s'CGTATTGGTTCGTGACTTCCACGGGGTGTCACGGCGGA',
        s'GCGAAACGCATCATCCGGGACAATCAACTCATCAGGCGG',
        s'CACAACCGGGGCTCGATCCCAAGCACCATTACACGATGAC',
        s'TCACGAAGACACAACGGTCCACACCTACTTTCCCCCCAACG',
        s'ATCTACTGAAGCGCTACAGTCATCTACTGCCACTGAACGGAC',
        s'GTGTCCATGCTCCGTTTAAAATAGAGAAGCCAAAGGAGTACCA',
        s'AGTAGGCTGCAAATCGATCGCCACGCAAATGCTAAAAGTTGTGC',
        s'GTGATTAGAGGAGGTAACAGCCCAAACGCTCTCTTCCTCGCTATA',
        s'TGTTGTGTCCGATAAGATTGCGTCCTGGTGGAGTGGTTGCGGGTTA',
        s'GCTTAACTAACCGAGCCGGTGCGGAGATTCCGTGTGTGGCTAGTTAT',
        s'CTCGCGTGCGGAGACCTCTCCCCCAGGAATAACCGATTGACCGTGGAT',
        s'ACATTCGCAGATAGGGCAACGGTTTAGTGCGCACCATGCTAAGCTAAGG',
        s'TTTGCACCGGTTAGCTGTCGTTAATCCGACGGGCCTTATCTCGGTACATT',
        s'TACTCGGACATCCATCCAAAGTTGGAGATAGCTTTGTATGAAAATGATGTA',
        s'CAGACTTTCTTATGTATCCCTCTCTTGCACAGATTGTTCATGTCATTTGCTG',
        s'CAGCGGGCCCTCTGCTTATAGCCGGGTAGTCCGTATTACGACCGAGGTCCCGT',
        s'GGGTAACAACAAAGGATGAGGTTAATTCGGAGGGAAAACGTCGCGAACGATAGT',
        s'GCTGAGCCCAGGAGGGGAGCTCTCGGGAGTCGCAATGAGATCCGTGGGCCCCCAA',
        s'CGATTAGCGACCAAATGGTATACATTACGTATCGGGTGTCGAACCCCCTACCACTT',
        s'CCGAACCATTCCTAGACTTGCATCGAAGACGCCGGAGACATAGAGTATACTATTTCG',
        s'CAATAAAGGAAGATCGACCCAGTTGCTAGGCCCGGCGCTTCCCTGGAGCCTTGGTGAA',
        s'AAATGGAGCCAGACAGCGTGACGCCCTGCGCGCGACAAGCTACGTCGAAGGCACATTCT',
        s'CAATCTATGATTTTTGTCGGGTTGCGAGCCTAAGTTAACTTGATCTCCGTACGTGCCACA',
        s'CAACTACTGAGCTCCGTTAGGTCCCTTTCATTTCGCTGCGTATGTGTAACCAACCTCGTAC',
        s'TGGAGAGTCCCTTCCCACGCGCAACCTGCGGTTAGCATCGCAGATCTTTCTACAGCCCTATG',
        s'GATCCTAACCTTCTACACTCATCGAACACGAACATGATGCTGTGCGGTGTCATTTGGATTGTG',
        s'GTCATTACATAACCATGAGCGCCCCCGTTCAAACTTCAGCGTTTTTGTAAAGGGCATCATTGCC',
        s'GGGGCAAGCAGACGGATTACACACTCTTTTAACCTCGTTTCTACACTCCTAATCAGTCCGTACAG',
        s'CATGCGGTCCCCGCAGCCCAGATCCAATCCGGCAGCAGAAGGCATTATCTGCTGGCGTTGCCTTAC',
        s'TAAGTCGACCGAAGGATGCAAAAGGAATCCCCGACAGTATCTGTCACATCCCTGCAGCCGTCTATTT',
        s'GATGATCACCTAATGACCGTCGCGGGACCAATGGTATCCGAGTGATGGAATCCTACGATTGATCAACC',
        s'AAAGAATTTCCCAAAGTCCCACTTGTTAATACCGTGACGCAGCCGGACTAACACAGTCCCAGGTATTGA',
        s'ATCGTTTATGTAGATCACGGCATATCTCTAACTAACGGCATAGTACCGGCATGCAGTTGAGCAGACTGGG',
        s'AGACTCTGGCATATCTGTCCATACCCATAAGCCGGCCCACGCAGGATCAGGAGTGAATTGCCGCGCAGATC',
        s'CTGGAGCCATGAATATAGCATCCCAACCCAACGTTTGAGTGTCTCCAGCGGAATAAAACGCCTAATTTTTGG',
        s'TTTAAGCCACCTGTCATTAGATATATCGCGCCCGCCACTTACATCTACCTGTTCATAGAGACTATGCGTACTA',
        s'CTCACATCTCTATCGATTTAGGTAGAGGCTAGCGGTCATAAATCTAAGTCTAGTCAGCCCGCAACGCCACATCG',
        s'TACAGCCCGTGCAGTGTACAAGCGCACACGGGAGCATCCTGGGTTATGAGCCCCCCGAGGCCAGTGCAAGACCAG',
        s'GTCTCTTGGCAGTGTCCAGACAGACGCGGTGCCTGGGAAGACGTTAATTGGTGCTACTTCAACCACGCCTTGCTTG',
        s'GGGGCTATTTGGGATTAGAGAAGTGCCTACACTCGGTGGCCCAGCTGGGCTGTCCATTGCAGACACGCGTCGCGTGT',
        s'CAGGAGTATGGACCCAACATGACTTTGGCGGCAGCAGTATCCATGCCCGTTGCCTGTAGTCTTTAGGAGGATCGTAAT',
        s'CGCGGTGTACCGTTTCAGATTCTATCTACTACGACTAGGTGCTTAGCAATTACCAATCGTACGCGACCGATATAAAACT',
        s'CGCCAGGGGTCATCCCGGGGATTCCATCAGTTAAACGTCTTGAAACCAGTTAGAGAACAGAGACCAGTTAGGCAACTCGG',
        s'TTCCCGCTTCTCTGCCCGATACCCAATTCTTGATACGTAGTCTCCCTACCGCAGGATATGACGCACGCCCCTATAACGAAC',
        s'AGCTACCACATACACAGGGAGACCGCGCGGTTTTGACCGTATGGTCAACCCATCTTCTAAGTTGCAGCGTCGAAGAGTCCCG',
        s'GGTAACGACGATGGGACAAAATGATAAATCACGTCGTACTTAGTTCACTTAGGTAAGGGTTTGGTGTGGCGTGAATAACTTGA',
        s'GTGCTCGAGGCAGCGACACGCGTTCATCAGATTGTGACAATGACCATATATTAGACGTCAGTTAAAGGAAGTTCACCGGTAACG',
        s'GTAAACTTCAGTTGCTAAAGTTAAATTCATCTGATGCTTACGTGGAAACTTGAGAAGGAGCCATTGAGACTTCGCTCCAGATAAC',
        s'CCGAATTCCGTTATCAACGTAAGCTAAGCGGCTTGGGCGTAGAGTTTCTAAGGGTGAACGTACACTTCTTTCGCTGCACCGATGCC',
        s'CCACTCCCTGATTAGCTTTGTTCTGTATTGCATGAATAAGGTTCAATTTGCGACCTTATGAAACAGGTAATCTGGGAAGCCTTAGTG',
        s'CATAAGTCCCAGATTCTCGCCGGATGGCAATTCTAGCGTCACGTTAGACAACGGTGAGAACGGAGGAGATTCAGAGCACAGGCTTGAA',
        s'AAGCTTTAGAGATCCAGGACCTTATGTCGGTACAAGAAACTAGAACTCGCTAAGTAGATCAGGTCCTGGCAGCATCCATGCCCCATTTG',
        s'TACTTATTACCACCTTTGTTGGGCTTTGACAGATATTACAGTGGTCTGATTCGTGGGGGCTTACTGCAACGCATACTATGGCGAAGGTCC',
        s'GGCAAGCTGAGGAGGGACGGTCACCCACTGAAAACATTTGAAACCGGGCGGGCTTGAACAGGGCCAATCAAGACCCCTCTCATAGGATGGC',
        s'CCATGCGAATTTTCCGGTCAAGGAACACCTGATTCAGAGCGGGCTACCAGAACAGGCAAGCAGCCCTACATCGCTTCTTAAAAAATATTAAG',
        s'TGGCTATGCATCTCACTTGGCTTTTCACGGGGGTGCCCAGAGGACATAGATACAGCACGGTCCCATGCTAGGATCCAACGAGTGCATTAGAAT',
        s'CTAAGCCTATGCCAGTCTTCCTTGTTTACTCGGTGGTCCTGTACGTCCATATCATTTACGTCCATGAAGCCAACCCCCGAGCAAATACCCGGTA',
        s'GATAAATTCCTCCCATATCAAAGTTCTTGCCCACGCGGGCTACCCAGCTAACGTAACTGTTTCGACACTAGAGATAACAACGCGTTGCGACTCTC',
        s'GGCGGCATGTAGGACGGCGTCAGTGGGTATACTATCGCTCTTAGGTCTCCAGTCAAAAAAATGTGGCATCCGGTAGTTGCTGGCAGATCTGCACTT',
        s'ATTTATTTGCCCCGCAGTGTCCTTTTTCTAGTCATAAATCCTCATACCGCGGGCCCTTCATCCGGTTTGATTCGAAGCATTGGTATGTTAGATACGT',
        s'ACACGCCATGAGGTAAATAACTCTGGAATTGTCAGTCAAGCACCGTGTGTTCAGTGTAAGTTTCTCGGACCAAGGCATATCGACGCTATGCGGTTTAT',
        s'AACCTCAGTCGGGCAGGCCATGGCGCGAAATGACTCGAGTAGACTCCATCTCTAAGGAGCGGAGCTGTTGCAACTAGGGTGACACACAGCTCGCCATGA',
        s'TATTGCAAGGCCCTACGCGGCTACGTCTCAATATATCCTATGGGCCGCAGCGTTCGGCCAATTCACATGGATGAGACATGGGTCCAAAATTTGCGGGATA'   ]

test_all[Kmer[1]](v)
test_all[Kmer[2]](v)
test_all[Kmer[3]](v)
test_all[Kmer[4]](v)
test_all[Kmer[5]](v)
test_all[Kmer[6]](v)
test_all[Kmer[7]](v)
test_all[Kmer[8]](v)
test_all[Kmer[9]](v)
test_all[Kmer[10]](v)
test_all[Kmer[11]](v)
test_all[Kmer[12]](v)
test_all[Kmer[13]](v)
test_all[Kmer[14]](v)
test_all[Kmer[15]](v)
test_all[Kmer[16]](v)
test_all[Kmer[17]](v)
test_all[Kmer[18]](v)
test_all[Kmer[19]](v)
test_all[Kmer[20]](v)
test_all[Kmer[21]](v)
test_all[Kmer[22]](v)
test_all[Kmer[23]](v)
test_all[Kmer[24]](v)
test_all[Kmer[25]](v)
test_all[Kmer[26]](v)
test_all[Kmer[27]](v)
test_all[Kmer[28]](v)
test_all[Kmer[29]](v)
test_all[Kmer[30]](v)
test_all[Kmer[31]](v)
test_all[Kmer[32]](v)
test_all[Kmer[33]](v)
test_all[Kmer[34]](v)
test_all[Kmer[35]](v)
test_all[Kmer[36]](v)
test_all[Kmer[37]](v)
test_all[Kmer[38]](v)
test_all[Kmer[39]](v)
test_all[Kmer[40]](v)
test_all[Kmer[41]](v)
test_all[Kmer[42]](v)
test_all[Kmer[43]](v)
test_all[Kmer[44]](v)
test_all[Kmer[45]](v)
test_all[Kmer[46]](v)
test_all[Kmer[47]](v)
test_all[Kmer[48]](v)
test_all[Kmer[49]](v)
test_all[Kmer[50]](v)
test_all[Kmer[51]](v)
test_all[Kmer[52]](v)
test_all[Kmer[53]](v)
test_all[Kmer[54]](v)
test_all[Kmer[55]](v)
test_all[Kmer[56]](v)
test_all[Kmer[57]](v)
test_all[Kmer[58]](v)
test_all[Kmer[59]](v)
test_all[Kmer[60]](v)
test_all[Kmer[61]](v)
test_all[Kmer[62]](v)
test_all[Kmer[63]](v)
test_all[Kmer[64]](v)
test_all[Kmer[65]](v)
test_all[Kmer[66]](v)
test_all[Kmer[67]](v)
test_all[Kmer[68]](v)
test_all[Kmer[69]](v)
test_all[Kmer[70]](v)
test_all[Kmer[71]](v)
test_all[Kmer[72]](v)
test_all[Kmer[73]](v)
test_all[Kmer[74]](v)
test_all[Kmer[75]](v)
test_all[Kmer[76]](v)
test_all[Kmer[77]](v)
test_all[Kmer[78]](v)
test_all[Kmer[79]](v)
test_all[Kmer[80]](v)
test_all[Kmer[81]](v)
test_all[Kmer[82]](v)
test_all[Kmer[83]](v)
test_all[Kmer[84]](v)
test_all[Kmer[85]](v)
test_all[Kmer[86]](v)
test_all[Kmer[87]](v)
test_all[Kmer[88]](v)
test_all[Kmer[89]](v)
test_all[Kmer[90]](v)
test_all[Kmer[91]](v)
test_all[Kmer[92]](v)
test_all[Kmer[93]](v)
test_all[Kmer[94]](v)
test_all[Kmer[95]](v)
test_all[Kmer[96]](v)
test_all[Kmer[97]](v)
test_all[Kmer[98]](v)
test_all[Kmer[99]](v)
test_all[Kmer[100]](v)
