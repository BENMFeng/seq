from bio.fmindex import FMIndex
import gzip
import pickle

Q,T = ['test/data/' + a for a in ('MT-orang.fa','MT-human.fa')]

def suffix_array_slow[T](s: T):
    def key(t: tuple[T, int]):
        return t[0][t[1]:]
    v = [(s, i) for i in range(len(s))]
    v.sort(key=key)
    return [i for s,i in v]

def bwt_slow[T](s: T):
    t = str(s) + '$'
    n = len(t)
    m = sorted([t[i:n]+t[0:i] for i in range(n)])
    return ''.join([q[-1] for q in m])

@test
def test_suffix_array():
    assert len(s''.suffix_array()) == 0
    assert s'A'.suffix_array() == [0]

    for s in list(FASTA(Q) |> seqs) + list(FASTA(T) |> seqs):
        SA = s.suffix_array()
        assert SA == suffix_array_slow(s)
        s = ~s
        SA = s.suffix_array()
        assert SA == suffix_array_slow(s)

@test
def test_bwt():
    assert s''.bwt() == s'$'
    assert s'A'.bwt() == s'A$'

    for s in list(FASTA(Q) |> seqs) + list(FASTA(T) |> seqs):
        b = str(s.bwt())
        assert b == bwt_slow(s)
        s = ~s
        b = str(s.bwt())
        assert b == bwt_slow(s)

@test
def test_fmindex(FMD: bool):
    # sequence-based
    if not FMD:
        fmi = FMIndex(s'TAACGAGGCGGCTCGTAGTATAAACGCTTTGGACTAGACTCGATACCTAG')
        assert fmi.count(s'TA') == 7
        assert fmi.count(s'TAA') == 2
        assert fmi.count(s'TATT') == 0
        assert sorted(list(fmi[s'TAA'])) == sorted(list(fmi[~s'TTA'])) == [0, 20]
        assert len(list(fmi[s'TATT'])) == 0

    # FASTA-based
    fmi = FMIndex('test/data/seqs.fasta')
    with gzip.open('build/fmi.bin', 'wb') as jar:
        pickle.dump(fmi, jar)

    with gzip.open('build/fmi.bin', 'rb') as jar:
        fmi = pickle.load[FMIndex](jar)

    assert fmi.sequence(1, 20, rid=0) == fmi.sequence(1, 20, name='chrA') == s'CCTCCCCGTTCGCTGGACC'
    assert fmi.sequence(1, 20, rid=3) == fmi.sequence(1, 20, name='chrD') == s'GCCGTGACCACCCCGCGAG'
    assert list(fmi.contigs()) == [('chrA', 460), ('chrB', 489), ('chrC', 500), ('chrD', 49)]
    assert fmi.count(s'TATA') == 6  # note TATATA in chrC
    assert fmi.count(s'TATAC') == 0
    assert sorted(list(fmi.locate(s'TATAA'))) == [(1, 'chrB', 168), (2, 'chrC', 275), (2, 'chrC', 485)]

@test
def test_smems():
    # FASTA-based
    path = 'test/data/seqs2.fasta'
    fmi = FMIndex(path, FMD=True)
    ref = [rec for rec in FASTA(path)]
    with gzip.open('build/fmi.bin', 'wb') as jar:
        pickle.dump(fmi, jar)

    with gzip.open('build/fmi.bin', 'rb') as jar:
        fmi = pickle.load[FMIndex](jar)

    q = s'ACCAAACCCAGCTACGCAAAATCTTAGCATACTCCTCAATTACCCACATAGGATGAATAA'
    v = [[(name, pos, is_rev, ref[rid].seq[pos:pos + intv.match_size]) for rid, name, pos, is_rev in fmi.biresults(intv)] for intv in fmi.smems(q, x=20, min_intv=1)[1]]
    assert v == [[('chrC', 61, True, s'TATTCATCCTATGTGGGTAATTGAGGAGTATGCTAAGATTTTGCGTAGC'), ('chrC', 10, False, s'GCTACGCAAAATCTTAGCATACTCCTCAATTACCCACATAGGATGAATA')]]

    q = s'CTTAA'
    v = [[(name, pos, is_rev, ref[rid].seq[pos:pos + intv.match_size]) for rid, name, pos, is_rev in fmi.biresults(intv)] for intv in fmi.smems(q, x=1, min_intv=1)[1]]
    assert v == [[('chrA', 2, False, s'CTTAA')]]

test_suffix_array()
test_bwt()
test_fmindex(FMD=True)
test_fmindex(FMD=False)
test_smems()
