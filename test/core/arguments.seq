def baz(x, y, z = 3):
    print 'baz', x, y, z
baz(1, 2, 3)  # EXPECT: baz 1 2 3
baz(1, 3)     # EXPECT: baz 1 3 3
baz(z = 'z', y = 'y', x = 'x')  # EXPECT: baz x y z
baz(y = 'y', x = 'x')  # EXPECT: baz x y 3
baz('x', y = 'y')  # EXPECT: baz x y 3

class A:
    def foo(self: A, x = 3, y = 'hello'):
        print x, y

A().foo(y = 3.14, x = 42)  # EXPECT: 42 3.14

def g[T](a: T, b: optional[T] = None):
    b_ = ~b if b else T()
    print a, b_

g(99, 4242)  # EXPECT: 99 4242
g(99)  # EXPECT: 99 0
None |> g(a=1, b=...)  # EXPECT: 1 0

def _unwrap(opt):
    return ~opt

def foo(x: int, y: int, z: optional[list[float]]):
    xs = str(x)
    ys = str(y)
    zs = str(_unwrap(z)) if z else 'None'
    print xs, ys, zs

foo(1, 2, [3.14])  # EXPECT: 1 2 [3.14]
foo(77, 99, None)  # EXPECT: 77 99 None

class A:
    def __init__(self: A):
        pass

    def foo(x: int, y: int, z: optional[list[float]]):
        xs = str(x)
        ys = str(y)
        zs = str(_unwrap(z)) if z else 'None'
        print xs, ys, zs

    def bar[S](self: A, x: S, y: S, z: optional[typeof(S() + 0.0)] = None):
        xs = str(x)
        ys = str(y)
        zs = str(_unwrap(z)) if z else 'None'
        print xs, ys, zs

A.foo(1, 2, [3.14])  # EXPECT: 1 2 [3.14]
A.foo(77, 99, None)  # EXPECT: 77 99 None

A().bar(1.0, 2.0, 3.14)  # EXPECT: 1 2 3.14
A().bar(77, 99, None)  # EXPECT: 77 99 None
A().bar(77, 99)  # EXPECT: 77 99 None

1 |> foo(2, [3.14])  # EXPECT: 1 2 [3.14]
1 |> foo(77, ..., None)  # EXPECT: 77 1 None
None |> foo(-5, -1, ...)  # EXPECT: -5 -1 None
[1.23] |> foo(-5, -1, ...)  # EXPECT: -5 -1 [1.23]
