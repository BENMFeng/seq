# Primarily for internal use. Regular users should not use this module.

def sizeof[T]():
    return array[T].__elemsize__()

def alloc(sz: int):
    cimport seq_alloc(int) -> ptr[byte]
    return seq_alloc(sz)

# Allocates a block of memory via GC, where the
# caller guarantees that this block will not store
# pointers to other GC-allocated data.
def alloc_atomic(sz: int):
    cimport seq_alloc_atomic(int) -> ptr[byte]
    return seq_alloc_atomic(sz)

def realloc(p: ptr[byte], sz: int):
    cimport seq_realloc(ptr[byte], int) -> ptr[byte]
    return seq_realloc(p, sz)

def free(p: ptr[byte]):
    cimport seq_free(ptr[byte])
    seq_free(p)

def add_roots(start: ptr[byte], end: ptr[byte]):
    cimport seq_gc_add_roots(ptr[byte], ptr[byte])
    seq_gc_add_roots(start, end)

def remove_roots(start: ptr[byte], end: ptr[byte]):
    cimport seq_gc_remove_roots(ptr[byte], ptr[byte])
    seq_gc_remove_roots(start, end)

def clear_roots():
    cimport seq_gc_clear_roots()
    seq_gc_clear_roots()

def exclude_static_roots(start: ptr[byte], end: ptr[byte]):
    cimport seq_gc_exclude_static_roots(ptr[byte], ptr[byte])
    seq_gc_exclude_static_roots(start, end)
