# Interface for iterating over sequences in some format
# (e.g. FASTA, FASTQ, SAM, etc.).

type Seqs(file: gzFile):
    def __init__(self: Seqs, path: str) -> Seqs:
        return (gzopen(path, "r"),)

    def __iter__(self: Seqs):
        for a in self.file._iter():
            assert a.len >= 0
            yield copy(seq(a.ptr, a.len))
        self.close()

    def __blocks__(self: Seqs, size: int):
        from bio.block import _blocks
        return _blocks(self.__iter__(), size)

    def close(self: Seqs):
        self.file.close()

    def __enter__(self: Seqs):
        pass

    def __exit__(self: Seqs):
        self.close()

extend str:
    def __seqs__(self: str):
        return iter(Seqs(self))

    def __blocks__(self: str, size: int):
        from bio.block import _blocks
        return _blocks(self.__seqs__(), size)
