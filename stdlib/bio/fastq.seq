# FASTQ format parser
# https://en.wikipedia.org/wiki/FASTQ_format
type FASTQRecord(_name: str, _read: seq, _qual: str):
    @property
    def name(self: FASTQRecord):
        return self._name

    @property
    def read(self: FASTQRecord):
        return self._read

    # FASTA compatibility
    @property
    def seq(self: FASTQRecord):
        return self._read

    @property
    def qual(self: FASTQRecord):
        return self._qual

type FASTQReader(_file: cobj, validate: bool, gzip: bool, copy: bool):
    def __init__(self: FASTQReader, path: str, validate: bool, gzip: bool, copy: bool) -> FASTQReader:
        return (gzopen(path, "r").__raw__() if gzip else open(path, "r").__raw__(), validate, gzip, copy)

    @property
    def file(self: FASTQReader):
        assert not self.gzip
        p = __array__[cobj](1)
        p.ptr[0] = self._file
        return ptr[File](p.ptr)[0]

    @property
    def gzfile(self: FASTQReader):
        assert self.gzip
        p = __array__[cobj](1)
        p.ptr[0] = self._file
        return ptr[gzFile](p.ptr)[0]

    def _preprocess_read(self: FASTQReader, a: str):
        from bio.builtin import _validate_str_as_seq
        if self.validate:
            return _validate_str_as_seq(a, self.copy)
        else:
            return copy(seq(a.ptr, a.len)) if self.copy else seq(a.ptr, a.len)

    def _preprocess_qual(self: FASTQReader, a: str):
        from bio.builtin import _validate_str_as_qual
        if self.validate:
            return _validate_str_as_qual(a, self.copy)
        else:
            return copy(a) if self.copy else a

    def _iter_core(self: FASTQReader, file, seqs: bool) -> FASTQRecord:
        line = 0
        name, read, qual = "", s"", ""
        for a in file._iter():
            match line % 4:
                case 0:
                    if self.validate and a[0] != "@":
                        raise ValueError(f"sequence name on line {line + 1} of FASTQ does not begin with '@'")
                    name = copy(a[1:]) if self.copy else a[1:]
                case 1:
                    read = self._preprocess_read(a)
                    if seqs:
                        yield ("", read, "")
                case 2:
                    if self.validate and a[0] != "+":
                        raise ValueError(f"invalid separator on line {line + 1} of FASTQ")
                case 3:
                    if self.validate and len(a) != len(read):
                        raise ValueError(f"quality and sequence length mismatch on line {line + 1} of FASTQ")
                    qual = self._preprocess_qual(a)
                    assert read.len >= 0
                    if not seqs:
                        yield (name, read, qual)
                case _:
                    assert False
            line += 1

    def __seqs__(self: FASTQReader):
        if self.gzip:
            for rec in self._iter_core(self.gzfile, seqs=True):
                yield rec.seq
        else:
            for rec in self._iter_core(self.file, seqs=True):
                yield rec.seq
        self.close()

    def __iter__(self: FASTQReader) -> FASTQRecord:
        if not self.copy:
            raise ValueError("cannot iterate over FASTQ records with copy=False")
        if self.gzip:
            yield from self._iter_core(self.gzfile, seqs=False)
        else:
            yield from self._iter_core(self.file, seqs=False)
        self.close()

    def __blocks__(self: FASTQReader, size: int):
        from bio.block import _blocks
        if not self.copy:
            raise ValueError("cannot read sequences in blocks with copy=False")
        return _blocks(self.__iter__(), size)

    def close(self: FASTQReader):
        if self.gzip:
            self.gzfile.close()
        else:
            self.file.close()

    def __enter__(self: FASTQReader):
        pass

    def __exit__(self: FASTQReader):
        self.close()

def FASTQ(path: str, validate: bool = True, gzip: bool = True, copy: bool = True):
    return FASTQReader(path=path, validate=validate, gzip=gzip, copy=copy)
