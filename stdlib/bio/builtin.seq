def seqs(x):
    return x.__seqs__()

def split(self: seq, k: int, step: int):
    return self.split(k, step)

def kmers[K](self: seq, step: int):
    return self.kmers[K](step)

def kmers_with_pos[K](self: seq, step: int):
    return self.kmers_with_pos[K](step)

def base[K,T](kmer: K, idx: int, b: T):
    type U = typeof(kmer.as_int())
    if idx < 0:
        idx += len(kmer)
    idx = K.len() - idx - 1
    n = U(int(Kmer[1](b).as_int()))
    k = kmer.as_int() & ~(U(3) << U(2*idx))
    k |= n << U(2*idx)
    return K(k)
