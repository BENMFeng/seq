type Contig(_tid: u32, _name: str, _len: int):
    '''
    Representation of a contig, consisting of an ID, name and length.
    '''
    def __init__(self: Contig, tid: int, name: str, len: int) -> Contig:
        return (u32(tid), name, len)

    @property
    def tid(self: Contig):
        return int(self._tid)

    @property
    def name(self: Contig):
        return self._name

    @property
    def len(self: Contig):
        return self._len

    def __str__(self: Contig):
        return self.name

    def __len__(self: Contig):
        return self.len

    def __eq__(self: Contig, other: Contig):
        return self.tid == other.tid

    def __ne__(self: Contig, other: Contig):
        return self.tid != other.tid

    def __lt__(self: Contig, other: Contig):
        return self.tid < other.tid

    def __gt__(self: Contig, other: Contig):
        return self.tid > other.tid

    def __le__(self: Contig, other: Contig):
        return self.tid <= other.tid

    def __ge__(self: Contig, other: Contig):
        return self.tid >= other.tid

    def __hash__(self: Contig):
        return self.tid

type Locus(_tid: u32, _pos: u32):
    '''
    Representation of a locus, consisting of a contig ID and 0-based position.
    '''
    def __init__(self: Locus, tid: int, pos: int) -> Locus:
        '''
        Constructs a `Locus` with specified contig ID and 0-based position.
        Negative positions indicate loci on the reverse strand.
        '''
        return (u32(tid), u32(pos))

    def __lt__(self: Locus, other: Locus):
        return (self.tid, self.pos) < (other.tid, other.pos)

    def __gt__(self: Locus, other: Locus):
        return (self.tid, self.pos) > (other.tid, other.pos)

    def __le__(self: Locus, other: Locus):
        return (self.tid, self.pos) <= (other.tid, other.pos)

    def __ge__(self: Locus, other: Locus):
        return (self.tid, self.pos) >= (other.tid, other.pos)

    @property
    def tid(self: Locus):
        return int(self._tid)

    @property
    def pos(self: Locus):
        return abs(int(i32(int(self._pos))))

    @property
    def reversed(self: Locus):
        '''
        Whether this locus is on the reverse strand
        '''
        return i32(int(self._pos)) < i32(0)

    def __invert__(self: Locus):
        '''
        Returns the corresponding `Locus` on the reverse strand
        '''
        return Locus(self.tid, self.pos if self.reversed else -self.pos)

    def __str__(self: Locus):
        return f"Locus(tid={self.tid}, pos={self.pos}, reversed={self.reversed})"
