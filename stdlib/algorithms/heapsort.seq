def _heapify[T](arr: array[T], begin: int, end: int, comp: function[bool,T,T]):
    """
        Makes the array a heap from [begin, end).
    """
    root = begin
    left = 2 * begin + 1
    right = 2 * begin + 2

    if left < end and comp(arr[root], arr[left]):
        root = left

    if right < end and comp(arr[root], arr[right]):
        root = right

    if root != begin:
        arr[begin], arr[root] = arr[root], arr[begin]
        _heapify(arr, root, end, comp)

def _heap_sort[T](arr: array[T], begin: int, end: int, comp: function[bool,T,T]):
    if end - begin < 2:
        return

    for i in range(end, begin - 1, -1):
        _heapify(arr, i, end, comp)

    for i in range(end -1, begin, -1):
        arr[i], arr[begin] = arr[begin], arr[i]
        _heapify(arr, begin, i, comp)


def heap_sort_array[T](collection: array[T], size: int, compare: function[bool,T,T]):
    """
        Heap Sort
        Sorts the array inplace.
    """
    _heap_sort(collection, 0, size, compare)

def heap_sort_inplace[T](collection: list[T], compare: function[bool,T,T]):
    """
        Heap Sort
        Sorts the list inplace.
    """
    heap_sort_array(collection.arr, collection.len, compare)

def heap_sort[T](collection: list[T], compare: function[bool,T,T]) -> list[T]:
    """
        Heap Sort
        Returns a sorted list.
    """
    newlst = copy(collection)
    heap_sort_inplace(newlst, compare)
    return newlst

