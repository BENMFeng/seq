def _med3[T](a: int, b: int, c: int, d: array[T]):
    return ((b if (d[b] < d[c]) else (c if d[a] < d[c] else a))
               if (d[a] < d[b]) else (b if (d[b] > d[c]) else (c if d[a] > d[c] else a)))

def _swap[T](i: int, j: int, a: array[T]):
    a[i], a[j] = a[j], a[i]

def _vecswap[T](i: int, j: int, n: int, a: array[T]):
    while n > 0:
        _swap(i, j, a)
        i += 1
        j += 1
        n -= 1

def _qsort[T](arr: array[T], frm: int, cnt: int):
    if cnt <= 7:
        i = frm + 1
        while i < frm + cnt:
            j = i
            while j > frm and arr[j - 1] > arr[j]:
                _swap(j, j - 1, arr)
                j -= 1
            i += 1
        return

    mid = cnt // 2
    lo = frm
    hi = frm + cnt - 1

    if cnt > 40:
        s = cnt // 8
        lo = _med3(lo, lo + s, lo + 2 * s, arr)
        mid = _med3(mid - s, mid, mid + s, arr)
        hi = _med3(hi - 2 * s, hi - s, hi, arr)
    mid = _med3(lo, mid, hi, arr)

    _swap(frm, mid, arr)
    a = frm
    b = a
    c = frm + cnt - 1
    d = c

    while True:
        while b <= c and arr[b] <= arr[frm]:
            if arr[b] == arr[frm]:
                _swap(a, b, arr)
                a += 1
            b += 1

        while c >= b and arr[c] >= arr[frm]:
            if arr[c] == arr[frm]:
                _swap(c, d, arr)
                d -= 1
            c -= 1

        if b > c:
            break
        _swap(b, c, arr)
        b += 1
        c -= 1

    hi = frm + cnt
    span = min(a - frm, b - a)
    _vecswap(frm, b - span, span, arr)

    span = min(d - c, hi - d - 1)
    _vecswap(b, hi - span, span, arr)

    span = b - a
    if span > 1:
        _qsort(arr, frm, span)

    span = d - c
    if span > 1:
        _qsort(arr, hi - span, span)

def qsort[T](v: array[T]):
    _qsort(v, 0, len(v))
