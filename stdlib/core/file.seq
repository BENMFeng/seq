def _f_errcheck(stream: cobj, msg: str):
    err = int(_C.ferror(stream))
    if err:
        raise IOError("file I/O error: " + msg)

def _gz_errcheck(stream: cobj):
    errnum = i32(0)
    msg = _C.gzerror(stream, __ptr__(errnum))
    if msg and msg[0]:
        l = 1
        while msg[l]:
            l += 1
        raise IOError("zlib error: " + str(msg, l))

def _f_getline(lineptr: ptr[cobj], n: ptr[int], stream: cobj):
    if not lineptr[0]:
        N = 128
        n[0] = N
        lineptr[0] = _gc.alloc_atomic(N)

    cur_pos = lineptr[0]
    while True:
        c = int(_C.fgetc(stream))
        if c == -1:
            _f_errcheck(stream, "error in read")
            if cur_pos == lineptr[0]:
                return -1
            else:
                break

        if (lineptr[0] + n[0]) - cur_pos < 2:
            new_lineptr_len = 2 * n[0]
            new_lineptr = _gc.realloc(lineptr[0], new_lineptr_len)
            cur_pos = new_lineptr + (cur_pos - lineptr[0])
            lineptr[0] = new_lineptr
            n[0] = new_lineptr_len

        cur_pos[0] = byte(c)
        cur_pos += 1
        if byte(c) == '\n'.ptr[0]:
            break

    cur_pos[0] = byte(0)
    return cur_pos - lineptr[0]

def _gz_getline(lineptr: ptr[cobj], n: ptr[int], stream: cobj):
    if not lineptr[0]:
        N = 128
        n[0] = N
        lineptr[0] = _gc.alloc_atomic(N)

    cur_pos = lineptr[0]
    while True:
        c = int(_C.gzgetc(stream))
        if c == -1:
            _gz_errcheck(stream)
            if cur_pos == lineptr[0]:
                return -1
            else:
                break

        if (lineptr[0] + n[0]) - cur_pos < 2:
            new_lineptr_len = 2 * n[0]
            new_lineptr = _gc.realloc(lineptr[0], new_lineptr_len)
            cur_pos = new_lineptr + (cur_pos - lineptr[0])
            lineptr[0] = new_lineptr
            n[0] = new_lineptr_len

        cur_pos[0] = byte(c)
        cur_pos += 1
        if byte(c) == '\n'.ptr[0]:
            break

    cur_pos[0] = byte(0)
    return cur_pos - lineptr[0]

class File:
    sz: int
    buf: cobj
    fp: cobj

    def __init__(self: File, fp: cobj):
        self.fp = fp
        self._reset()

    def __init__(self: File, path: str, mode: str):
        self.fp = _C.fopen(path.c_str(), mode.c_str())
        if not self.fp:
            raise IOError("file " + path + " could not be opened")
        self._reset()

    def __enter__(self: File):
        pass

    def __exit__(self: File):
        self.close()

    def __iter__(self: File):
        for a in self._iter():
            yield copy(a)

    def readlines(self: File):
        return [l for l in self]

    def write(self: File, s: str):
        self._ensure_open()
        _C.fwrite(s.ptr, 1, len(s), self.fp)
        _f_errcheck(self.fp, "error in write")

    def write_gen[T](self: File, g: generator[T]):
        for s in g:
            self.write(str(s))

    def tell(self: File):
        ret = _C.ftell(self.fp)
        _f_errcheck(self.fp, "error in tell")
        return ret

    def seek(self: File, offset: int, whence: int):
        _C.fseek(self.fp, offset, i32(whence))
        _f_errcheck(self.fp, "error in seek")

    def close(self):
        if self.fp:
            _C.fclose(self.fp)
            self.fp = cobj()
        if self.buf:
            _gc.free(self.buf)
            self._reset()

    def _ensure_open(self: File):
        if not self.fp:
            raise IOError("I/O operation on closed file")

    def _reset(self: File):
        self.buf = cobj()
        self.sz = 0

    def _iter(self: File):
        self._ensure_open()
        while True:
            # pass pointers to individual class fields:
            rd = _f_getline(ptr[cobj](self.__raw__() + 8), ptr[int](self.__raw__()), self.fp)
            if rd != -1:
                if self.buf[rd - 1] == byte(10):
                    rd -= 1
                yield str(self.buf, rd)
            else:
                break

class gzFile:
    sz: int
    buf: cobj
    fp: cobj

    def __init__(self: gzFile, fp: cobj):
        self.fp = fp
        self._reset()

    def __init__(self: gzFile, path: str, mode: str):
        self.fp = _C.gzopen(path.c_str(), mode.c_str())
        if not self.fp:
            raise IOError("file " + path + " could not be opened")
        self._reset()

    def __iter__(self: gzFile):
        for a in self._iter():
            yield copy(a)

    def __enter__(self: gzFile):
        pass

    def __exit__(self: gzFile):
        self.close()

    def close(self):
        if self.fp:
            _C.gzclose(self.fp)
            self.fp = cobj()
        if self.buf:
            _gc.free(self.buf)
            self._reset()

    def readlines(self: gzFile):
        return [l for l in self]

    def write(self: gzFile, s: str):
        self._ensure_open()
        _C.gzwrite(self.fp, s.ptr, i32(len(s)))
        _gz_errcheck(self.fp)

    def write_gen[T](self: gzFile, g: generator[T]):
        for s in g:
            self.write(str(s))

    def tell(self: gzFile):
        ret = _C.gztell(self.fp)
        _gz_errcheck(self.fp)
        return ret

    def seek(self: gzFile, offset: int, whence: int):
        _C.gzseek(self.fp, offset, i32(whence))
        _gz_errcheck(self.fp)

    def _iter(self: gzFile):
        self._ensure_open()
        while True:
            # pass pointers to individual class fields:
            rd = _gz_getline(ptr[cobj](self.__raw__() + 8), ptr[int](self.__raw__()), self.fp)
            if rd != -1:
                if self.buf[rd - 1] == byte(10):
                    rd -= 1
                yield str(self.buf, rd)
            else:
                break

    def _ensure_open(self: gzFile):
        if not self.fp:
            raise IOError("I/O operation on closed file")

    def _reset(self: gzFile):
        self.buf = cobj()
        self.sz = 0


def open(path: str, mode: str = "r"):
    return File(path, mode)


def gzopen(path: str, mode: str = "r"):
    return gzFile(path, mode)
