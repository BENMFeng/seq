from algorithms.timsort import tim_sort_inplace
from algorithms.pdqsort import pdq_sort_inplace
from algorithms.insertionsort import insertion_sort_inplace
from algorithms.heapsort import heap_sort_inplace
from algorithms.qsort import qsort_inplace

@deduceall
def sorted[S,T](v: generator[T], key: optional[function[S,T]] = None, algorithm: optional[str] = None):
    """
    sorted(v)

    Return a sorted list of the elements in v
    """
    newlist = [a for a in v]
    if key:
        if algorithm:
            newlist.sort(~key, ~algorithm)
        else:
            newlist.sort(~key, None)
    else:
        if algorithm:
            newlist.sort(None, ~algorithm)
        else:
            newlist.sort(None, None)
    return newlist

def _sort_list[T,S](self: list[T], key: function[S,T], algorithm: str):
    match algorithm:
        case 'pdq':
            pdq_sort_inplace(self, key)
        case 'insertion':
            insertion_sort_inplace(self, key)
        case 'heap':
            heap_sort_inplace(self, key)
        case 'tim':
            tim_sort_inplace(self, key)
        case 'quick':
            qsort_inplace(self, key)
        case _:
            raise ArgumentError("Algorithm '" + algorithm + "' does not exist")

extend list[T]:
    @deduceall
    def sort[S](self: list[T], key: optional[function[S,T]] = None, algorithm: optional[str] = None):
        def ident[T](x: T):
            return x

        alg = ~algorithm if algorithm else 'quick'
        if key:
            _sort_list(self, ~key, alg)
        else:
            _sort_list(self, ident[T], alg)


