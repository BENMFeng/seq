from err import *

def _getline(lineptr: ptr[ptr[byte]], n: ptr[int], stream: ptr[byte]):
    def getc(stream: ptr[byte]):
        cdef gzgetc(ptr[byte]) -> i32
        return int(gzgetc(stream))

    def errcheck(stream: ptr[byte]):
        cdef gzerror(ptr[byte], ptr[i32]) -> ptr[byte]
        errnum = i32(0)
        msg = gzerror(stream, __ptr__(errnum))
        if msg:
            l = 0
            while msg[l]:
                l += 1
            raise IOError(str(msg, l))

    if not lineptr[0]:
        N = 128
        n[0] = N
        lineptr[0] = ptr[byte](N)

    cur_pos = lineptr[0]
    while True:
        c = getc(stream)
        errcheck()

        if c == -1:
            if cur_pos == lineptr[0]:
                return -1
            else:
                break

        if (lineptr[0] + n[0]) - cur_pos < 2:
            cdef seq_realloc(ptr[byte], int) -> ptr[byte]
            new_lineptr_len = 2 * n[0]
            new_lineptr = seq_realloc(lineptr[0], new_lineptr_len)
            cur_pos = new_lineptr + (cur_pos - lineptr[0])
            lineptr[0] = new_lineptr
            n[0] = new_lineptr_len

        cur_pos[0] = byte(c)
        cur_pos += 1
        if byte(c) == '\n'.ptr[0]:
            break

    cur_pos[0] = byte(0)
    return cur_pos - lineptr[0]

class File:
    sz: int
    buf: ptr[byte]
    fp: ptr[byte]

    def _reset(self: File):
        self.buf = ptr[byte]()
        self.sz = 0

    def __init__(self: File, fp: ptr[byte]):
        self.fp = fp
        self._reset()

    def __init__(self: File, path: str, mode: str):
        cdef gzopen(ptr[byte], ptr[byte]) -> ptr[byte]
        self.fp = gzopen(path.c_str(), mode.c_str())
        if not self.fp:
            raise IOError("file " + path + " could not be opened")
        self._reset()

    def close(self):
        cdef gzclose(ptr[byte]) -> int
        cdef seq_free(ptr[byte])
        if self.fp:
            gzclose(self.fp)
        if self.buf:
            seq_free(self.buf)
            self._reset()

    def _iter(self: File):
        while True:
            # pass pointers to individual class fields:
            rd = _getline(ptr[ptr[byte]](self.__raw__() + 8), ptr[int](self.__raw__()), self.fp)
            if rd != -1:
                if self.buf[rd - 1] == byte(10):
                    rd -= 1
                yield str(self.buf, rd)
            else:
                break

    def __iter__(self: File):
        for a in self._iter():
            yield copy(a)

    def readlines(self):
        return [l for l in self]

    def write(self, s: str):
        cdef fwrite(ptr[byte], int, int, ptr[byte]) -> int
        fwrite(s.ptr, 1, s.len, self.fp)

    def write_gen[T](self, g: generator[T]):
        for s in g:
            self.write(str(s))

def open(path: str, mode: str):
    return File(path, mode)
