import python as py

class list[T]:
    arr: array[T]
    len: int

    def __init__(self: list[T], arr: array[T], len: int):
        self.arr = arr
        self.len = len

    def __init__(self: list[T], cap: int):
        self.arr = array[T](cap)
        self.len = 0

    def __init__(self: list[T]):
        self.arr = array[T](10)
        self.len = 0

    def __init__(self: list[T], it: generator[T]):
        self.arr = array[T](10)
        self.len = 0
        for i in it:
            self.append(i)

    def __init__(self: list[T], other: list[T]):
        self.arr = array[T](other.len)
        self.len = 0
        for i in other:
            self.append(i)

    def _idx_check(self: list[T], idx: int, msg: str):
        if idx >= self.len or idx < 0:
            raise IndexError(msg)

    def _slice_error(self: list[T]):
        raise IndexError("list slice index error")

    def __len__(self: list[T]):
        return self.len

    def __bool__(self: list[T]):
        return len(self) > 0

    def __getitem__(self: list[T], idx: int):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list index out of range")
        return self.arr[idx]

    def __setitem__(self: list[T], idx: int, val: T):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list assignment index out of range")
        self.arr[idx] = val

    def __delitem__(self: list[T], idx: int):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list assignment index out of range")
        while idx < self.len - 1:
            self.arr[idx] = self.arr[idx + 1]
            idx += 1
        self.len -= 1

    def __eq__(self: list[T], other: list[T]):
        if len(self) != len(other):
            return False
        for i in range(len(self)):
            if self.arr[i] != other.arr[i]:
                return False
        return True

    def __ne__(self: list[T], other: list[T]):
        return not (self == other)

    def __getitem__(self: list[T], s: eslice):
        return self.__copy__()

    def __getitem__(self: list[T], s: slice):
        a, b = s
        if a < 0:
            a += len(self)
        if b < 0:
            b += len(self)
        if not (0 <= a <= b <= len(self)):
            self._slice_error()
        return list[T](self.arr.__slice__(a, b), b - a)

    def __getitem__(self: list[T], s: lslice):
        if s.end < 0:
            s.end += len(self)
        if not (0 <= s.end <= len(self)):
            self._slice_error()
        return list[T](self.arr.__slice_left__(s.end), s.end)

    def __getitem__(self: list[T], s: rslice):
        if s.start < 0:
            s.start += len(self)
        if not (0 <= s.start <= len(self)):
            self._slice_error()
        return list[T](self.arr.__slice_right__(s.start), self.len - s.start)

    def __getitem__(self: list[T], s: esslice):
        if s.step == 0:
            self._slice_error()
        if s.step > 0:
            return list[T](self.arr[i] for i in range(0, self.len, s.step))
        else:
            return list[T](self.arr[i] for i in range(self.len - 1, -1, s.step))

    def __getitem__(self: list[T], s: sslice):
        a, b, step = s
        if a < 0:
            a += len(self)
        if b < 0:
            b += len(self)
        if not (0 <= a <= b <= len(self)) or step == 0:
            self._slice_error()
        return list[T](self.arr[i] for i in range(a, b, step))

    def __getitem__(self: list[T], s: lsslice):
        if s.end < 0:
            s.end += len(self)
        if not (0 <= s.end <= len(self)) or s.step == 0:
            self._slice_error()
        return list[T](self.arr[i] for i in range(0, s.end, s.step))

    def __getitem__(self: list[T], s: rsslice):
        if s.start < 0:
            s.start += len(self)
        if not (0 <= s.start <= len(self)) or s.step == 0:
            self._slice_error()
        return list[T](self.arr[i] for i in range(s.start, self.len, s.step))

    def __copy__(self: list[T]):
        return list[T](self.arr.__copy__(), self.len)

    def __iter__(self: list[T]):
        i = 0
        while i < self.len:
            yield self.arr[i]
            i += 1

    def __reversed__(self: list[T]):
        i = self.len - 1
        while i >= 0:
            yield self.arr[i]
            i -= 1

    def __add__(self: list[T], other: list[T]):
        v = list[T](self.len + other.len)
        for a in self:
            v.append(a)
        for a in other:
            v.append(a)
        return v

    def __iadd__(self: list[T], other: list[T]):
        for a in other:
            self.append(a)
        return self

    def __mul__(self: list[T], n: int):
        if n <= 0:
            return list[T]()

        new_len = self.len * n
        v = list[T](new_len)
        i = 0
        while i < n:
            j = 0
            while j < self.len:
                v.append(self[j])
                j += 1
            i += 1
        return v

    def __imul__(self: list[T], n: int):
        import gc

        if n == 1:
            return self

        if n <= 0:
            self.clear()
            return self

        len0 = len(self)
        new_cap = n * len0
        if self.arr.len < new_cap:
            p = ptr[T](gc.realloc(ptr[byte](self.arr.ptr), new_cap * gc.sizeof[T]()))
            self.arr = array[T](p, new_cap)

        idx = len0
        i = 0
        while i < n - 1:
            j = 0
            while j < len0:
                self.arr[idx] = self.arr[j]
                idx += 1
                j += 1
            i += 1

        self.len = new_cap
        return self

    def _resize_if_full(self: list[T]):
        import gc
        if self.len == self.arr.len:
            new_cap = (1 + 3*self.len) // 2
            p = ptr[T](gc.realloc(ptr[byte](self.arr.ptr), new_cap * gc.sizeof[T]()))
            self.arr = array[T](p, new_cap)

    def append(self: list[T], x: T):
        self._resize_if_full()
        self.arr[self.len] = x
        self.len += 1

    # TODO: can't use "extend" here since it is a keyword!
    def ext(self: list[T], itr):
        for a in itr:
            self.append(a)

    def insert(self: list[T], idx: int, x: T):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "insert index out of range")
        self._resize_if_full()
        i = self.len
        while i > idx:
            self.arr[i] = self.arr[i-1]
            i -= 1
        self.arr[idx] = x
        self.len += 1

    def pop(self: list[T]):
        if len(self) == 0:
            raise IndexError("pop from empty list")
        x = self[self.len - 1]
        self.len -= 1
        return x

    def remove(self: list[T], x: T):
        i = 0
        for a in self:
            if a == x:
                del self[i]
                return True
            i += 1
        return False

    def clear(self: list[T]):
        self.len = 0

    def index(self: list[T], x: T):
        i = 0
        for a in self:
            if a == x:
                return i
            i += 1
        return -1

    def count(self: list[T], x: T):
        count = 0
        for a in self:
            if a == x:
                count += 1
        return count

    def reverse(self: list[T]):
        i = 0
        while i < self.len//2:
            j = self.len - i - 1
            x = self[i]
            self[i] = self[j]
            self[j] = x
            i += 1

    def sort(self: list[T]):
        qsort(self.arr[0:len(self)])

    def __str__(self: list[T]) -> str:
        n = len(self)
        if n == 0:
            return "[]"
        else:
            y = ["[", str(self[0])]
            for i in range(1, n):
                y.append(", ")
                y.append(str(self[i]))
            y.append("]")
            return str.cat(y)

    def __to_py__(self: list[T]) -> py.pyobj:
        pylist = py.PyList_New(len(self))
        py.pyobj.exc_check()
        idx = 0
        for a in self:
            py.PyList_SetItem(pylist, idx, py.py(a).p)
            py.pyobj.exc_check()
            idx += 1
        return py.pyobj(pylist)

    def __from_py__(v: py.pyobj):
        n = v.__len__()
        t = list[T](n)
        for i in range(n):
            elem = py.pyobj(py.PyList_GetItem(v.p, i))
            py.pyobj.exc_check()
            t.append(py.get[T](elem))
        return t

    def __pickle__(self: list[T], jar: Jar):
        n = len(self)
        pickle(n, jar)
        for i in range(n):
            pickle(self.arr[i], jar)

    def __unpickle__(jar: Jar):
        n = unpickle[int](jar)
        arr = array[T](n)
        for i in range(n):
            arr[i] = unpickle[T](jar)
        return list[T](arr, n)
