import python as py

class list[T]:
    arr: array[T]
    len: int

    def __init__(self: list[T], arr: array[T], len: int):
        self.arr = arr
        self.len = len

    def __init__(self: list[T], cap: int):
        self.arr = array[T](cap)
        self.len = 0

    def __init__(self: list[T]):
        self.arr = array[T](10)
        self.len = 0

    def __init__(self: list[T], it: generator[T]):
        self.arr = array[T](10)
        self.len = 0
        for i in it:
            self.append(i)

    def __init__(self: list[T], other: list[T]):
        self.arr = array[T](other.len)
        self.len = 0
        for i in other:
            self.append(i)

    def __len__(self: list[T]):
        return self.len

    def __bool__(self: list[T]):
        return self.len > 0

    def __getitem__(self: list[T], idx: int):
        assert idx < len(self)
        return self.arr[idx]

    def __setitem__(self: list[T], idx: int, val: T):
        assert idx < len(self)
        self.arr[idx] = val

    def __delitem__(self: list[T], idx: int):
        assert idx < len(self)
        while idx < self.len - 1:
            self.arr[idx] = self.arr[idx + 1]
            idx += 1
        self.len -= 1

    def __slice__(self: list[T], a: int, b: int):
        assert 0 <= a <= b <= len(self)
        return list[T](self.arr[a:b], b - a)

    def __slice_left__(self: list[T], b: int):
        assert 0 <= b <= len(self)
        return list[T](self.arr[:b], b)

    def __slice_right__(self: list[T], a: int):
        assert 0 <= a <= len(self)
        return list[T](self.arr[a:], self.len - a)

    def __copy__(self: list[T]):
        return list[T](self.arr.__copy__(), self.len)

    def __iter__(self: list[T]):
        i = 0
        while i < self.len:
            yield self.arr[i]
            i += 1

    def __add__(self: list[T], other: list[T]):
        v = list[T](self.len + other.len)
        for a in self:
            v.append(a)
        for a in other:
            v.append(a)
        return v

    def __mul__(self: list[T], n: int):
        new_len = self.len * n
        v = list[T](new_len)
        i = 0
        while i < n:
            j = 0
            while j < self.len:
                v.append(self[j])
                j += 1
            i += 1
        return v

    def _resize_if_full(self: list[T]):
        if self.len == self.arr.len:
            triple = 1 + 3*self.len
            new_arr = array[T](triple//2)
            i = 0
            while i < self.len:
                new_arr[i] = self.arr[i]
                i += 1
            self.arr = new_arr

    def append(self: list[T], x: T):
        self._resize_if_full()
        self.arr[self.len] = x
        self.len += 1

    def insert(self: list[T], idx: int, x: T):
        self._resize_if_full()
        i = self.len
        while i > idx:
            self.arr[i] = self.arr[i-1]
            i -= 1
        self.arr[idx] = x
        self.len += 1

    def pop(self: list[T]):
        x = self[self.len - 1]
        self.len -= 1
        return x

    def remove(self: list[T], x: T):
        i = 0
        for a in self:
            if a == x:
                del self[i]
                return True
            i += 1
        return False

    def clear(self: list[T]):
        self.len = 0

    def count(self: list[T], x: T):
        count = 0
        for a in self:
            if a == x:
                count += 1
        return count

    def reverse(self: list[T]):
        i = 0
        while i < self.len//2:
            j = self.len - i - 1
            x = self[i]
            self[i] = self[j]
            self[j] = x
            i += 1

    def __str__(self: list[T]) -> str:
        n = len(self)
        if n == 0:
            return "[]"
        else:
            y = ["[", str(self[0])]
            for i in range(1, n):
                y.append(", ")
                y.append(str(self[i]))
            y.append("]")
            return str.cat(y)

    def __to_py__(self: list[T]):
        cdef seq_py_list_new(int) -> ptr[byte]
        cdef seq_py_list_setitem(ptr[byte], int, ptr[byte])

        pylist = seq_py_list_new(len(self))
        idx = 0
        for a in self:
            seq_py_list_setitem(pylist, idx, py.py(a).p)
            idx += 1
        return py.PyObject(pylist)

    def __from_py__(v: py.PyObject):
        cdef seq_py_list_len(ptr[byte]) -> int
        cdef seq_py_list_getitem(ptr[byte], int) -> ptr[byte]

        n = seq_py_list_len(v.p)
        t = list[T](n)
        for i in range(n):
            elem = py.PyObject(seq_py_list_getitem(v.p, i))
            t.append(py.get[T](elem))
        return t
