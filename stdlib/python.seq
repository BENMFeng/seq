type PyObject(p: ptr[byte]):
    def incref(self: PyObject):
        cdef seq_py_incref(ptr[byte])
        seq_py_incref(self.p)

    def decref(self: PyObject):
        cdef seq_py_decref(ptr[byte])
        seq_py_decref(self.p)

type PyFunc(p: ptr[byte]):
    def call(self: PyFunc, args: PyObject):
        cdef seq_py_call(ptr[byte], ptr[byte]) -> ptr[byte]
        return PyObject(seq_py_call(self.p, args.p))

type PyModule(p: ptr[byte]):
    def __getitem__(self: PyModule, name: str):
        cdef seq_py_get_func(ptr[byte], ptr[byte]) -> ptr[byte]
        return PyFunc(seq_py_get_func(self.p, name.c_str()))

class PyException:
    msg: str
    pytype: str

def import_module(name: str):
    cdef seq_py_import(ptr[byte]) -> ptr[byte]
    return PyModule(seq_py_import(name.c_str()))


# conversions

def to_py(x):
    return x.__to_py__()

def from_py[T](x: PyObject) -> T:
    return T.__from_py__(x)

extend int:
    def __to_py__(self: int):
        cdef seq_int_to_py(int) -> ptr[byte]
        return PyObject(seq_int_to_py(self))

    def __from_py__(n: PyObject):
        cdef seq_int_from_py(ptr[byte]) -> int
        return seq_int_from_py(n.p)

extend float:
    def __to_py__(self: float):
        cdef seq_float_to_py(float) -> ptr[byte]
        return PyObject(seq_float_to_py(self))

    def __from_py__(f: PyObject):
        cdef seq_float_from_py(ptr[byte]) -> float
        return seq_float_from_py(f.p)

extend bool:
    def __to_py__(self: bool):
        cdef seq_bool_to_py(bool) -> ptr[byte]
        return PyObject(seq_bool_to_py(self))

    def __from_py__(b: PyObject):
        cdef seq_bool_from_py(ptr[byte]) -> bool
        return seq_bool_from_py(b.p)

extend byte:
    def __to_py__(self: byte):
        cdef seq_byte_to_py(byte) -> ptr[byte]
        return PyObject(seq_byte_to_py(self))

    def __from_py__(c: PyObject):
        cdef seq_byte_from_py(ptr[byte]) -> byte
        return seq_byte_from_py(c.p)

extend str:
    def __to_py__(self: str):
        cdef seq_str_to_py(str) -> ptr[byte]
        return PyObject(seq_str_to_py(self))

    def __from_py__(s: PyObject):
        cdef seq_str_from_py(ptr[byte]) -> str
        return seq_str_from_py(s.p)

extend seq:
    def __to_py__(self: seq):
        cdef seq_str_to_py(seq) -> ptr[byte]
        return PyObject(seq_str_to_py(self))

    def __from_py__(s: PyObject):
        cdef seq_str_from_py(ptr[byte]) -> seq
        return seq_str_from_py(s.p)
