
extend str:
    def isdigit(self: str) -> bool:
        """
        str.isdigit() -> bool

        Return True if all characters in str are digits
        and there is at least one character in str, False otherwise.
        """
        cdef isdigit(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isdigit(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if isdigit(int(self.ptr[i])) == 0:
                return False
        return True

    def islower(self: str) -> bool:
        """
        str.islower() -> bool

        Return True if all cased characters in str are lowercase and there is
        at least one cased character in str, False otherwise.
        """
        cased = False
        cdef islower(int) -> int
        cdef isupper(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return islower(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if isupper(int(self.ptr[i])) > 0:
                return False
            elif cased == False and islower(int(self.ptr[i])):
                cased = True
        return cased

    def isupper(self: str) -> bool:
        """
        str.isupper() -> bool

        Return True if all cased characters in str are uppercase and there is
        at least one cased character in str, False otherwise.
        """
        cased = False
        cdef isupper(int) -> int
        cdef islower(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isupper(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if islower(int(self.ptr[i])) > 0:
                return False
            elif cased == False and isupper(int(self.ptr[i])):
                cased = True
        return cased

    def isalnum(self: str) -> bool:
        """
        str.isalnum() -> bool

        Return True if all characters in str are alphanumeric
        and there is at least one character in str, False otherwise.
        """
        cdef isalnum(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isalnum(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if isalnum(int(self.ptr[i])) == 0:
                return False
        return True

    def isalpha(self: str) -> bool:
        """
        str.isalpha() -> bool

        Return True if all characters in str are alphabetic
        and there is at least one character in str, False otherwise.
        """
        cdef isalpha(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isalpha(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if isalpha(int(self.ptr[i])) == 0:
                return False
        return True

    def isspace(self: str) -> bool:
        """
        str.isspace() -> bool

        Return True if all characters in str are whitespace
        and there is at least one character in str, False otherwise.
        """
        cdef isspace(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isspace(int(self.ptr[0])) > 0
        for i in range(len(self)):
            if isspace(int(self.ptr[i])) == 0:
                return False
        return True

    def istitle(self: str) -> bool:
        """
        str.istitle() -> bool

        Return True if str is a titlecased string and there is at least one
        character in str, i.e. uppercase characters may only follow uncased
        characters and lowercase characters only cased ones. Return False
        otherwise.
        """
        cdef istitle(int) -> int
        cdef isupper(int) -> int
        cdef islower(int) -> int
        if len(self) == 0:
            return False
        if len(self) == 1:
            return isupper(int(self.ptr[0])) > 0

        cased = False
        prev_is_cased = False
        for i in range(len(self)):
            if isupper(int(self.ptr[i])) > 0:
                if prev_is_cased:
                    return False
                prev_is_cased = True
                cased = True
            elif islower(int(self.ptr[i])) > 0:
                if not prev_is_cased:
                    return False
                prev_is_cased = True
                cased = True
            else:
                prev_is_cased = False
        return cased
