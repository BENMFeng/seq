class TypeError:
    msg: str

def ord(s: str) -> byte:
    if len(s) != 1:
        raise TypeError("TypeError: ord() expected a character, but string of length " + str(len(s)) + " found")
    return s.ptr[0]

def chr(b: int) -> str:
    p = ptr[byte](1)
    p[0] = byte(b)
    return str(p, 1)

extend str:
    def isdigit(self: str) -> bool:
        """
        str.isdigit() -> bool

        Return True if all characters in str are digits
        and there is at least one character in str, False otherwise.
        """
        cdef isdigit(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isdigit(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if isdigit(int(self.ptr[i])) == 0:
                return False
        return True

    def islower(self: str) -> bool:
        """
        str.islower() -> bool

        Return True if all cased characters in str are lowercase and there is
        at least one cased character in str, False otherwise.
        """
        cased = False
        cdef islower(int) -> int
        cdef isupper(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return islower(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if isupper(int(self.ptr[i])) > 0:
                return False
            elif cased == False and islower(int(self.ptr[i])):
                cased = True
        return cased

    def isupper(self: str) -> bool:
        """
        str.isupper() -> bool

        Return True if all cased characters in str are uppercase and there is
        at least one cased character in str, False otherwise.
        """
        cased = False
        cdef isupper(int) -> int
        cdef islower(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isupper(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if islower(int(self.ptr[i])) > 0:
                return False
            elif cased == False and isupper(int(self.ptr[i])):
                cased = True
        return cased

    def isalnum(self: str) -> bool:
        """
        str.isalnum() -> bool

        Return True if all characters in str are alphanumeric
        and there is at least one character in str, False otherwise.
        """
        cdef isalnum(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isalnum(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if isalnum(int(self.ptr[i])) == 0:
                return False
        return True

    def isalpha(self: str) -> bool:
        """
        str.isalpha() -> bool

        Return True if all characters in str are alphabetic
        and there is at least one character in str, False otherwise.
        """
        cdef isalpha(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isalpha(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if isalpha(int(self.ptr[i])) == 0:
                return False
        return True

    def isspace(self: str) -> bool:
        """
        str.isspace() -> bool

        Return True if all characters in str are whitespace
        and there is at least one character in str, False otherwise.
        """
        cdef isspace(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isspace(int(self.ptr[0])) > 0

        for i in range(len(self)):
            if isspace(int(self.ptr[i])) == 0:
                return False
        return True

    def istitle(self: str) -> bool:
        """
        str.istitle() -> bool

        Return True if str is a titlecased string and there is at least one
        character in str, i.e. uppercase characters may only follow uncased
        characters and lowercase characters only cased ones. Return False
        otherwise.
        """
        cdef istitle(int) -> int
        cdef isupper(int) -> int
        cdef islower(int) -> int

        # For empty strings
        if len(self) == 0:
            return False

        # For single character strings
        if len(self) == 1:
            return isupper(int(self.ptr[0])) > 0

        cased = False
        prev_is_cased = False
        for i in range(len(self)):
            if isupper(int(self.ptr[i])) > 0:
                if prev_is_cased:
                    return False
                prev_is_cased = True
                cased = True
            elif islower(int(self.ptr[i])) > 0:
                if not prev_is_cased:
                    return False
                prev_is_cased = True
                cased = True
            else:
                prev_is_cased = False
        return cased

    def capitalize(self: str) -> str:
        """
        str.capitalize() -> copy of str

        Return a copy of str with only its first character capitalized (ASCII)
        and the rest lower-cased.
        """
        cdef toupper(int) -> int
        cdef tolower(int) -> int
        cdef isupper(int) -> int

        if len(self) > 0:
            # Capitalize first letter
            s = str(chr(toupper(int(self.ptr[0]))))

            # Make any following char lowercase
            for i in range(1, len(self)):
                if isupper(int(self.ptr[i])):
                    s = s + str(chr(tolower(int(self.ptr[i]))))
                else:
                    s = s + self[i]
            return s

        # Empty string
        return ''

    def isdecimal(self: str) -> bool:
        """
        str.isdecimal() -> bool

        Return True if str is a decimal string, False otherwise.
        str is a decimal string if all characters in str are decimal and
        there is at least one character in str.
        """
        # Empty string
        if len(self) == 0:
            return False

        for i in range(len(self)):
            # test ascii values 48-57 == 0-9
            if not (48 <= int(self.ptr[i]) <= 57):
                return False
        return True

    def lower(self: str) -> str:
        """
        str.lower() -> copy of str

        Return a copy of str with all ASCII characters converted to lowercase.
        """
        cdef tolower(int) -> int
        cdef isupper(int) -> int
        s = ''
        # Empty string
        if len(self) == 0:
            return s

        for i in range(len(self)):
            if isupper(int(self.ptr[i])):
                s = s + str(chr(tolower(int(self.ptr[i]))))
            else:
                s = s + str(self.ptr[i])
        return s

    def upper(self: str) -> str:
        """
        str.upper() -> copy of str

        Return a copy of str with all ASCII characters converted to uppercase.
        """
        cdef toupper(int) -> int
        cdef islower(int) -> int
        s = ''
        # Empty string
        if len(self) == 0:
            return s

        for i in range(len(self)):
            if islower(int(self.ptr[i])):
                s = s + str(chr(toupper(int(self.ptr[i]))))
            else:
                s = s + str(self.ptr[i])
        return s

    def isascii(self: str) -> bool:
        """
        str.isascii() -> bool

        Return True if str is empty or all characters in str are ASCII,
        False otherwise.
        """
        return all(int(ord(char)) < 128 for char in self)

    def casefold(self: str) -> str:
        """
        str.casefold() -> copy of str

        Return a version of the string suitable for caseless comparisons using
        the English language.
        """
        cdef tolower(int) -> int
        cdef isupper(int) -> int
        s = ''

        # Empty string
        if len(self) == 0:
            return s

        for i in range(len(self)):
            if isupper(int(self.ptr[i])):
                s = s + str(chr(tolower(int(self.ptr[i]))))
            else:
                s = s + str(self.ptr[i])
        return s

    def swapcase(self: str) -> str:
        """
        str.swapcase() -> copy of str

        Return a copy of str with uppercase ASCII characters converted
        to lowercase ASCII and vice versa.
        """
        cdef toupper(int) -> int
        cdef isupper(int) -> int
        cdef tolower(int) -> int
        cdef islower(int) -> int
        s = ''

        # Empty string
        if len(self) == 0:
            return s

        for i in range(len(self)):
            if islower(int(self.ptr[i])):
                s = s + str(chr(toupper(int(self.ptr[i]))))
            elif isupper(int(self.ptr[i])):
                s = s + str(chr(tolower(int(self.ptr[i]))))
            else:
                s = s + str(self.ptr[i])
        return s
