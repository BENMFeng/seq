import file

def dump[T](x: T, f: gzFile):
    x.__pickle__(f.fp)

def load[T](f: gzFile):
    return T.__unpickle__(f.fp)

def _pickle_error(status: int):
    raise IOError("pickle error: gzwrite returned " + str(status))

def _write_raw(jar: Jar, p: ptr[byte], n: int):
    cdef gzwrite(ptr[byte], ptr[byte], u32) -> i32
    status = int(gzwrite(jar, p, u32(n)))
    if status != n:
        _gz_errcheck(jar)
        _pickle_error(status)

def _read_raw(jar: Jar, p: ptr[byte], n: int):
    cdef gzread(ptr[byte], ptr[byte], u32) -> i32
    status = int(gzread(jar, p, u32(n)))
    if status != n:
        _gz_errcheck(jar)
        _pickle_error(status)

def _write[T](jar: Jar, x: T):
    import gc
    _write_raw(jar, ptr[byte](__ptr__(x)), gc.sizeof[T]())

def _read[T](jar: Jar):
    import gc
    cdef gzread(ptr[byte], ptr[byte], u32) -> i32
    x = T()
    _read_raw(jar, ptr[byte](__ptr__(x)), gc.sizeof[T]())
    return x

extend int:
    def __pickle__(self: int, jar: Jar):
        _write(jar, self)

    def __unpickle__(jar: Jar):
        return _read[int](jar)

extend float:
    def __pickle__(self: float, jar: Jar):
        _write(jar, self)

    def __unpickle__(jar: Jar):
        return _read[float](jar)

extend bool:
    def __pickle__(self: bool, jar: Jar):
        _write(jar, self)

    def __unpickle__(jar: Jar):
        return _read[bool](jar)

extend byte:
    def __pickle__(self: byte, jar: Jar):
        _write(jar, self)

    def __unpickle__(jar: Jar):
        return _read[byte](jar)

extend str:
    def __pickle__(self: str, jar: Jar):
        _write(jar, self.len)
        _write_raw(jar, self.ptr, self.len)

    def __unpickle__(jar: Jar):
        n = _read[int](jar)
        p = ptr[byte](n)
        _read_raw(jar, p, n)
        return str(p, n)

extend seq:
    def __pickle__(self: seq, jar: Jar):
        _write(jar, self.len)
        _write_raw(jar, self.ptr, abs(self.len))

    def __unpickle__(jar: Jar):
        n = _read[int](jar)
        m = abs(n)
        p = ptr[byte](m)
        _read_raw(jar, p, m)
        return seq(p, n)
