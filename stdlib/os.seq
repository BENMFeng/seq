def system(cmd: str) -> int:
    return _C.system(cmd.c_str())

SEEK_SET = 0
SEEK_CUR = 1
SEEK_END = 2

type EnvMap(_map: dict[str,str]):
    def __init__(self: EnvMap) -> EnvMap:
        return (dict[str,str](),)

    def _init_if_needed(self: EnvMap):
        if len(self._map) == 0:
            env = _C.seq_env()
            p = env[0]
            i = 0
            while p:
                s = str.from_ptr(p)
                if s:
                    j = 0
                    found = False
                    while j < len(s):
                        if s[j] == "=":
                            found = True
                            break
                        j += 1
                    k = s[0:j] if found else s
                    v = s[j+1:] if found else ""
                    self._map[k] = v
                i += 1
                p = env[i]

    def __getitem__(self: EnvMap, key: str):
        self._init_if_needed()
        return self._map[key]

    def __str__(self: EnvMap):
        self._init_if_needed()
        return str(self._map)

    def __contains__(self: EnvMap, key: str):
        self._init_if_needed()
        return key in self._map

    def __iter__(self: EnvMap):
        self._init_if_needed()
        return self._map.items()

environ = EnvMap()

def getenv(key: str, default: str = ""):
    return environ[key] if key in environ else default
