

def bisect_left(a, x, lo: int, hi: int) -> int:
    """
    Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.

    Default values: lo=0, high=None
    For now seq will use len(a) instead of None
    """
    # lo = 0
    # hi = len(a)
    while lo < hi:
        mid = (lo + hi) // 2
        if a[mid] < x: lo = mid+1
        else: hi = mid
    return lo

def bisect(a, x):
    lo, hi = 0, len(a)
    while lo < hi:
        mid = (lo+hi)//2
        if x < a[mid]: hi = mid
        else: lo = mid+1
    return lo
# bisect = bisect_right
