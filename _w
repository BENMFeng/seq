adding float
adding #float
adding int
adding #int
adding bool
adding #bool
adding byte
adding #byte
adding void
adding #void
adding ptr
adding #ptr
adding generator
adding #generator
adding optional
adding #optional
adding tuple
adding #tuple
adding function
adding #function
{ ((#type str :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id byte)))  :attrs (internal) ((#fun __str__ :ret (#id str) :args (self :typ (#id str)) ((#return (#id self))))
  (#fun memcpy :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass))
  (#fun memmove :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass))
  (#fun memset :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (b :typ (#id byte)) (len :typ (#id int)) (#pass))))
  (#extend (#id bool) ((#fun __new__ :ret (#id bool) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id bool)) (#pass))
  (#fun __copy__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __invert__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __and__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __or__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __xor__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))))
  (#extend (#id byte) ((#fun __new__ :ret (#id byte) (#pass))
  (#fun __new__ :ret (#id byte) :args (b :typ (#id byte)) (#pass))
  (#fun __new__ :ret (#id byte) :args (i :typ (#id int)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id byte)) (#pass))
  (#fun __copy__ :ret (#id byte) :args (self :typ (#id byte)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id byte)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))))
  (#extend (#id int) ((#fun __new__ :ret (#id int) (#pass))
  (#fun __new__ :ret (#id int) :args (i :typ (#id int)) (#pass))
  (#fun __new__ :ret (#id int) :args (f :typ (#id float)) (#pass))
  (#fun __new__ :ret (#id int) :args (b :typ (#id bool)) (#pass))
  (#fun __new__ :ret (#id int) :args (b :typ (#id byte)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id int)) (#pass))
  (#fun __copy__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __hash__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id int)) (#pass))
  (#fun __pos__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __neg__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __invert__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __abs__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __add__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __sub__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __mul__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __div__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __mod__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __lshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __rshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __and__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __or__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __xor__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))))
  (#extend (#id float) ((#fun __new__ :ret (#id float) (#pass))
  (#fun __new__ :ret (#id float) :args (f :typ (#id float)) (#pass))
  (#fun __new__ :ret (#id float) :args (i :typ (#id int)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id float)) (#pass))
  (#fun __copy__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id float)) (#pass))
  (#fun __pos__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __neg__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __abs__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))))
  (#extend (#index (#id optional) (#id T)) ((#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id optional) (#id T))) (#pass))
  (#fun __invert__ :ret (#id T) :args (self :typ (#index (#id optional) (#id T))) (#pass))))
  (#extend (#index (#id generator) (#id T)) ((#fun __iter__ :ret (#index (#id generator) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __raw__ :ret (#index (#id ptr) (#id byte)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __done__ :ret (#id bool) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __promise__ :ret (#index (#id ptr) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __resume__ :ret (#id void) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#index (#id generator) (#id T))) (#pass))))
  (#type array :gen (T) :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id T)))  :attrs (internal) ((#fun __elemsize__ :ret (#id int) (#pass))
  (#fun __atomic__ :ret (#id bool) (#pass))
  (#fun __new__ :ret (#index (#id array) (#id T)) :args (len :typ (#id int)) (#pass))
  (#fun __new__ :ret (#index (#id array) (#id T)) :args (data :typ (#index (#id ptr) (#id T))) (len :typ (#id int)) (#pass))
  (#fun __copy__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __len__ :ret (#id int) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __getitem__ :ret (#id T) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (#pass))
  (#fun __slice__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (r :typ (#id int)) (#pass))
  (#fun __slice_left__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (r :typ (#id int)) (#pass))
  (#fun __slice_right__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (#pass))
  (#fun __setitem__ :ret (#id void) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (what :typ (#id T)) (#pass))))
  (#type seq :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id byte)))  :attrs (internal) ((#fun __new__ :ret (#id seq) :args (s :typ (#id str)) ((#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr)))))))
  (#class list :gen (T) :args (arr :typ (#index (#id array) (#id T))) (len :typ (#id int))  ((#fun __init__ :args (self :typ (#index (#id list) (#id T))) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T))))
  (#assign (#dot (#id self) len) (#int 0))))
  (#fun __init__ :args (self :typ (#index (#id list) (#id T))) (sz :typ (#id int)) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T)) (#id sz)))
  (#assign (#dot (#id self) len) (#int 0))))
  (#fun append :args (self :typ (#index (#id list) (#id T))) (i :typ (#id T)) ((#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i))
  (#assign (#dot (#id self) len) (#int 1))))
  (#fun __str__ :args (self :typ (#index (#id list) (#id T))) ((#return (#call (#dot (#id len) __str__)))))
  (#fun __iter__ :args (self :typ (#index (#id list) (#id T))) ((#for (#id i) (#dot (#id self) arr) ((#yield (#id i))))))))
  (#import core/aliases :what *)) ## 0
  { (#type str :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id byte)))  :attrs (internal) ((#fun __str__ :ret (#id str) :args (self :typ (#id str)) ((#return (#id self))))
  (#fun memcpy :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass))
  (#fun memmove :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass))
  (#fun memset :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (b :typ (#id byte)) (len :typ (#id int)) (#pass)))) ## 1
    * [class] str :- str
    [ (#id int) :- - # 2
      (#id int) :- int ]
    [ (#index (#id ptr) (#id byte)) :- - # 2
      [ (#id ptr) :- - # 2
        UNBOUND 3 ADDED # 2 
        (#id ptr) :- ptr[?3] ]
      [ (#id byte) :- - # 2
        (#id byte) :- byte ]
      (#typeof (#id ptr)) :- ptr[byte] ]
    >> realized ptr[byte]
    adding str
    { (#fun __str__ :ret (#id str) :args (self :typ (#id str)) ((#return (#id self)))) ## 3
      [ (#id str) :- - # 3
        (#id str) :- str ]
      >> realized str
      [ (#id str) :- - # 3
        (#id str) :- str ]
      * [function] str.__str__ :- function[,str,str]
      adding str.__str__
      <> (#fun str.__str__ (#pass)) }
    { (#fun memcpy :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass)) ## 5
      [ (#id void) :- - # 5
        (#id void) :- void ]
      [ (#index (#id ptr) (#id byte)) :- - # 5
        [ (#id ptr) :- - # 5
          UNBOUND 4 ADDED # 5 
          (#id ptr) :- ptr[?4] ]
        [ (#id byte) :- - # 5
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#index (#id ptr) (#id byte)) :- - # 5
        [ (#id ptr) :- - # 5
          UNBOUND 5 ADDED # 5 
          (#id ptr) :- ptr[?5] ]
        [ (#id byte) :- - # 5
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#id int) :- - # 5
        (#id int) :- int ]
      * [function] str.memcpy :- function[,void,ptr[byte],ptr[byte],int]
      adding str.memcpy
      <> (#fun str.memcpy (#pass)) }
    { (#fun memmove :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (src :typ (#index (#id ptr) (#id byte))) (len :typ (#id int)) (#pass)) ## 6
      [ (#id void) :- - # 6
        (#id void) :- void ]
      [ (#index (#id ptr) (#id byte)) :- - # 6
        [ (#id ptr) :- - # 6
          UNBOUND 6 ADDED # 6 
          (#id ptr) :- ptr[?6] ]
        [ (#id byte) :- - # 6
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#index (#id ptr) (#id byte)) :- - # 6
        [ (#id ptr) :- - # 6
          UNBOUND 7 ADDED # 6 
          (#id ptr) :- ptr[?7] ]
        [ (#id byte) :- - # 6
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#id int) :- - # 6
        (#id int) :- int ]
      * [function] str.memmove :- function[,void,ptr[byte],ptr[byte],int]
      adding str.memmove
      <> (#fun str.memmove (#pass)) }
    { (#fun memset :ret (#id void) :args (dest :typ (#index (#id ptr) (#id byte))) (b :typ (#id byte)) (len :typ (#id int)) (#pass)) ## 7
      [ (#id void) :- - # 7
        (#id void) :- void ]
      [ (#index (#id ptr) (#id byte)) :- - # 7
        [ (#id ptr) :- - # 7
          UNBOUND 8 ADDED # 7 
          (#id ptr) :- ptr[?8] ]
        [ (#id byte) :- - # 7
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#id byte) :- - # 7
        (#id byte) :- byte ]
      [ (#id int) :- - # 7
        (#id int) :- int ]
      * [function] str.memset :- function[,void,ptr[byte],byte,int]
      adding str.memset
      <> (#fun str.memset (#pass)) }
    <> (#type str  :attrs (internal) ()) }
  { (#extend (#id bool) ((#fun __new__ :ret (#id bool) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id bool)) (#pass))
  (#fun __copy__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __invert__ :ret (#id bool) :args (self :typ (#id bool)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __and__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __or__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass))
  (#fun __xor__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)))) ## 9
    [ (#id bool) :- - # 9
      (#id bool) :- bool ]
    { (#fun __new__ :ret (#id bool) (#pass)) ## 10
      [ (#id bool) :- - # 10
        (#id bool) :- bool ]
      * [function] bool.__new__ :- function[,bool]
      adding bool.__new__
      <> (#fun bool.__new__ (#pass)) }
    { (#fun __str__ :ret (#id str) :args (self :typ (#id bool)) (#pass)) ## 11
      [ (#id str) :- - # 11
        (#id str) :- str ]
      [ (#id bool) :- - # 11
        (#id bool) :- bool ]
      * [function] bool.__str__ :- function[,str,bool]
      adding bool.__str__
      <> (#fun bool.__str__ (#pass)) }
    { (#fun __copy__ :ret (#id bool) :args (self :typ (#id bool)) (#pass)) ## 12
      [ (#id bool) :- - # 12
        (#id bool) :- bool ]
      [ (#id bool) :- - # 12
        (#id bool) :- bool ]
      * [function] bool.__copy__ :- function[,bool,bool]
      adding bool.__copy__
      <> (#fun bool.__copy__ (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#id bool)) (#pass)) ## 13
      [ (#id bool) :- - # 13
        (#id bool) :- bool ]
      [ (#id bool) :- - # 13
        (#id bool) :- bool ]
      * [function] bool.__bool__ :- function[,bool,bool]
      adding bool.__bool__
      <> (#fun bool.__bool__ (#pass)) }
    { (#fun __invert__ :ret (#id bool) :args (self :typ (#id bool)) (#pass)) ## 14
      [ (#id bool) :- - # 14
        (#id bool) :- bool ]
      [ (#id bool) :- - # 14
        (#id bool) :- bool ]
      * [function] bool.__invert__ :- function[,bool,bool]
      adding bool.__invert__
      <> (#fun bool.__invert__ (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 15
      [ (#id bool) :- - # 15
        (#id bool) :- bool ]
      [ (#id bool) :- - # 15
        (#id bool) :- bool ]
      [ (#id bool) :- - # 15
        (#id bool) :- bool ]
      * [function] bool.__eq__ :- function[,bool,bool,bool]
      adding bool.__eq__
      <> (#fun bool.__eq__ (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 16
      [ (#id bool) :- - # 16
        (#id bool) :- bool ]
      [ (#id bool) :- - # 16
        (#id bool) :- bool ]
      [ (#id bool) :- - # 16
        (#id bool) :- bool ]
      * [function] bool.__ne__ :- function[,bool,bool,bool]
      adding bool.__ne__
      <> (#fun bool.__ne__ (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 17
      [ (#id bool) :- - # 17
        (#id bool) :- bool ]
      [ (#id bool) :- - # 17
        (#id bool) :- bool ]
      [ (#id bool) :- - # 17
        (#id bool) :- bool ]
      * [function] bool.__lt__ :- function[,bool,bool,bool]
      adding bool.__lt__
      <> (#fun bool.__lt__ (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 18
      [ (#id bool) :- - # 18
        (#id bool) :- bool ]
      [ (#id bool) :- - # 18
        (#id bool) :- bool ]
      [ (#id bool) :- - # 18
        (#id bool) :- bool ]
      * [function] bool.__gt__ :- function[,bool,bool,bool]
      adding bool.__gt__
      <> (#fun bool.__gt__ (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 19
      [ (#id bool) :- - # 19
        (#id bool) :- bool ]
      [ (#id bool) :- - # 19
        (#id bool) :- bool ]
      [ (#id bool) :- - # 19
        (#id bool) :- bool ]
      * [function] bool.__le__ :- function[,bool,bool,bool]
      adding bool.__le__
      <> (#fun bool.__le__ (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 20
      [ (#id bool) :- - # 20
        (#id bool) :- bool ]
      [ (#id bool) :- - # 20
        (#id bool) :- bool ]
      [ (#id bool) :- - # 20
        (#id bool) :- bool ]
      * [function] bool.__ge__ :- function[,bool,bool,bool]
      adding bool.__ge__
      <> (#fun bool.__ge__ (#pass)) }
    { (#fun __and__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 21
      [ (#id bool) :- - # 21
        (#id bool) :- bool ]
      [ (#id bool) :- - # 21
        (#id bool) :- bool ]
      [ (#id bool) :- - # 21
        (#id bool) :- bool ]
      * [function] bool.__and__ :- function[,bool,bool,bool]
      adding bool.__and__
      <> (#fun bool.__and__ (#pass)) }
    { (#fun __or__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 22
      [ (#id bool) :- - # 22
        (#id bool) :- bool ]
      [ (#id bool) :- - # 22
        (#id bool) :- bool ]
      [ (#id bool) :- - # 22
        (#id bool) :- bool ]
      * [function] bool.__or__ :- function[,bool,bool,bool]
      adding bool.__or__
      <> (#fun bool.__or__ (#pass)) }
    { (#fun __xor__ :ret (#id bool) :args (self :typ (#id bool)) (other :typ (#id bool)) (#pass)) ## 23
      [ (#id bool) :- - # 23
        (#id bool) :- bool ]
      [ (#id bool) :- - # 23
        (#id bool) :- bool ]
      [ (#id bool) :- - # 23
        (#id bool) :- bool ]
      * [function] bool.__xor__ :- function[,bool,bool,bool]
      adding bool.__xor__
      <> (#fun bool.__xor__ (#pass)) }
    <> #pass }
  { (#extend (#id byte) ((#fun __new__ :ret (#id byte) (#pass))
  (#fun __new__ :ret (#id byte) :args (b :typ (#id byte)) (#pass))
  (#fun __new__ :ret (#id byte) :args (i :typ (#id int)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id byte)) (#pass))
  (#fun __copy__ :ret (#id byte) :args (self :typ (#id byte)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id byte)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)))) ## 25
    [ (#id byte) :- - # 25
      (#id byte) :- byte ]
    { (#fun __new__ :ret (#id byte) (#pass)) ## 26
      [ (#id byte) :- - # 26
        (#id byte) :- byte ]
      * [function] byte.__new__ :- function[,byte]
      adding byte.__new__
      <> (#fun byte.__new__ (#pass)) }
    { (#fun __new__ :ret (#id byte) :args (b :typ (#id byte)) (#pass)) ## 27
      [ (#id byte) :- - # 27
        (#id byte) :- byte ]
      [ (#id byte) :- - # 27
        (#id byte) :- byte ]
      * [function] byte.__new__.1 :- function[,byte,byte]
      adding byte.__new__
      <> (#fun byte.__new__.1 (#pass)) }
    { (#fun __new__ :ret (#id byte) :args (i :typ (#id int)) (#pass)) ## 28
      [ (#id byte) :- - # 28
        (#id byte) :- byte ]
      [ (#id int) :- - # 28
        (#id int) :- int ]
      * [function] byte.__new__.2 :- function[,byte,int]
      adding byte.__new__
      <> (#fun byte.__new__.2 (#pass)) }
    { (#fun __str__ :ret (#id str) :args (self :typ (#id byte)) (#pass)) ## 29
      [ (#id str) :- - # 29
        (#id str) :- str ]
      [ (#id byte) :- - # 29
        (#id byte) :- byte ]
      * [function] byte.__str__ :- function[,str,byte]
      adding byte.__str__
      <> (#fun byte.__str__ (#pass)) }
    { (#fun __copy__ :ret (#id byte) :args (self :typ (#id byte)) (#pass)) ## 30
      [ (#id byte) :- - # 30
        (#id byte) :- byte ]
      [ (#id byte) :- - # 30
        (#id byte) :- byte ]
      * [function] byte.__copy__ :- function[,byte,byte]
      adding byte.__copy__
      <> (#fun byte.__copy__ (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#id byte)) (#pass)) ## 31
      [ (#id bool) :- - # 31
        (#id bool) :- bool ]
      [ (#id byte) :- - # 31
        (#id byte) :- byte ]
      * [function] byte.__bool__ :- function[,bool,byte]
      adding byte.__bool__
      <> (#fun byte.__bool__ (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 32
      [ (#id bool) :- - # 32
        (#id bool) :- bool ]
      [ (#id byte) :- - # 32
        (#id byte) :- byte ]
      [ (#id byte) :- - # 32
        (#id byte) :- byte ]
      * [function] byte.__eq__ :- function[,bool,byte,byte]
      adding byte.__eq__
      <> (#fun byte.__eq__ (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 33
      [ (#id bool) :- - # 33
        (#id bool) :- bool ]
      [ (#id byte) :- - # 33
        (#id byte) :- byte ]
      [ (#id byte) :- - # 33
        (#id byte) :- byte ]
      * [function] byte.__ne__ :- function[,bool,byte,byte]
      adding byte.__ne__
      <> (#fun byte.__ne__ (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 34
      [ (#id bool) :- - # 34
        (#id bool) :- bool ]
      [ (#id byte) :- - # 34
        (#id byte) :- byte ]
      [ (#id byte) :- - # 34
        (#id byte) :- byte ]
      * [function] byte.__lt__ :- function[,bool,byte,byte]
      adding byte.__lt__
      <> (#fun byte.__lt__ (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 35
      [ (#id bool) :- - # 35
        (#id bool) :- bool ]
      [ (#id byte) :- - # 35
        (#id byte) :- byte ]
      [ (#id byte) :- - # 35
        (#id byte) :- byte ]
      * [function] byte.__gt__ :- function[,bool,byte,byte]
      adding byte.__gt__
      <> (#fun byte.__gt__ (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 36
      [ (#id bool) :- - # 36
        (#id bool) :- bool ]
      [ (#id byte) :- - # 36
        (#id byte) :- byte ]
      [ (#id byte) :- - # 36
        (#id byte) :- byte ]
      * [function] byte.__le__ :- function[,bool,byte,byte]
      adding byte.__le__
      <> (#fun byte.__le__ (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id byte)) (other :typ (#id byte)) (#pass)) ## 37
      [ (#id bool) :- - # 37
        (#id bool) :- bool ]
      [ (#id byte) :- - # 37
        (#id byte) :- byte ]
      [ (#id byte) :- - # 37
        (#id byte) :- byte ]
      * [function] byte.__ge__ :- function[,bool,byte,byte]
      adding byte.__ge__
      <> (#fun byte.__ge__ (#pass)) }
    <> #pass }
  { (#extend (#id int) ((#fun __new__ :ret (#id int) (#pass))
  (#fun __new__ :ret (#id int) :args (i :typ (#id int)) (#pass))
  (#fun __new__ :ret (#id int) :args (f :typ (#id float)) (#pass))
  (#fun __new__ :ret (#id int) :args (b :typ (#id bool)) (#pass))
  (#fun __new__ :ret (#id int) :args (b :typ (#id byte)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id int)) (#pass))
  (#fun __copy__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __hash__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id int)) (#pass))
  (#fun __pos__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __neg__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __invert__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __abs__ :ret (#id int) :args (self :typ (#id int)) (#pass))
  (#fun __add__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __sub__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __mul__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __div__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __mod__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __lshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __rshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __and__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __or__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __xor__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)))) ## 39
    [ (#id int) :- - # 39
      (#id int) :- int ]
    { (#fun __new__ :ret (#id int) (#pass)) ## 40
      [ (#id int) :- - # 40
        (#id int) :- int ]
      * [function] int.__new__ :- function[,int]
      adding int.__new__
      <> (#fun int.__new__ (#pass)) }
    { (#fun __new__ :ret (#id int) :args (i :typ (#id int)) (#pass)) ## 41
      [ (#id int) :- - # 41
        (#id int) :- int ]
      [ (#id int) :- - # 41
        (#id int) :- int ]
      * [function] int.__new__.1 :- function[,int,int]
      adding int.__new__
      <> (#fun int.__new__.1 (#pass)) }
    { (#fun __new__ :ret (#id int) :args (f :typ (#id float)) (#pass)) ## 42
      [ (#id int) :- - # 42
        (#id int) :- int ]
      [ (#id float) :- - # 42
        (#id float) :- float ]
      * [function] int.__new__.2 :- function[,int,float]
      adding int.__new__
      <> (#fun int.__new__.2 (#pass)) }
    { (#fun __new__ :ret (#id int) :args (b :typ (#id bool)) (#pass)) ## 43
      [ (#id int) :- - # 43
        (#id int) :- int ]
      [ (#id bool) :- - # 43
        (#id bool) :- bool ]
      * [function] int.__new__.3 :- function[,int,bool]
      adding int.__new__
      <> (#fun int.__new__.3 (#pass)) }
    { (#fun __new__ :ret (#id int) :args (b :typ (#id byte)) (#pass)) ## 44
      [ (#id int) :- - # 44
        (#id int) :- int ]
      [ (#id byte) :- - # 44
        (#id byte) :- byte ]
      * [function] int.__new__.4 :- function[,int,byte]
      adding int.__new__
      <> (#fun int.__new__.4 (#pass)) }
    { (#fun __str__ :ret (#id str) :args (self :typ (#id int)) (#pass)) ## 45
      [ (#id str) :- - # 45
        (#id str) :- str ]
      [ (#id int) :- - # 45
        (#id int) :- int ]
      * [function] int.__str__ :- function[,str,int]
      adding int.__str__
      <> (#fun int.__str__ (#pass)) }
    { (#fun __copy__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 46
      [ (#id int) :- - # 46
        (#id int) :- int ]
      [ (#id int) :- - # 46
        (#id int) :- int ]
      * [function] int.__copy__ :- function[,int,int]
      adding int.__copy__
      <> (#fun int.__copy__ (#pass)) }
    { (#fun __hash__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 47
      [ (#id int) :- - # 47
        (#id int) :- int ]
      [ (#id int) :- - # 47
        (#id int) :- int ]
      * [function] int.__hash__ :- function[,int,int]
      adding int.__hash__
      <> (#fun int.__hash__ (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#id int)) (#pass)) ## 48
      [ (#id bool) :- - # 48
        (#id bool) :- bool ]
      [ (#id int) :- - # 48
        (#id int) :- int ]
      * [function] int.__bool__ :- function[,bool,int]
      adding int.__bool__
      <> (#fun int.__bool__ (#pass)) }
    { (#fun __pos__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 49
      [ (#id int) :- - # 49
        (#id int) :- int ]
      [ (#id int) :- - # 49
        (#id int) :- int ]
      * [function] int.__pos__ :- function[,int,int]
      adding int.__pos__
      <> (#fun int.__pos__ (#pass)) }
    { (#fun __neg__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 50
      [ (#id int) :- - # 50
        (#id int) :- int ]
      [ (#id int) :- - # 50
        (#id int) :- int ]
      * [function] int.__neg__ :- function[,int,int]
      adding int.__neg__
      <> (#fun int.__neg__ (#pass)) }
    { (#fun __invert__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 51
      [ (#id int) :- - # 51
        (#id int) :- int ]
      [ (#id int) :- - # 51
        (#id int) :- int ]
      * [function] int.__invert__ :- function[,int,int]
      adding int.__invert__
      <> (#fun int.__invert__ (#pass)) }
    { (#fun __abs__ :ret (#id int) :args (self :typ (#id int)) (#pass)) ## 52
      [ (#id int) :- - # 52
        (#id int) :- int ]
      [ (#id int) :- - # 52
        (#id int) :- int ]
      * [function] int.__abs__ :- function[,int,int]
      adding int.__abs__
      <> (#fun int.__abs__ (#pass)) }
    { (#fun __add__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 53
      [ (#id int) :- - # 53
        (#id int) :- int ]
      [ (#id int) :- - # 53
        (#id int) :- int ]
      [ (#id int) :- - # 53
        (#id int) :- int ]
      * [function] int.__add__ :- function[,int,int,int]
      adding int.__add__
      <> (#fun int.__add__ (#pass)) }
    { (#fun __sub__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 54
      [ (#id int) :- - # 54
        (#id int) :- int ]
      [ (#id int) :- - # 54
        (#id int) :- int ]
      [ (#id int) :- - # 54
        (#id int) :- int ]
      * [function] int.__sub__ :- function[,int,int,int]
      adding int.__sub__
      <> (#fun int.__sub__ (#pass)) }
    { (#fun __mul__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 55
      [ (#id int) :- - # 55
        (#id int) :- int ]
      [ (#id int) :- - # 55
        (#id int) :- int ]
      [ (#id int) :- - # 55
        (#id int) :- int ]
      * [function] int.__mul__ :- function[,int,int,int]
      adding int.__mul__
      <> (#fun int.__mul__ (#pass)) }
    { (#fun __div__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 56
      [ (#id int) :- - # 56
        (#id int) :- int ]
      [ (#id int) :- - # 56
        (#id int) :- int ]
      [ (#id int) :- - # 56
        (#id int) :- int ]
      * [function] int.__div__ :- function[,int,int,int]
      adding int.__div__
      <> (#fun int.__div__ (#pass)) }
    { (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 57
      [ (#id float) :- - # 57
        (#id float) :- float ]
      [ (#id int) :- - # 57
        (#id int) :- int ]
      [ (#id int) :- - # 57
        (#id int) :- int ]
      * [function] int.__truediv__ :- function[,float,int,int]
      adding int.__truediv__
      <> (#fun int.__truediv__ (#pass)) }
    { (#fun __mod__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 58
      [ (#id int) :- - # 58
        (#id int) :- int ]
      [ (#id int) :- - # 58
        (#id int) :- int ]
      [ (#id int) :- - # 58
        (#id int) :- int ]
      * [function] int.__mod__ :- function[,int,int,int]
      adding int.__mod__
      <> (#fun int.__mod__ (#pass)) }
    { (#fun __lshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 59
      [ (#id int) :- - # 59
        (#id int) :- int ]
      [ (#id int) :- - # 59
        (#id int) :- int ]
      [ (#id int) :- - # 59
        (#id int) :- int ]
      * [function] int.__lshift__ :- function[,int,int,int]
      adding int.__lshift__
      <> (#fun int.__lshift__ (#pass)) }
    { (#fun __rshift__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 60
      [ (#id int) :- - # 60
        (#id int) :- int ]
      [ (#id int) :- - # 60
        (#id int) :- int ]
      [ (#id int) :- - # 60
        (#id int) :- int ]
      * [function] int.__rshift__ :- function[,int,int,int]
      adding int.__rshift__
      <> (#fun int.__rshift__ (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 61
      [ (#id bool) :- - # 61
        (#id bool) :- bool ]
      [ (#id int) :- - # 61
        (#id int) :- int ]
      [ (#id int) :- - # 61
        (#id int) :- int ]
      * [function] int.__eq__ :- function[,bool,int,int]
      adding int.__eq__
      <> (#fun int.__eq__ (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 62
      [ (#id bool) :- - # 62
        (#id bool) :- bool ]
      [ (#id int) :- - # 62
        (#id int) :- int ]
      [ (#id int) :- - # 62
        (#id int) :- int ]
      * [function] int.__ne__ :- function[,bool,int,int]
      adding int.__ne__
      <> (#fun int.__ne__ (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 63
      [ (#id bool) :- - # 63
        (#id bool) :- bool ]
      [ (#id int) :- - # 63
        (#id int) :- int ]
      [ (#id int) :- - # 63
        (#id int) :- int ]
      * [function] int.__lt__ :- function[,bool,int,int]
      adding int.__lt__
      <> (#fun int.__lt__ (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 64
      [ (#id bool) :- - # 64
        (#id bool) :- bool ]
      [ (#id int) :- - # 64
        (#id int) :- int ]
      [ (#id int) :- - # 64
        (#id int) :- int ]
      * [function] int.__gt__ :- function[,bool,int,int]
      adding int.__gt__
      <> (#fun int.__gt__ (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 65
      [ (#id bool) :- - # 65
        (#id bool) :- bool ]
      [ (#id int) :- - # 65
        (#id int) :- int ]
      [ (#id int) :- - # 65
        (#id int) :- int ]
      * [function] int.__le__ :- function[,bool,int,int]
      adding int.__le__
      <> (#fun int.__le__ (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 66
      [ (#id bool) :- - # 66
        (#id bool) :- bool ]
      [ (#id int) :- - # 66
        (#id int) :- int ]
      [ (#id int) :- - # 66
        (#id int) :- int ]
      * [function] int.__ge__ :- function[,bool,int,int]
      adding int.__ge__
      <> (#fun int.__ge__ (#pass)) }
    { (#fun __and__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 67
      [ (#id int) :- - # 67
        (#id int) :- int ]
      [ (#id int) :- - # 67
        (#id int) :- int ]
      [ (#id int) :- - # 67
        (#id int) :- int ]
      * [function] int.__and__ :- function[,int,int,int]
      adding int.__and__
      <> (#fun int.__and__ (#pass)) }
    { (#fun __or__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 68
      [ (#id int) :- - # 68
        (#id int) :- int ]
      [ (#id int) :- - # 68
        (#id int) :- int ]
      [ (#id int) :- - # 68
        (#id int) :- int ]
      * [function] int.__or__ :- function[,int,int,int]
      adding int.__or__
      <> (#fun int.__or__ (#pass)) }
    { (#fun __xor__ :ret (#id int) :args (self :typ (#id int)) (other :typ (#id int)) (#pass)) ## 69
      [ (#id int) :- - # 69
        (#id int) :- int ]
      [ (#id int) :- - # 69
        (#id int) :- int ]
      [ (#id int) :- - # 69
        (#id int) :- int ]
      * [function] int.__xor__ :- function[,int,int,int]
      adding int.__xor__
      <> (#fun int.__xor__ (#pass)) }
    { (#fun __add__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 70
      [ (#id float) :- - # 70
        (#id float) :- float ]
      [ (#id int) :- - # 70
        (#id int) :- int ]
      [ (#id float) :- - # 70
        (#id float) :- float ]
      * [function] int.__add__.1 :- function[,float,int,float]
      adding int.__add__
      <> (#fun int.__add__.1 (#pass)) }
    { (#fun __sub__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 71
      [ (#id float) :- - # 71
        (#id float) :- float ]
      [ (#id int) :- - # 71
        (#id int) :- int ]
      [ (#id float) :- - # 71
        (#id float) :- float ]
      * [function] int.__sub__.1 :- function[,float,int,float]
      adding int.__sub__
      <> (#fun int.__sub__.1 (#pass)) }
    { (#fun __mul__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 72
      [ (#id float) :- - # 72
        (#id float) :- float ]
      [ (#id int) :- - # 72
        (#id int) :- int ]
      [ (#id float) :- - # 72
        (#id float) :- float ]
      * [function] int.__mul__.1 :- function[,float,int,float]
      adding int.__mul__
      <> (#fun int.__mul__.1 (#pass)) }
    { (#fun __div__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 73
      [ (#id float) :- - # 73
        (#id float) :- float ]
      [ (#id int) :- - # 73
        (#id int) :- int ]
      [ (#id float) :- - # 73
        (#id float) :- float ]
      * [function] int.__div__.1 :- function[,float,int,float]
      adding int.__div__
      <> (#fun int.__div__.1 (#pass)) }
    { (#fun __truediv__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 74
      [ (#id float) :- - # 74
        (#id float) :- float ]
      [ (#id int) :- - # 74
        (#id int) :- int ]
      [ (#id float) :- - # 74
        (#id float) :- float ]
      * [function] int.__truediv__.1 :- function[,float,int,float]
      adding int.__truediv__
      <> (#fun int.__truediv__.1 (#pass)) }
    { (#fun __mod__ :ret (#id float) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 75
      [ (#id float) :- - # 75
        (#id float) :- float ]
      [ (#id int) :- - # 75
        (#id int) :- int ]
      [ (#id float) :- - # 75
        (#id float) :- float ]
      * [function] int.__mod__.1 :- function[,float,int,float]
      adding int.__mod__
      <> (#fun int.__mod__.1 (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 76
      [ (#id bool) :- - # 76
        (#id bool) :- bool ]
      [ (#id int) :- - # 76
        (#id int) :- int ]
      [ (#id float) :- - # 76
        (#id float) :- float ]
      * [function] int.__eq__.1 :- function[,bool,int,float]
      adding int.__eq__
      <> (#fun int.__eq__.1 (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 77
      [ (#id bool) :- - # 77
        (#id bool) :- bool ]
      [ (#id int) :- - # 77
        (#id int) :- int ]
      [ (#id float) :- - # 77
        (#id float) :- float ]
      * [function] int.__ne__.1 :- function[,bool,int,float]
      adding int.__ne__
      <> (#fun int.__ne__.1 (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 78
      [ (#id bool) :- - # 78
        (#id bool) :- bool ]
      [ (#id int) :- - # 78
        (#id int) :- int ]
      [ (#id float) :- - # 78
        (#id float) :- float ]
      * [function] int.__lt__.1 :- function[,bool,int,float]
      adding int.__lt__
      <> (#fun int.__lt__.1 (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 79
      [ (#id bool) :- - # 79
        (#id bool) :- bool ]
      [ (#id int) :- - # 79
        (#id int) :- int ]
      [ (#id float) :- - # 79
        (#id float) :- float ]
      * [function] int.__gt__.1 :- function[,bool,int,float]
      adding int.__gt__
      <> (#fun int.__gt__.1 (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 80
      [ (#id bool) :- - # 80
        (#id bool) :- bool ]
      [ (#id int) :- - # 80
        (#id int) :- int ]
      [ (#id float) :- - # 80
        (#id float) :- float ]
      * [function] int.__le__.1 :- function[,bool,int,float]
      adding int.__le__
      <> (#fun int.__le__.1 (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id int)) (other :typ (#id float)) (#pass)) ## 81
      [ (#id bool) :- - # 81
        (#id bool) :- bool ]
      [ (#id int) :- - # 81
        (#id int) :- int ]
      [ (#id float) :- - # 81
        (#id float) :- float ]
      * [function] int.__ge__.1 :- function[,bool,int,float]
      adding int.__ge__
      <> (#fun int.__ge__.1 (#pass)) }
    <> #pass }
  { (#extend (#id float) ((#fun __new__ :ret (#id float) (#pass))
  (#fun __new__ :ret (#id float) :args (f :typ (#id float)) (#pass))
  (#fun __new__ :ret (#id float) :args (i :typ (#id int)) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#id float)) (#pass))
  (#fun __copy__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#id float)) (#pass))
  (#fun __pos__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __neg__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __abs__ :ret (#id float) :args (self :typ (#id float)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass))
  (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass))
  (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)))) ## 83
    [ (#id float) :- - # 83
      (#id float) :- float ]
    { (#fun __new__ :ret (#id float) (#pass)) ## 84
      [ (#id float) :- - # 84
        (#id float) :- float ]
      * [function] float.__new__ :- function[,float]
      adding float.__new__
      <> (#fun float.__new__ (#pass)) }
    { (#fun __new__ :ret (#id float) :args (f :typ (#id float)) (#pass)) ## 85
      [ (#id float) :- - # 85
        (#id float) :- float ]
      [ (#id float) :- - # 85
        (#id float) :- float ]
      * [function] float.__new__.1 :- function[,float,float]
      adding float.__new__
      <> (#fun float.__new__.1 (#pass)) }
    { (#fun __new__ :ret (#id float) :args (i :typ (#id int)) (#pass)) ## 86
      [ (#id float) :- - # 86
        (#id float) :- float ]
      [ (#id int) :- - # 86
        (#id int) :- int ]
      * [function] float.__new__.2 :- function[,float,int]
      adding float.__new__
      <> (#fun float.__new__.2 (#pass)) }
    { (#fun __str__ :ret (#id str) :args (self :typ (#id float)) (#pass)) ## 87
      [ (#id str) :- - # 87
        (#id str) :- str ]
      [ (#id float) :- - # 87
        (#id float) :- float ]
      * [function] float.__str__ :- function[,str,float]
      adding float.__str__
      <> (#fun float.__str__ (#pass)) }
    { (#fun __copy__ :ret (#id float) :args (self :typ (#id float)) (#pass)) ## 88
      [ (#id float) :- - # 88
        (#id float) :- float ]
      [ (#id float) :- - # 88
        (#id float) :- float ]
      * [function] float.__copy__ :- function[,float,float]
      adding float.__copy__
      <> (#fun float.__copy__ (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#id float)) (#pass)) ## 89
      [ (#id bool) :- - # 89
        (#id bool) :- bool ]
      [ (#id float) :- - # 89
        (#id float) :- float ]
      * [function] float.__bool__ :- function[,bool,float]
      adding float.__bool__
      <> (#fun float.__bool__ (#pass)) }
    { (#fun __pos__ :ret (#id float) :args (self :typ (#id float)) (#pass)) ## 90
      [ (#id float) :- - # 90
        (#id float) :- float ]
      [ (#id float) :- - # 90
        (#id float) :- float ]
      * [function] float.__pos__ :- function[,float,float]
      adding float.__pos__
      <> (#fun float.__pos__ (#pass)) }
    { (#fun __neg__ :ret (#id float) :args (self :typ (#id float)) (#pass)) ## 91
      [ (#id float) :- - # 91
        (#id float) :- float ]
      [ (#id float) :- - # 91
        (#id float) :- float ]
      * [function] float.__neg__ :- function[,float,float]
      adding float.__neg__
      <> (#fun float.__neg__ (#pass)) }
    { (#fun __abs__ :ret (#id float) :args (self :typ (#id float)) (#pass)) ## 92
      [ (#id float) :- - # 92
        (#id float) :- float ]
      [ (#id float) :- - # 92
        (#id float) :- float ]
      * [function] float.__abs__ :- function[,float,float]
      adding float.__abs__
      <> (#fun float.__abs__ (#pass)) }
    { (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 93
      [ (#id float) :- - # 93
        (#id float) :- float ]
      [ (#id float) :- - # 93
        (#id float) :- float ]
      [ (#id float) :- - # 93
        (#id float) :- float ]
      * [function] float.__add__ :- function[,float,float,float]
      adding float.__add__
      <> (#fun float.__add__ (#pass)) }
    { (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 94
      [ (#id float) :- - # 94
        (#id float) :- float ]
      [ (#id float) :- - # 94
        (#id float) :- float ]
      [ (#id float) :- - # 94
        (#id float) :- float ]
      * [function] float.__sub__ :- function[,float,float,float]
      adding float.__sub__
      <> (#fun float.__sub__ (#pass)) }
    { (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 95
      [ (#id float) :- - # 95
        (#id float) :- float ]
      [ (#id float) :- - # 95
        (#id float) :- float ]
      [ (#id float) :- - # 95
        (#id float) :- float ]
      * [function] float.__mul__ :- function[,float,float,float]
      adding float.__mul__
      <> (#fun float.__mul__ (#pass)) }
    { (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 96
      [ (#id float) :- - # 96
        (#id float) :- float ]
      [ (#id float) :- - # 96
        (#id float) :- float ]
      [ (#id float) :- - # 96
        (#id float) :- float ]
      * [function] float.__div__ :- function[,float,float,float]
      adding float.__div__
      <> (#fun float.__div__ (#pass)) }
    { (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 97
      [ (#id float) :- - # 97
        (#id float) :- float ]
      [ (#id float) :- - # 97
        (#id float) :- float ]
      [ (#id float) :- - # 97
        (#id float) :- float ]
      * [function] float.__truediv__ :- function[,float,float,float]
      adding float.__truediv__
      <> (#fun float.__truediv__ (#pass)) }
    { (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 98
      [ (#id float) :- - # 98
        (#id float) :- float ]
      [ (#id float) :- - # 98
        (#id float) :- float ]
      [ (#id float) :- - # 98
        (#id float) :- float ]
      * [function] float.__mod__ :- function[,float,float,float]
      adding float.__mod__
      <> (#fun float.__mod__ (#pass)) }
    { (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 99
      [ (#id float) :- - # 99
        (#id float) :- float ]
      [ (#id float) :- - # 99
        (#id float) :- float ]
      [ (#id float) :- - # 99
        (#id float) :- float ]
      * [function] float.__pow__ :- function[,float,float,float]
      adding float.__pow__
      <> (#fun float.__pow__ (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 100
      [ (#id bool) :- - # 100
        (#id bool) :- bool ]
      [ (#id float) :- - # 100
        (#id float) :- float ]
      [ (#id float) :- - # 100
        (#id float) :- float ]
      * [function] float.__eq__ :- function[,bool,float,float]
      adding float.__eq__
      <> (#fun float.__eq__ (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 101
      [ (#id bool) :- - # 101
        (#id bool) :- bool ]
      [ (#id float) :- - # 101
        (#id float) :- float ]
      [ (#id float) :- - # 101
        (#id float) :- float ]
      * [function] float.__ne__ :- function[,bool,float,float]
      adding float.__ne__
      <> (#fun float.__ne__ (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 102
      [ (#id bool) :- - # 102
        (#id bool) :- bool ]
      [ (#id float) :- - # 102
        (#id float) :- float ]
      [ (#id float) :- - # 102
        (#id float) :- float ]
      * [function] float.__lt__ :- function[,bool,float,float]
      adding float.__lt__
      <> (#fun float.__lt__ (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 103
      [ (#id bool) :- - # 103
        (#id bool) :- bool ]
      [ (#id float) :- - # 103
        (#id float) :- float ]
      [ (#id float) :- - # 103
        (#id float) :- float ]
      * [function] float.__gt__ :- function[,bool,float,float]
      adding float.__gt__
      <> (#fun float.__gt__ (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 104
      [ (#id bool) :- - # 104
        (#id bool) :- bool ]
      [ (#id float) :- - # 104
        (#id float) :- float ]
      [ (#id float) :- - # 104
        (#id float) :- float ]
      * [function] float.__le__ :- function[,bool,float,float]
      adding float.__le__
      <> (#fun float.__le__ (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id float)) (#pass)) ## 105
      [ (#id bool) :- - # 105
        (#id bool) :- bool ]
      [ (#id float) :- - # 105
        (#id float) :- float ]
      [ (#id float) :- - # 105
        (#id float) :- float ]
      * [function] float.__ge__ :- function[,bool,float,float]
      adding float.__ge__
      <> (#fun float.__ge__ (#pass)) }
    { (#fun __add__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 106
      [ (#id float) :- - # 106
        (#id float) :- float ]
      [ (#id float) :- - # 106
        (#id float) :- float ]
      [ (#id int) :- - # 106
        (#id int) :- int ]
      * [function] float.__add__.1 :- function[,float,float,int]
      adding float.__add__
      <> (#fun float.__add__.1 (#pass)) }
    { (#fun __sub__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 107
      [ (#id float) :- - # 107
        (#id float) :- float ]
      [ (#id float) :- - # 107
        (#id float) :- float ]
      [ (#id int) :- - # 107
        (#id int) :- int ]
      * [function] float.__sub__.1 :- function[,float,float,int]
      adding float.__sub__
      <> (#fun float.__sub__.1 (#pass)) }
    { (#fun __mul__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 108
      [ (#id float) :- - # 108
        (#id float) :- float ]
      [ (#id float) :- - # 108
        (#id float) :- float ]
      [ (#id int) :- - # 108
        (#id int) :- int ]
      * [function] float.__mul__.1 :- function[,float,float,int]
      adding float.__mul__
      <> (#fun float.__mul__.1 (#pass)) }
    { (#fun __div__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 109
      [ (#id float) :- - # 109
        (#id float) :- float ]
      [ (#id float) :- - # 109
        (#id float) :- float ]
      [ (#id int) :- - # 109
        (#id int) :- int ]
      * [function] float.__div__.1 :- function[,float,float,int]
      adding float.__div__
      <> (#fun float.__div__.1 (#pass)) }
    { (#fun __truediv__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 110
      [ (#id float) :- - # 110
        (#id float) :- float ]
      [ (#id float) :- - # 110
        (#id float) :- float ]
      [ (#id int) :- - # 110
        (#id int) :- int ]
      * [function] float.__truediv__.1 :- function[,float,float,int]
      adding float.__truediv__
      <> (#fun float.__truediv__.1 (#pass)) }
    { (#fun __mod__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 111
      [ (#id float) :- - # 111
        (#id float) :- float ]
      [ (#id float) :- - # 111
        (#id float) :- float ]
      [ (#id int) :- - # 111
        (#id int) :- int ]
      * [function] float.__mod__.1 :- function[,float,float,int]
      adding float.__mod__
      <> (#fun float.__mod__.1 (#pass)) }
    { (#fun __pow__ :ret (#id float) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 112
      [ (#id float) :- - # 112
        (#id float) :- float ]
      [ (#id float) :- - # 112
        (#id float) :- float ]
      [ (#id int) :- - # 112
        (#id int) :- int ]
      * [function] float.__pow__.1 :- function[,float,float,int]
      adding float.__pow__
      <> (#fun float.__pow__.1 (#pass)) }
    { (#fun __eq__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 113
      [ (#id bool) :- - # 113
        (#id bool) :- bool ]
      [ (#id float) :- - # 113
        (#id float) :- float ]
      [ (#id int) :- - # 113
        (#id int) :- int ]
      * [function] float.__eq__.1 :- function[,bool,float,int]
      adding float.__eq__
      <> (#fun float.__eq__.1 (#pass)) }
    { (#fun __ne__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 114
      [ (#id bool) :- - # 114
        (#id bool) :- bool ]
      [ (#id float) :- - # 114
        (#id float) :- float ]
      [ (#id int) :- - # 114
        (#id int) :- int ]
      * [function] float.__ne__.1 :- function[,bool,float,int]
      adding float.__ne__
      <> (#fun float.__ne__.1 (#pass)) }
    { (#fun __lt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 115
      [ (#id bool) :- - # 115
        (#id bool) :- bool ]
      [ (#id float) :- - # 115
        (#id float) :- float ]
      [ (#id int) :- - # 115
        (#id int) :- int ]
      * [function] float.__lt__.1 :- function[,bool,float,int]
      adding float.__lt__
      <> (#fun float.__lt__.1 (#pass)) }
    { (#fun __gt__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 116
      [ (#id bool) :- - # 116
        (#id bool) :- bool ]
      [ (#id float) :- - # 116
        (#id float) :- float ]
      [ (#id int) :- - # 116
        (#id int) :- int ]
      * [function] float.__gt__.1 :- function[,bool,float,int]
      adding float.__gt__
      <> (#fun float.__gt__.1 (#pass)) }
    { (#fun __le__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 117
      [ (#id bool) :- - # 117
        (#id bool) :- bool ]
      [ (#id float) :- - # 117
        (#id float) :- float ]
      [ (#id int) :- - # 117
        (#id int) :- int ]
      * [function] float.__le__.1 :- function[,bool,float,int]
      adding float.__le__
      <> (#fun float.__le__.1 (#pass)) }
    { (#fun __ge__ :ret (#id bool) :args (self :typ (#id float)) (other :typ (#id int)) (#pass)) ## 118
      [ (#id bool) :- - # 118
        (#id bool) :- bool ]
      [ (#id float) :- - # 118
        (#id float) :- float ]
      [ (#id int) :- - # 118
        (#id int) :- int ]
      * [function] float.__ge__.1 :- function[,bool,float,int]
      adding float.__ge__
      <> (#fun float.__ge__.1 (#pass)) }
    <> #pass }
  { (#extend (#index (#id optional) (#id T)) ((#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id optional) (#id T))) (#pass))
  (#fun __invert__ :ret (#id T) :args (self :typ (#index (#id optional) (#id T))) (#pass)))) ## 120
    [ (#id optional) :- - # 120
      UNBOUND 9 ADDED # 120 
      (#id optional) :- optional[?9] ]
    adding T
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id optional) (#id T))) (#pass)) ## 121
      [ (#id bool) :- - # 121
        (#id bool) :- bool ]
      [ (#index (#id optional) (#id T)) :- - # 121
        [ (#id optional) :- - # 121
          UNBOUND 10 ADDED # 121 
          (#id optional) :- optional[?10] ]
        [ (#id T) :- - # 121
          (#id T) :- ?2 ]
        (#typeof (#id optional)) :- optional[?2] ]
      * [function] optional.__bool__ :- function[,bool,optional[?2]]
      adding optional.__bool__
      <> (#fun optional.__bool__ (#pass)) }
    { (#fun __invert__ :ret (#id T) :args (self :typ (#index (#id optional) (#id T))) (#pass)) ## 122
      [ (#id T) :- - # 122
        (#id T) :- ?2 ]
      [ (#index (#id optional) (#id T)) :- - # 122
        [ (#id optional) :- - # 122
          UNBOUND 11 ADDED # 122 
          (#id optional) :- optional[?11] ]
        [ (#id T) :- - # 122
          (#id T) :- ?2 ]
        (#typeof (#id optional)) :- optional[?2] ]
      * [function] optional.__invert__ :- function[,?2,optional[?2]]
      adding optional.__invert__
      <> (#fun optional.__invert__ (#pass)) }
    removing T
    killing. T
    <> #pass }
  { (#extend (#index (#id generator) (#id T)) ((#fun __iter__ :ret (#index (#id generator) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __raw__ :ret (#index (#id ptr) (#id byte)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __done__ :ret (#id bool) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __promise__ :ret (#index (#id ptr) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __resume__ :ret (#id void) :args (self :typ (#index (#id generator) (#id T))) (#pass))
  (#fun __str__ :ret (#id str) :args (self :typ (#index (#id generator) (#id T))) (#pass)))) ## 124
    [ (#id generator) :- - # 124
      UNBOUND 12 ADDED # 124 
      (#id generator) :- generator[?12] ]
    adding T
    { (#fun __iter__ :ret (#index (#id generator) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 125
      [ (#index (#id generator) (#id T)) :- - # 125
        [ (#id generator) :- - # 125
          UNBOUND 13 ADDED # 125 
          (#id generator) :- generator[?13] ]
        [ (#id T) :- - # 125
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      [ (#index (#id generator) (#id T)) :- - # 125
        [ (#id generator) :- - # 125
          UNBOUND 14 ADDED # 125 
          (#id generator) :- generator[?14] ]
        [ (#id T) :- - # 125
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__iter__ :- function[,generator[?1],generator[?1]]
      adding generator.__iter__
      <> (#fun generator.__iter__ (#pass)) }
    { (#fun __raw__ :ret (#index (#id ptr) (#id byte)) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 126
      [ (#index (#id ptr) (#id byte)) :- - # 126
        [ (#id ptr) :- - # 126
          UNBOUND 15 ADDED # 126 
          (#id ptr) :- ptr[?15] ]
        [ (#id byte) :- - # 126
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#index (#id generator) (#id T)) :- - # 126
        [ (#id generator) :- - # 126
          UNBOUND 16 ADDED # 126 
          (#id generator) :- generator[?16] ]
        [ (#id T) :- - # 126
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__raw__ :- function[,ptr[byte],generator[?1]]
      adding generator.__raw__
      <> (#fun generator.__raw__ (#pass)) }
    { (#fun __done__ :ret (#id bool) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 127
      [ (#id bool) :- - # 127
        (#id bool) :- bool ]
      [ (#index (#id generator) (#id T)) :- - # 127
        [ (#id generator) :- - # 127
          UNBOUND 17 ADDED # 127 
          (#id generator) :- generator[?17] ]
        [ (#id T) :- - # 127
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__done__ :- function[,bool,generator[?1]]
      adding generator.__done__
      <> (#fun generator.__done__ (#pass)) }
    { (#fun __promise__ :ret (#index (#id ptr) (#id T)) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 128
      [ (#index (#id ptr) (#id T)) :- - # 128
        [ (#id ptr) :- - # 128
          UNBOUND 18 ADDED # 128 
          (#id ptr) :- ptr[?18] ]
        [ (#id T) :- - # 128
          (#id T) :- ?1 ]
        (#typeof (#id ptr)) :- ptr[?1] ]
      [ (#index (#id generator) (#id T)) :- - # 128
        [ (#id generator) :- - # 128
          UNBOUND 19 ADDED # 128 
          (#id generator) :- generator[?19] ]
        [ (#id T) :- - # 128
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__promise__ :- function[,ptr[?1],generator[?1]]
      adding generator.__promise__
      <> (#fun generator.__promise__ (#pass)) }
    { (#fun __resume__ :ret (#id void) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 129
      [ (#id void) :- - # 129
        (#id void) :- void ]
      [ (#index (#id generator) (#id T)) :- - # 129
        [ (#id generator) :- - # 129
          UNBOUND 20 ADDED # 129 
          (#id generator) :- generator[?20] ]
        [ (#id T) :- - # 129
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__resume__ :- function[,void,generator[?1]]
      adding generator.__resume__
      <> (#fun generator.__resume__ (#pass)) }
    { (#fun __str__ :ret (#id str) :args (self :typ (#index (#id generator) (#id T))) (#pass)) ## 130
      [ (#id str) :- - # 130
        (#id str) :- str ]
      [ (#index (#id generator) (#id T)) :- - # 130
        [ (#id generator) :- - # 130
          UNBOUND 21 ADDED # 130 
          (#id generator) :- generator[?21] ]
        [ (#id T) :- - # 130
          (#id T) :- ?1 ]
        (#typeof (#id generator)) :- generator[?1] ]
      * [function] generator.__str__ :- function[,str,generator[?1]]
      adding generator.__str__
      <> (#fun generator.__str__ (#pass)) }
    removing T
    killing. T
    <> #pass }
  { (#type array :gen (T) :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id T)))  :attrs (internal) ((#fun __elemsize__ :ret (#id int) (#pass))
  (#fun __atomic__ :ret (#id bool) (#pass))
  (#fun __new__ :ret (#index (#id array) (#id T)) :args (len :typ (#id int)) (#pass))
  (#fun __new__ :ret (#index (#id array) (#id T)) :args (data :typ (#index (#id ptr) (#id T))) (len :typ (#id int)) (#pass))
  (#fun __copy__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __len__ :ret (#id int) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id array) (#id T))) (#pass))
  (#fun __getitem__ :ret (#id T) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (#pass))
  (#fun __slice__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (r :typ (#id int)) (#pass))
  (#fun __slice_left__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (r :typ (#id int)) (#pass))
  (#fun __slice_right__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (#pass))
  (#fun __setitem__ :ret (#id void) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (what :typ (#id T)) (#pass)))) ## 132
    adding T
    * [class] array :- array[#22]
    [ (#id int) :- - # 133
      (#id int) :- int ]
    [ (#index (#id ptr) (#id T)) :- - # 133
      [ (#id ptr) :- - # 133
        UNBOUND 23 ADDED # 133 
        (#id ptr) :- ptr[?23] ]
      [ (#id T) :- - # 133
        (#id T) :- ?22 ]
      (#typeof (#id ptr)) :- ptr[?22] ]
    adding array
    { (#fun __elemsize__ :ret (#id int) (#pass)) ## 134
      [ (#id int) :- - # 134
        (#id int) :- int ]
      * [function] array.__elemsize__ :- function[,int]
      adding array.__elemsize__
      <> (#fun array.__elemsize__ (#pass)) }
    { (#fun __atomic__ :ret (#id bool) (#pass)) ## 135
      [ (#id bool) :- - # 135
        (#id bool) :- bool ]
      * [function] array.__atomic__ :- function[,bool]
      adding array.__atomic__
      <> (#fun array.__atomic__ (#pass)) }
    { (#fun __new__ :ret (#index (#id array) (#id T)) :args (len :typ (#id int)) (#pass)) ## 136
      [ (#index (#id array) (#id T)) :- - # 136
        [ (#id array) :- - # 136
          UNBOUND 24 ADDED # 136 
          (#id array) :- array[?24] ]
        [ (#id T) :- - # 136
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 136
        (#id int) :- int ]
      * [function] array.__new__ :- function[,array[?22],int]
      adding array.__new__
      <> (#fun array.__new__ (#pass)) }
    { (#fun __new__ :ret (#index (#id array) (#id T)) :args (data :typ (#index (#id ptr) (#id T))) (len :typ (#id int)) (#pass)) ## 137
      [ (#index (#id array) (#id T)) :- - # 137
        [ (#id array) :- - # 137
          UNBOUND 25 ADDED # 137 
          (#id array) :- array[?25] ]
        [ (#id T) :- - # 137
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#index (#id ptr) (#id T)) :- - # 137
        [ (#id ptr) :- - # 137
          UNBOUND 26 ADDED # 137 
          (#id ptr) :- ptr[?26] ]
        [ (#id T) :- - # 137
          (#id T) :- ?22 ]
        (#typeof (#id ptr)) :- ptr[?22] ]
      [ (#id int) :- - # 137
        (#id int) :- int ]
      * [function] array.__new__.1 :- function[,array[?22],ptr[?22],int]
      adding array.__new__
      <> (#fun array.__new__.1 (#pass)) }
    { (#fun __copy__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (#pass)) ## 138
      [ (#index (#id array) (#id T)) :- - # 138
        [ (#id array) :- - # 138
          UNBOUND 27 ADDED # 138 
          (#id array) :- array[?27] ]
        [ (#id T) :- - # 138
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#index (#id array) (#id T)) :- - # 138
        [ (#id array) :- - # 138
          UNBOUND 28 ADDED # 138 
          (#id array) :- array[?28] ]
        [ (#id T) :- - # 138
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      * [function] array.__copy__ :- function[,array[?22],array[?22]]
      adding array.__copy__
      <> (#fun array.__copy__ (#pass)) }
    { (#fun __len__ :ret (#id int) :args (self :typ (#index (#id array) (#id T))) (#pass)) ## 139
      [ (#id int) :- - # 139
        (#id int) :- int ]
      [ (#index (#id array) (#id T)) :- - # 139
        [ (#id array) :- - # 139
          UNBOUND 29 ADDED # 139 
          (#id array) :- array[?29] ]
        [ (#id T) :- - # 139
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      * [function] array.__len__ :- function[,int,array[?22]]
      adding array.__len__
      <> (#fun array.__len__ (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id array) (#id T))) (#pass)) ## 140
      [ (#id bool) :- - # 140
        (#id bool) :- bool ]
      [ (#index (#id array) (#id T)) :- - # 140
        [ (#id array) :- - # 140
          UNBOUND 30 ADDED # 140 
          (#id array) :- array[?30] ]
        [ (#id T) :- - # 140
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      * [function] array.__bool__ :- function[,bool,array[?22]]
      adding array.__bool__
      <> (#fun array.__bool__ (#pass)) }
    { (#fun __getitem__ :ret (#id T) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (#pass)) ## 141
      [ (#id T) :- - # 141
        (#id T) :- ?22 ]
      [ (#index (#id array) (#id T)) :- - # 141
        [ (#id array) :- - # 141
          UNBOUND 31 ADDED # 141 
          (#id array) :- array[?31] ]
        [ (#id T) :- - # 141
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 141
        (#id int) :- int ]
      * [function] array.__getitem__ :- function[,?22,array[?22],int]
      adding array.__getitem__
      <> (#fun array.__getitem__ (#pass)) }
    { (#fun __slice__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (r :typ (#id int)) (#pass)) ## 142
      [ (#index (#id array) (#id T)) :- - # 142
        [ (#id array) :- - # 142
          UNBOUND 32 ADDED # 142 
          (#id array) :- array[?32] ]
        [ (#id T) :- - # 142
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#index (#id array) (#id T)) :- - # 142
        [ (#id array) :- - # 142
          UNBOUND 33 ADDED # 142 
          (#id array) :- array[?33] ]
        [ (#id T) :- - # 142
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 142
        (#id int) :- int ]
      [ (#id int) :- - # 142
        (#id int) :- int ]
      * [function] array.__slice__ :- function[,array[?22],array[?22],int,int]
      adding array.__slice__
      <> (#fun array.__slice__ (#pass)) }
    { (#fun __slice_left__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (r :typ (#id int)) (#pass)) ## 143
      [ (#index (#id array) (#id T)) :- - # 143
        [ (#id array) :- - # 143
          UNBOUND 34 ADDED # 143 
          (#id array) :- array[?34] ]
        [ (#id T) :- - # 143
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#index (#id array) (#id T)) :- - # 143
        [ (#id array) :- - # 143
          UNBOUND 35 ADDED # 143 
          (#id array) :- array[?35] ]
        [ (#id T) :- - # 143
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 143
        (#id int) :- int ]
      * [function] array.__slice_left__ :- function[,array[?22],array[?22],int]
      adding array.__slice_left__
      <> (#fun array.__slice_left__ (#pass)) }
    { (#fun __slice_right__ :ret (#index (#id array) (#id T)) :args (self :typ (#index (#id array) (#id T))) (l :typ (#id int)) (#pass)) ## 144
      [ (#index (#id array) (#id T)) :- - # 144
        [ (#id array) :- - # 144
          UNBOUND 36 ADDED # 144 
          (#id array) :- array[?36] ]
        [ (#id T) :- - # 144
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#index (#id array) (#id T)) :- - # 144
        [ (#id array) :- - # 144
          UNBOUND 37 ADDED # 144 
          (#id array) :- array[?37] ]
        [ (#id T) :- - # 144
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 144
        (#id int) :- int ]
      * [function] array.__slice_right__ :- function[,array[?22],array[?22],int]
      adding array.__slice_right__
      <> (#fun array.__slice_right__ (#pass)) }
    { (#fun __setitem__ :ret (#id void) :args (self :typ (#index (#id array) (#id T))) (index :typ (#id int)) (what :typ (#id T)) (#pass)) ## 145
      [ (#id void) :- - # 145
        (#id void) :- void ]
      [ (#index (#id array) (#id T)) :- - # 145
        [ (#id array) :- - # 145
          UNBOUND 38 ADDED # 145 
          (#id array) :- array[?38] ]
        [ (#id T) :- - # 145
          (#id T) :- ?22 ]
        (#typeof (#id array)) :- array[?22] ]
      [ (#id int) :- - # 145
        (#id int) :- int ]
      [ (#id T) :- - # 145
        (#id T) :- ?22 ]
      * [function] array.__setitem__ :- function[,void,array[?22],int,?22]
      adding array.__setitem__
      <> (#fun array.__setitem__ (#pass)) }
    removing T
    killing. T
    <> (#type array  :attrs (internal) ()) }
  { (#type seq :args (len :typ (#id int)) (ptr :typ (#index (#id ptr) (#id byte)))  :attrs (internal) ((#fun __new__ :ret (#id seq) :args (s :typ (#id str)) ((#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr))))))) ## 150
    * [class] seq :- seq
    [ (#id int) :- - # 151
      (#id int) :- int ]
    [ (#index (#id ptr) (#id byte)) :- - # 151
      [ (#id ptr) :- - # 151
        UNBOUND 39 ADDED # 151 
        (#id ptr) :- ptr[?39] ]
      [ (#id byte) :- - # 151
        (#id byte) :- byte ]
      (#typeof (#id ptr)) :- ptr[byte] ]
    adding seq
    { (#fun __new__ :ret (#id seq) :args (s :typ (#id str)) ((#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr))))) ## 152
      [ (#id seq) :- - # 152
        (#id seq) :- seq ]
      >> realized seq
      [ (#id str) :- - # 152
        (#id str) :- str ]
      * [function] seq.__new__ :- function[,seq,str]
      adding seq.__new__
      <> (#fun seq.__new__ (#pass)) }
    <> (#type seq  :attrs (internal) ()) }
  { (#class list :gen (T) :args (arr :typ (#index (#id array) (#id T))) (len :typ (#id int))  ((#fun __init__ :args (self :typ (#index (#id list) (#id T))) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T))))
  (#assign (#dot (#id self) len) (#int 0))))
  (#fun __init__ :args (self :typ (#index (#id list) (#id T))) (sz :typ (#id int)) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T)) (#id sz)))
  (#assign (#dot (#id self) len) (#int 0))))
  (#fun append :args (self :typ (#index (#id list) (#id T))) (i :typ (#id T)) ((#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i))
  (#assign (#dot (#id self) len) (#int 1))))
  (#fun __str__ :args (self :typ (#index (#id list) (#id T))) ((#return (#call (#dot (#id len) __str__)))))
  (#fun __iter__ :args (self :typ (#index (#id list) (#id T))) ((#for (#id i) (#dot (#id self) arr) ((#yield (#id i)))))))) ## 156
    adding T
    adding list
    * [class] list :- list[#40]
    [ (#index (#id array) (#id T)) :- - # 157
      [ (#id array) :- - # 157
        UNBOUND 41 ADDED # 157 
        (#id array) :- array[?41] ]
      [ (#id T) :- - # 157
        (#id T) :- ?40 ]
      (#typeof (#id array)) :- array[?40] ]
    [ (#id int) :- - # 158
      (#id int) :- int ]
    { (#fun __new__ :ret (#index (#id list) (#id T)) :attrs (internal) (#pass)) ## 158
      [ (#index (#id list) (#id T)) :- - # 158
        [ (#id list) :- - # 158
          UNBOUND 42 ADDED # 158 
          (#id list) :- list[?42] ]
        [ (#id T) :- - # 158
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__new__ :- function[,list[?40]]
      adding list.__new__
      <> (#fun list.__new__ :attrs (internal) (#pass)) }
    { (#fun __bool__ :ret (#id bool) :args (self :typ (#index (#id list) (#id T))) :attrs (internal) (#pass)) ## 160
      [ (#id bool) :- - # 160
        (#id bool) :- bool ]
      [ (#index (#id list) (#id T)) :- - # 160
        [ (#id list) :- - # 160
          UNBOUND 43 ADDED # 160 
          (#id list) :- list[?43] ]
        [ (#id T) :- - # 160
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__bool__ :- function[,bool,list[?40]]
      adding list.__bool__
      <> (#fun list.__bool__ :attrs (internal) (#pass)) }
    { (#fun __pickle__ :ret (#id void) :args (self :typ (#index (#id list) (#id T))) (dest :typ (#index (#id ptr) (#id byte))) :attrs (internal) (#pass)) ## 162
      [ (#id void) :- - # 162
        (#id void) :- void ]
      [ (#index (#id list) (#id T)) :- - # 162
        [ (#id list) :- - # 162
          UNBOUND 44 ADDED # 162 
          (#id list) :- list[?44] ]
        [ (#id T) :- - # 162
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      [ (#index (#id ptr) (#id byte)) :- - # 162
        [ (#id ptr) :- - # 162
          UNBOUND 45 ADDED # 162 
          (#id ptr) :- ptr[?45] ]
        [ (#id byte) :- - # 162
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      * [function] list.__pickle__ :- function[,void,list[?40],ptr[byte]]
      adding list.__pickle__
      <> (#fun list.__pickle__ :attrs (internal) (#pass)) }
    { (#fun __unpickle__ :ret (#index (#id list) (#id T)) :args (src :typ (#index (#id ptr) (#id byte))) :attrs (internal) (#pass)) ## 164
      [ (#index (#id list) (#id T)) :- - # 164
        [ (#id list) :- - # 164
          UNBOUND 46 ADDED # 164 
          (#id list) :- list[?46] ]
        [ (#id T) :- - # 164
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      [ (#index (#id ptr) (#id byte)) :- - # 164
        [ (#id ptr) :- - # 164
          UNBOUND 47 ADDED # 164 
          (#id ptr) :- ptr[?47] ]
        [ (#id byte) :- - # 164
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      * [function] list.__unpickle__ :- function[,list[?40],ptr[byte]]
      adding list.__unpickle__
      <> (#fun list.__unpickle__ :attrs (internal) (#pass)) }
    { (#fun __raw__ :ret (#index (#id ptr) (#id byte)) :args (self :typ (#index (#id list) (#id T))) :attrs (internal) (#pass)) ## 166
      [ (#index (#id ptr) (#id byte)) :- - # 166
        [ (#id ptr) :- - # 166
          UNBOUND 48 ADDED # 166 
          (#id ptr) :- ptr[?48] ]
        [ (#id byte) :- - # 166
          (#id byte) :- byte ]
        (#typeof (#id ptr)) :- ptr[byte] ]
      [ (#index (#id list) (#id T)) :- - # 166
        [ (#id list) :- - # 166
          UNBOUND 49 ADDED # 166 
          (#id list) :- list[?49] ]
        [ (#id T) :- - # 166
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__raw__ :- function[,ptr[byte],list[?40]]
      adding list.__raw__
      <> (#fun list.__raw__ :attrs (internal) (#pass)) }
    { (#fun __init__ :ret (#id void) :args (self :typ (#index (#id list) (#id T))) (arr :typ (#index (#id array) (#id T))) (len :typ (#id int)) :attrs (internal) (#pass)) ## 168
      [ (#id void) :- - # 168
        (#id void) :- void ]
      [ (#index (#id list) (#id T)) :- - # 168
        [ (#id list) :- - # 168
          UNBOUND 50 ADDED # 168 
          (#id list) :- list[?50] ]
        [ (#id T) :- - # 168
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      [ (#index (#id array) (#id T)) :- - # 168
        [ (#id array) :- - # 168
          UNBOUND 51 ADDED # 168 
          (#id array) :- array[?51] ]
        [ (#id T) :- - # 168
          (#id T) :- ?40 ]
        (#typeof (#id array)) :- array[?40] ]
      [ (#id int) :- - # 168
        (#id int) :- int ]
      * [function] list.__init__ :- function[,void,list[?40],array[?40],int]
      adding list.__init__
      <> (#fun list.__init__ :attrs (internal) (#pass)) }
    { (#fun __init__ :args (self :typ (#index (#id list) (#id T))) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T))))
  (#assign (#dot (#id self) len) (#int 0)))) ## 159
      [ (#index (#id list) (#id T)) :- - # 159
        [ (#id list) :- - # 159
          UNBOUND 53 ADDED # 159 
          (#id list) :- list[?53] ]
        [ (#id T) :- - # 159
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__init__.1 :- function[,#52,list[?40]]
      adding list.__init__
      <> (#fun list.__init__.1 (#pass)) }
    { (#fun __init__ :args (self :typ (#index (#id list) (#id T))) (sz :typ (#id int)) ((#assign (#dot (#id self) arr) (#call (#index (#id array) (#id T)) (#id sz)))
  (#assign (#dot (#id self) len) (#int 0)))) ## 162
      [ (#index (#id list) (#id T)) :- - # 162
        [ (#id list) :- - # 162
          UNBOUND 55 ADDED # 162 
          (#id list) :- list[?55] ]
        [ (#id T) :- - # 162
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      [ (#id int) :- - # 162
        (#id int) :- int ]
      * [function] list.__init__.2 :- function[,#54,list[?40],int]
      adding list.__init__
      <> (#fun list.__init__.2 (#pass)) }
    { (#fun append :args (self :typ (#index (#id list) (#id T))) (i :typ (#id T)) ((#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i))
  (#assign (#dot (#id self) len) (#int 1)))) ## 165
      [ (#index (#id list) (#id T)) :- - # 165
        [ (#id list) :- - # 165
          UNBOUND 57 ADDED # 165 
          (#id list) :- list[?57] ]
        [ (#id T) :- - # 165
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      [ (#id T) :- - # 165
        (#id T) :- ?40 ]
      * [function] list.append :- function[,#56,list[?40],?40]
      adding list.append
      <> (#fun list.append (#pass)) }
    { (#fun __str__ :args (self :typ (#index (#id list) (#id T))) ((#return (#call (#dot (#id len) __str__))))) ## 168
      [ (#index (#id list) (#id T)) :- - # 168
        [ (#id list) :- - # 168
          UNBOUND 59 ADDED # 168 
          (#id list) :- list[?59] ]
        [ (#id T) :- - # 168
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__str__ :- function[,#58,list[?40]]
      adding list.__str__
      <> (#fun list.__str__ (#pass)) }
    { (#fun __iter__ :args (self :typ (#index (#id list) (#id T))) ((#for (#id i) (#dot (#id self) arr) ((#yield (#id i)))))) ## 170
      [ (#index (#id list) (#id T)) :- - # 170
        [ (#id list) :- - # 170
          UNBOUND 61 ADDED # 170 
          (#id list) :- list[?61] ]
        [ (#id T) :- - # 170
          (#id T) :- ?40 ]
        (#typeof (#id list)) :- list[?40] ]
      * [function] list.__iter__ :- function[,#60,list[?40]]
      adding list.__iter__
      <> (#fun list.__iter__ (#pass)) }
    removing T
    killing. T
    <> (#class list  ()) }
  { (#import core/aliases :what *) ## 174
    { (#pass
  (#assign (#id cobj) (#index (#id ptr) (#id byte)))
  (#assign (#id Jar) (#index (#id ptr) (#id byte)))) ## 0
      { #pass ## 10
        <> #pass }
      { (#assign (#id cobj) (#index (#id ptr) (#id byte))) ## 10
        [ (#index (#id ptr) (#id byte)) :- - # 10
          [ (#id ptr) :- - # 10
            UNBOUND 62 ADDED # 10 
            (#id ptr) :- ptr[?62] ]
          [ (#id byte) :- - # 10
            (#id byte) :- byte ]
          (#typeof (#id ptr)) :- ptr[byte] ]
        adding cobj
        <> (#assign (#id cobj) (#typeof (#id ptr))) }
      { (#assign (#id Jar) (#index (#id ptr) (#id byte))) ## 11
        [ (#index (#id ptr) (#id byte)) :- - # 11
          [ (#id ptr) :- - # 11
            UNBOUND 63 ADDED # 11 
            (#id ptr) :- ptr[?63] ]
          [ (#id byte) :- - # 11
            (#id byte) :- byte ]
          (#typeof (#id ptr)) :- ptr[byte] ]
        adding Jar
        <> (#assign (#id Jar) (#typeof (#id ptr))) }
      <> (#pass
  (#assign (#id cobj) (#typeof (#id ptr)))
  (#assign (#id Jar) (#typeof (#id ptr)))) }
    adding Jar
    adding cobj
    <> (#import core/aliases :what *) }
  <> ((#type str  :attrs (internal) ())
  (#type array  :attrs (internal) ())
  (#type seq  :attrs (internal) ())
  (#class list  ())
  (#import core/aliases :what *)) }
adding #str
adding #seq
adding #array
adding __argv__
{ ((#assign (#id a) (#bool 1))
  (#assign (#id b) (#int 1))
  (#assign (#id c) (#float 5.15))
  (#assign (#id d) (#str 'str'))
  (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d)))
  (#assign (#id f) (#seq 'ACGT' :prefix s))
  (#assign (#id l) (#list (#int 1) (#id b)))
  (#assign (#id g) #list)
  (#expr (#call (#dot (#id g) append) (#id l)))
  (#expr (#tuple (#id g)))) ## 0
  { (#assign (#id a) (#bool 1)) ## 1
    [ (#bool 1) :- - # 1
      (#bool 1) :- bool ]
    adding a
    <> (#assign (#id a) (#bool 1)) }
  { (#assign (#id b) (#int 1)) ## 2
    [ (#int 1) :- - # 2
      (#int 1) :- int ]
    adding b
    <> (#assign (#id b) (#int 1)) }
  { (#assign (#id c) (#float 5.15)) ## 3
    [ (#float 5.15) :- - # 3
      (#float 5.15) :- float ]
    adding c
    <> (#assign (#id c) (#float 5.15)) }
  { (#assign (#id d) (#str 'str')) ## 4
    [ (#str 'str') :- - # 4
      (#str 'str') :- str ]
    adding d
    <> (#assign (#id d) (#str 'str')) }
  { (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d))) ## 5
    [ (#tuple (#id c) (#id b) (#id a) (#id d)) :- - # 5
      [ (#id c) :- - # 5
        (#id c) :- float ]
      [ (#id b) :- - # 5
        (#id b) :- int ]
      [ (#id a) :- - # 5
        (#id a) :- bool ]
      [ (#id d) :- - # 5
        (#id d) :- str ]
      (#tuple (#id c) (#id b) (#id a) (#id d)) :- tuple ]
    >> realized tuple
    adding e
    <> (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d))) }
  { (#assign (#id f) (#seq 'ACGT' :prefix s)) ## 6
    [ (#seq 'ACGT' :prefix s) :- - # 6
      [ (#call (#id seq) (#str 'ACGT')) :- - # 6
        [ (#id seq) :- - # 6
          (#id seq) :- seq ]
        [ (#str 'ACGT') :- - # 6
          (#str 'ACGT') :- str ]
        (#call (#dot (#id seq) __new__) (#str 'ACGT')) :- - ]
      (#call (#dot (#id seq) __new__) (#str 'ACGT')) :- - ]
    adding f
    <> (#assign (#id f) (#call (#dot (#id seq) __new__) (#str 'ACGT'))) }
  { (#assign (#id l) (#list (#int 1) (#id b))) ## 8
    [ (#list (#int 1) (#id b)) :- - # 8
      { (#assign (#id $_lst_1) (#call (#id list) (#int 2))) ## 8
        [ (#call (#id list) (#int 2)) :- - # 8
          [ (#id list) :- - # 8
            UNBOUND 64 ADDED # 8 
            (#id list) :- list[?64] ]
          [ (#int 2) :- - # 8
            (#int 2) :- int ]
          { (#assign (#id $_typ_2) (#call (#dot (#id list) __new__))) ## 8
            [ (#call (#dot (#id list) __new__)) :- - # 8
              [ (#id list) :- list[?64] # 8
                UNBOUND 65 ADDED # 8 
                (#id list) :- list[?65] ]
              [ (#dot (#id list) __new__) :- - # 8
                [ (#id list) :- list[?65] # 8
                  UNBOUND 66 ADDED # 8 
                  (#id list) :- list[?66] ]
                (#id list.__new__) :- function[,list[?66]] ]
              (#call (#id list.__new__)) :- list[?66] ]
            adding $_typ_2
            <> (#assign (#id $_typ_2) (#call (#id list.__new__))) }
          { (#expr (#call (#dot (#id $_typ_2) __init__) (#int 2))) ## 8
            [ (#call (#dot (#id $_typ_2) __init__) (#int 2)) :- - # 8
              [ (#id $_typ_2) :- - # 8
                (#id $_typ_2) :- list[?66] ]
              UNBOUND 67 ADDED # 8 
              [ (#int 2) :- int # 8
                (#int 2) :- int ]
              (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)) :- ?67 ]
            <> (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2))) }
          [ (#id $_typ_2) :- - # 8
            (#id $_typ_2) :- list[?66] ]
          (#id $_typ_2) :- list[?66] ]
        adding $_lst_1
        <> ((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2))) }
      { (#expr (#call (#dot (#id $_lst_1) append) (#int 1))) ## 8
        [ (#call (#dot (#id $_lst_1) append) (#int 1)) :- - # 8
          [ (#id $_lst_1) :- - # 8
            (#id $_lst_1) :- list[?66] ]
          UNBOUND 68 ADDED # 8 
          [ (#int 1) :- - # 8
            (#int 1) :- int ]
          adding self
          adding i
          { ((#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i))
  (#assign (#dot (#id self) len) (#int 1))) ## 0
            { (#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i)) ## 166
              { (#expr (#call (#dot (#dot (#id self) arr) __setitem__) (#dot (#id self) len) (#id i))) ## 166
                [ (#call (#dot (#dot (#id self) arr) __setitem__) (#dot (#id self) len) (#id i)) :- - # 166
                  [ (#dot (#id self) arr) :- - # 166
                    [ (#id self) :- - # 166
                      (#id self) :- list[int] ]
                    >> realized array[int]
                    >> realized list[int]
                    (#dot (#id self) arr) :- array[int] ]
                  [ (#dot (#id self) len) :- - # 166
                    [ (#id self) :- - # 166
                      (#id self) :- list[int] ]
                    (#dot (#id self) len) :- int ]
                  [ (#id i) :- - # 166
                    (#id i) :- int ]
                  adding self
                  adding index
                  adding what
                  { (#pass) ## 0
                    { #pass ## 145
                      <> #pass }
                    <> (#pass) }
                  <:> array.__setitem__ function[int;,array[int],int,int]
                  removing self
                  removing index
                  removing what
                  >> realized array.__setitem__::function[,void,array[int],int,int]
                  (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i)) :- void ]
                <> (#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i))) }
              <> (#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i))) }
            { (#assign (#dot (#id self) len) (#int 1)) ## 167
              [ (#dot (#id self) len) :- - # 167
                [ (#id self) :- - # 167
                  (#id self) :- list[int] ]
                (#dot (#id self) len) :- int ]
              [ (#int 1) :- - # 167
                (#int 1) :- int ]
              <> (#assign (#dot (#id self) len) (#int 1)) }
            <> ((#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i)))
  (#assign (#dot (#id self) len) (#int 1))) }
          <:> list.append function[int;,list[int],int]
          removing self
          removing i
          >> realized list.append::function[,void,list[int],int]
          (#call (#id list.append) (#id $_lst_1) (#int 1)) :- void ]
        <> (#expr (#call (#id list.append) (#id $_lst_1) (#int 1))) }
      { (#expr (#call (#dot (#id $_lst_1) append) (#id b))) ## 8
        [ (#call (#dot (#id $_lst_1) append) (#id b)) :- - # 8
          [ (#id $_lst_1) :- - # 8
            (#id $_lst_1) :- list[int] ]
          UNBOUND 69 ADDED # 8 
          [ (#id b) :- - # 8
            (#id b) :- int ]
          (#call (#id list.append) (#id $_lst_1) (#id b)) :- void ]
        <> (#expr (#call (#id list.append) (#id $_lst_1) (#id b))) }
      [ (#id $_lst_1) :- - # 8
        (#id $_lst_1) :- list[int] ]
      (#id $_lst_1) :- list[int] ]
    adding l
    <> (((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#int 1)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#id b)))
  (#assign (#id l) (#id $_lst_1))) }
  { (#assign (#id g) #list) ## 9
    [ #list :- - # 9
      { (#assign (#id $_lst_3) (#call (#id list))) ## 9
        [ (#call (#id list)) :- - # 9
          [ (#id list) :- - # 9
            UNBOUND 70 ADDED # 9 
            (#id list) :- list[?70] ]
          { (#assign (#id $_typ_4) (#call (#dot (#id list) __new__))) ## 9
            [ (#call (#dot (#id list) __new__)) :- - # 9
              [ (#id list) :- list[?70] # 9
                UNBOUND 71 ADDED # 9 
                (#id list) :- list[?71] ]
              [ (#dot (#id list) __new__) :- - # 9
                [ (#id list) :- list[?71] # 9
                  UNBOUND 72 ADDED # 9 
                  (#id list) :- list[?72] ]
                (#id list.__new__) :- function[,list[?72]] ]
              (#call (#id list.__new__)) :- list[?72] ]
            adding $_typ_4
            <> (#assign (#id $_typ_4) (#call (#id list.__new__))) }
          { (#expr (#call (#dot (#id $_typ_4) __init__))) ## 9
            [ (#call (#dot (#id $_typ_4) __init__)) :- - # 9
              [ (#id $_typ_4) :- - # 9
                (#id $_typ_4) :- list[?72] ]
              UNBOUND 73 ADDED # 9 
              [ #ellipsis :- - # 9
                UNBOUND 0x7fbf3d5246c8 ADDED # 9 
                #ellipsis :- ?74 ]
              (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis) :- function[,?73,int] ]
            <> (#expr (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis)) }
          [ (#id $_typ_4) :- - # 9
            (#id $_typ_4) :- list[?72] ]
          (#id $_typ_4) :- list[?72] ]
        adding $_lst_3
        <> ((#assign (#id $_typ_4) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis))
  (#assign (#id $_lst_3) (#id $_typ_4))) }
      [ (#id $_lst_3) :- - # 9
        (#id $_lst_3) :- list[?72] ]
      (#id $_lst_3) :- list[?72] ]
    adding g
    <> (((#assign (#id $_typ_4) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis))
  (#assign (#id $_lst_3) (#id $_typ_4)))
  (#assign (#id g) (#id $_lst_3))) }
  { (#expr (#call (#dot (#id g) append) (#id l))) ## 10
    [ (#call (#dot (#id g) append) (#id l)) :- - # 10
      [ (#id g) :- - # 10
        (#id g) :- list[?72] ]
      UNBOUND 75 ADDED # 10 
      [ (#id l) :- - # 10
        (#id l) :- list[int] ]
      adding self
      adding i
      { ((#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i))
  (#assign (#dot (#id self) len) (#int 1))) ## 0
        { (#assign (#index (#dot (#id self) arr) (#dot (#id self) len)) (#id i)) ## 166
          { (#expr (#call (#dot (#dot (#id self) arr) __setitem__) (#dot (#id self) len) (#id i))) ## 166
            [ (#call (#dot (#dot (#id self) arr) __setitem__) (#dot (#id self) len) (#id i)) :- - # 166
              [ (#dot (#id self) arr) :- - # 166
                [ (#id self) :- - # 166
                  (#id self) :- list[list[int]] ]
                >> realized array[list[int]]
                >> realized list[list[int]]
                (#dot (#id self) arr) :- array[list[int]] ]
              [ (#dot (#id self) len) :- - # 166
                [ (#id self) :- - # 166
                  (#id self) :- list[list[int]] ]
                (#dot (#id self) len) :- int ]
              [ (#id i) :- - # 166
                (#id i) :- list[int] ]
              adding self
              adding index
              adding what
              { (#pass) ## 0
                { #pass ## 145
                  <> #pass }
                <> (#pass) }
              <:> array.__setitem__ function[list[int];,array[list[int]],int,list[int]]
              removing self
              removing index
              removing what
              >> realized array.__setitem__::function[,void,array[list[int]],int,list[int]]
              (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i)) :- void ]
            <> (#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i))) }
          <> (#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i))) }
        { (#assign (#dot (#id self) len) (#int 1)) ## 167
          [ (#dot (#id self) len) :- - # 167
            [ (#id self) :- - # 167
              (#id self) :- list[list[int]] ]
            (#dot (#id self) len) :- int ]
          [ (#int 1) :- - # 167
            (#int 1) :- int ]
          <> (#assign (#dot (#id self) len) (#int 1)) }
        <> ((#expr (#call (#id array.__setitem__) (#dot (#id self) arr) (#dot (#id self) len) (#id i)))
  (#assign (#dot (#id self) len) (#int 1))) }
      <:> list.append function[list[int];,list[list[int]],list[int]]
      removing self
      removing i
      >> realized list.append::function[,void,list[list[int]],list[int]]
      (#call (#id list.append) (#id g) (#id l)) :- void ]
    <> (#expr (#call (#id list.append) (#id g) (#id l))) }
  { (#expr (#tuple (#id g))) ## 11
    [ (#tuple (#id g)) :- - # 11
      [ (#id g) :- - # 11
        (#id g) :- list[list[int]] ]
      (#tuple (#id g)) :- tuple ]
    <> (#expr (#tuple (#id g))) }
  <> ((#assign (#id a) (#bool 1))
  (#assign (#id b) (#int 1))
  (#assign (#id c) (#float 5.15))
  (#assign (#id d) (#str 'str'))
  (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d)))
  (#assign (#id f) (#call (#dot (#id seq) __new__) (#str 'ACGT')))
  (((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#int 1)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#id b)))
  (#assign (#id l) (#id $_lst_1)))
  (((#assign (#id $_typ_4) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis))
  (#assign (#id $_lst_3) (#id $_typ_4)))
  (#assign (#id g) (#id $_lst_3)))
  (#expr (#call (#id list.append) (#id g) (#id l)))
  (#expr (#tuple (#id g)))) }
removing a
removing b
removing c
removing d
removing e
removing f
removing $_typ_2
removing $_lst_1
removing l
removing $_typ_4
removing $_lst_3
removing g
{ ((#assign (#id a) (#bool 1))
  (#assign (#id b) (#int 1))
  (#assign (#id c) (#float 5.15))
  (#assign (#id d) (#str 'str'))
  (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d)))
  (#assign (#id f) (#call (#dot (#id seq) __new__) (#str 'ACGT')))
  (((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#int 1)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#id b)))
  (#assign (#id l) (#id $_lst_1)))
  (((#assign (#id $_typ_4) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_4) #ellipsis))
  (#assign (#id $_lst_3) (#id $_typ_4)))
  (#assign (#id g) (#id $_lst_3)))
  (#expr (#call (#id list.append) (#id g) (#id l)))
  (#expr (#tuple (#id g)))) ## 0
  { (#assign (#id a) (#bool 1)) ## 1
    [ (#bool 1) :- bool # 1
      (#bool 1) :- bool ]
    adding a
    <> (#assign (#id a) (#bool 1)) }
  { (#assign (#id b) (#int 1)) ## 2
    [ (#int 1) :- int # 2
      (#int 1) :- int ]
    adding b
    <> (#assign (#id b) (#int 1)) }
  { (#assign (#id c) (#float 5.15)) ## 3
    [ (#float 5.15) :- float # 3
      (#float 5.15) :- float ]
    adding c
    <> (#assign (#id c) (#float 5.15)) }
  { (#assign (#id d) (#str 'str')) ## 4
    [ (#str 'str') :- str # 4
      (#str 'str') :- str ]
    adding d
    <> (#assign (#id d) (#str 'str')) }
  { (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d))) ## 5
    [ (#tuple (#id c) (#id b) (#id a) (#id d)) :- tuple # 5
      [ (#id c) :- float # 5
        (#id c) :- float ]
      [ (#id b) :- int # 5
        (#id b) :- int ]
      [ (#id a) :- bool # 5
        (#id a) :- bool ]
      [ (#id d) :- str # 5
        (#id d) :- str ]
      (#tuple (#id c) (#id b) (#id a) (#id d)) :- tuple ]
    adding e
    <> (#assign (#id e) (#tuple (#id c) (#id b) (#id a) (#id d))) }
  { (#assign (#id f) (#call (#dot (#id seq) __new__) (#str 'ACGT'))) ## 6
    [ (#call (#dot (#id seq) __new__) (#str 'ACGT')) :- - # 6
      [ (#id seq) :- seq # 6
        (#id seq) :- seq ]
      [ (#dot (#id seq) __new__) :- - # 6
        [ (#id seq) :- seq # 6
          (#id seq) :- seq ]
        (#id seq.__new__) :- function[,seq,str] ]
      [ (#str 'ACGT') :- str # 6
        (#str 'ACGT') :- str ]
      adding s
      { ((#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr)))) ## 0
        { (#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr))) ## 153
          [ (#tuple (#dot (#id s) len) (#dot (#id s) ptr)) :- - # 153
            [ (#dot (#id s) len) :- - # 153
              [ (#id s) :- - # 153
                (#id s) :- str ]
              (#dot (#id s) len) :- int ]
            [ (#dot (#id s) ptr) :- - # 153
              [ (#id s) :- - # 153
                (#id s) :- str ]
              (#dot (#id s) ptr) :- ptr[byte] ]
            (#tuple (#dot (#id s) len) (#dot (#id s) ptr)) :- tuple ]
          <> (#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr))) }
        <> ((#return (#tuple (#dot (#id s) len) (#dot (#id s) ptr)))) }
      <:> seq.__new__ function[,str]
      removing s
      >> realized seq.__new__::function[,seq,str]
      (#call (#id seq.__new__) (#str 'ACGT')) :- seq ]
    adding f
    <> (#assign (#id f) (#call (#id seq.__new__) (#str 'ACGT'))) }
  { (((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#int 1)))
  (#expr (#call (#id list.append) (#id $_lst_1) (#id b)))
  (#assign (#id l) (#id $_lst_1))) ## 0
    { ((#assign (#id $_typ_2) (#call (#id list.__new__)))
  (#expr (#call (#id list.__init__.2) (#id $_typ_2) (#int 2)))
  (#assign (#id $_lst_1) (#id $_typ_2))) ## 8
      { (#assign (#id $_typ_2) (#call (#id list.__new__))) ## 8
        [ (#call (#id list.__new__)) :- list[int] # 8
          [ (#id list.__new__) :- function[,list[int]] # 8
[1m<internal>: [1;31merror:[0m[1m identifier 'list.__new__' not found[0m
